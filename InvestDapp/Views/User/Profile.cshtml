@{
    ViewData["Title"] = "Profile";
    Layout = "~/Pages/_Layout.cshtml";
}

@section Styles {
    <style>
        .hidden {
            display: none !important
        }

        /* ===== Hero (cover) ===== */
        .profile-hero {
            padding-top: calc(var(--header-h,72px) + 28px);
            padding-bottom: 18px;
            width: min(1200px,94vw);
            margin: auto;
        }

        .hero-card {
            background: linear-gradient(180deg, rgba(255,255,255,.08), rgba(255,255,255,.02));
            border: 1px solid var(--border);
            border-radius: 16px;
            box-shadow: var(--shadow);
            padding: 18px;
            display: grid;
            grid-template-columns: 140px 1fr auto;
            gap: 16px;
            align-items: center;
            position: relative;
        }

        .hero-avatar {
            position: relative;
            width: 120px;
            height: 120px;
            border-radius: 50%;
            border: 3px solid var(--primary);
            overflow: hidden;
            background: #223;
        }

            .hero-avatar img {
                width: 100%;
                height: 100%;
                object-fit: cover
            }

        .kyc-badge {
            position: absolute;
            right: -6px;
            bottom: -6px;
            width: 28px;
            height: 28px;
            border-radius: 50%;
            display: grid;
            place-items: center;
            background: linear-gradient(180deg, rgba(255,255,255,.12), rgba(255,255,255,.06));
            border: 1px solid var(--border);
        }

            .kyc-badge svg {
                width: 16px;
                height: 16px
            }

        .name-row {
            display: flex;
            align-items: center;
            gap: 10px;
            flex-wrap: wrap
        }

        .hero-name {
            font-size: 1.4rem;
            font-weight: 800
        }

        .pill {
            font-size: 12px;
            padding: 4px 8px;
            border-radius: 999px;
            border: 1px solid var(--border);
            background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
            color: var(--muted)
        }

        .wallet-row {
            display: flex;
            align-items: center;
            gap: 10px;
            flex-wrap: wrap
        }

        .mono {
            font-family: ui-monospace, SFMono-Regular, Menlo, monospace
        }

        .muted {
            color: var(--muted)
        }

        .btn {
            --glow: rgba(108,240,255,.45);
            background: linear-gradient(180deg, rgba(108,240,255,.18), rgba(155,107,255,.18));
            border: 1px solid var(--border);
            color: var(--fg);
            padding: 10px 14px;
            border-radius: 12px;
            font-weight: 700;
            cursor: pointer;
            transition: transform .18s, box-shadow .18s;
        }

            .btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 26px var(--glow)
            }

            .btn.secondary {
                background: linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02))
            }

            .btn.inline {
                height: 40px
            }

        .hero-actions {
            display: flex;
            gap: 8px;
            flex-wrap: wrap
        }

        .save-state {
            min-height: 20px;
            font-size: .95rem;
            text-align: right
        }

            .save-state.saving {
                color: #ffd27d
            }

            .save-state.ok {
                color: #19e58c
            }

            .save-state.err {
                color: #ff8e8e
            }

        /* ===== Main grid ===== */
        .profile-main {
            width: min(1200px,94vw);
            margin: 16px auto 30px;
            display: grid;
            grid-template-columns: 1fr .9fr;
            gap: 18px
        }
        @@media (max-width: 980px) {
            .profile-main

        {
            grid-template-columns: 1fr
        }

        }

        .card {
            background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
            border: 1px solid var(--border);
            border-radius: 16px;
            box-shadow: var(--shadow);
            overflow: hidden
        }

        .card-hd {
            padding: 14px 16px;
            border-bottom: 1px solid var(--border);
            display: flex;
            align-items: center;
            justify-content: space-between
        }

        .card-bd {
            padding: 16px
        }

        /* Edit form */
        .grid-form {
            display: grid;
            gap: 14px
        }

        .row {
            display: grid;
            grid-template-columns: 160px 1fr;
            gap: 12px;
            align-items: center
        }
        @@media (max-width:640px) {
            .row

        {
            grid-template-columns: 1fr
        }

        }

        .label {
            color: var(--muted);
            font-size: .9rem
        }

        .input, .textarea {
            width: 100%;
            background: rgba(255,255,255,.03);
            color: var(--fg);
            border: 1px solid var(--border);
            border-radius: 10px;
            padding: 12px 14px;
            outline: none
        }

            .input:focus, .textarea:focus {
                border-color: var(--primary);
                box-shadow: 0 0 0 3px rgba(0,170,255,.18)
            }

        .textarea {
            min-height: 96px;
            resize: vertical
        }

        /* Avatar inline editor */
        .avatar-editor {
            display: grid;
            gap: 10px
        }

        .avatar-line {
            display: grid;
            grid-template-columns: 1fr auto auto;
            gap: 8px
        }
        @@media (max-width:640px) {
            .avatar-line

        {
            grid-template-columns: 1fr
        }

        }

        /* Notifications (right) */
        .notice-list {
            display: grid;
            gap: 8px;
            max-height: 400px;
            overflow-y: auto;
            padding-right: 8px;
        }

        .notice-list::-webkit-scrollbar {
            width: 6px;
        }

        .notice-list::-webkit-scrollbar-track {
            background: var(--border);
            border-radius: 3px;
        }

        .notice-list::-webkit-scrollbar-thumb {
            background: var(--muted);
            border-radius: 3px;
        }

        .notice-list::-webkit-scrollbar-thumb:hover {
            background: var(--fg);
        }

        .notice-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 10px;
            padding: 12px;
            border: 1px solid var(--border);
            border-radius: 8px;
            background: var(--bg);
            transition: all 0.2s ease;
            cursor: pointer;
        }

        .notice-item:hover {
            background: rgba(255,255,255,.02);
            border-color: var(--primary);
        }

        .notice-item.unread { 
            background: linear-gradient(135deg, rgba(var(--primary-rgb), 0.1), rgba(var(--primary-rgb), 0.05));
            border-left: 4px solid var(--primary);
            box-shadow: 0 2px 8px rgba(var(--primary-rgb), 0.2);
            font-weight: 600;
        }

        .notice-item.unread .notice-title {
            color: var(--primary);
        }

        .notice-title { 
            font-weight: 600;
            font-size: 14px;
            line-height: 1.4;
        }

        .notice-meta { 
            font-size: 11px; 
            color: var(--muted);
            margin-top: 2px;
        }

        .notice-item .btn {
            padding: 4px 8px;
            font-size: 11px;
            min-width: 50px;
        }
    </style>
}

<div id="profileRoot" class="hidden">
    <!-- ===== HERO ===== -->
    <section class="profile-hero">
        <div class="hero-card">
            <div class="hero-avatar">
                <img id="displayAvatar" src="" alt="Avatar">
                <div id="kycBadge" class="kyc-badge hidden" title="KYC">
                    <!-- sẽ đổi icon theo trạng thái -->
                    <svg id="kycIconDot" viewBox="0 0 16 16" fill="currentColor" class="muted"><circle cx="8" cy="8" r="6" /></svg>
                </div>
            </div>

            <div>
                <div class="name-row">
                    <div id="displayName" class="hero-name"></div>
                    <svg id="mainVerifyIcon" class="hidden" width="20" height="20" viewBox="0 0 24 24" fill="currentColor" style="color:var(--primary)">
                        <path d="M12 0c-6.6 0-12 5.4-12 12s5.4 12 12 12 12-5.4 12-12S18.6 0 12 0zm-1.25 17.292l-4.5-4.364 1.857-1.858 2.643 2.506 5.643-5.784 1.857 1.857-7.5 7.643z" />
                    </svg>
                    <span id="kycPill" class="pill hidden">KYC</span>
                </div>
                <div class="wallet-row">
                    <span class="muted">Wallet:</span>
                    <span id="displayWallet" class="mono"></span>
                    <button class="btn secondary inline" id="btnCopy">Copy</button>
                </div>
                <div class="muted" id="displayBio" style="margin-top:6px;line-height:1.6"></div>
            </div>

            <div>
                <div id="saveState" class="save-state"></div>
                <div class="hero-actions" style="margin-top:8px">
                    <a id="kycButton" href="@Url.Action("FundraiserKycView", "Kyc")" class="btn secondary hidden">KYC</a>
                </div>
            </div>
        </div>
    </section>

    <!-- ===== MAIN GRID ===== -->
    <section class="profile-main">
        <!-- LEFT: Edit form -->
        <article class="card">
            <div class="card-hd">
                <strong>Chỉnh sửa hồ sơ</strong>
                <button id="btnSaveAll" class="btn">Lưu thay đổi</button>
            </div>
            <div class="card-bd grid-form">
                <div class="row">
                    <label class="label" for="inputName">Full Name</label>
                    <input id="inputName" class="input" placeholder="Enter your full name" />
                </div>
                <div class="row">
                    <label class="label" for="inputEmail">Email</label>
                    <input id="inputEmail" type="email" class="input" placeholder="name@domain.com" />
                </div>

                <div class="row">
                    <label class="label">Avatar URL</label>
                    <div class="avatar-editor">
                        <div class="avatar-line">
                            <input id="inputAvatar" class="input" placeholder="https://domain.com/avatar.png" />
                            <button id="btnPreview" class="btn secondary" type="button">Xem trước</button>
                            <button id="btnSaveAvatar" class="btn" type="button">Lưu ảnh</button>
                        </div>
                        <div id="avatarHint" class="muted" style="min-height:18px"></div>
                    </div>
                </div>

                <div class="row">
                    <label class="label" for="inputBio">Bio</label>
                    <textarea id="inputBio" class="textarea" placeholder="Tell us a little about yourself"></textarea>
                </div>
            </div>
        </article>

        <!-- RIGHT: Notifications -->
        <aside class="card">
            <div class="card-hd">
                <strong>Thông báo <span id="notificationCount" class="muted" style="font-size:12px;font-weight:normal;"></span></strong>
                <button id="btnClearNoti" class="btn secondary">Xoá đã đọc</button>
            </div>
            <div class="card-bd">
                    <div id="noticeList" class="notice-list"></div>
                    <!-- Notification detail modal -->
                    <div id="notiModal" class="hidden" style="position:fixed;inset:0;display:grid;place-items:center;z-index:9999">
                        <div style="width:min(720px,92vw);background:var(--bg);border:1px solid var(--border);padding:18px;border-radius:12px;box-shadow:var(--shadow)">
                            <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:8px">
                                <strong id="notiModalTitle">Title</strong>
                                <button id="notiClose" class="btn secondary">Đóng</button>
                            </div>
                            <div id="notiModalBody" style="margin-bottom:12px;color:var(--fg)"></div>
                        </div>
                    </div>
            </div>
        </aside>
    </section>
</div>

@section Scripts {
    <script>
        (function(){
          const root = document.getElementById('profileRoot');

          // HERO refs
          const displayAvatar = document.getElementById('displayAvatar');
          const displayName   = document.getElementById('displayName');
          const displayWallet = document.getElementById('displayWallet');
          const displayBio    = document.getElementById('displayBio');
          const mainVerifyIcon= document.getElementById('mainVerifyIcon');
          const kycButton     = document.getElementById('kycButton');
          const kycPill       = document.getElementById('kycPill');
          const kycBadge      = document.getElementById('kycBadge');
          const kycIconDot    = document.getElementById('kycIconDot');
          const saveState     = document.getElementById('saveState');

          // Form refs
          const inputName     = document.getElementById('inputName');
          const inputEmail    = document.getElementById('inputEmail');
          const inputAvatar   = document.getElementById('inputAvatar');
          const inputBio      = document.getElementById('inputBio');
          const btnPreview    = document.getElementById('btnPreview');
          const btnSaveAvatar = document.getElementById('btnSaveAvatar');
          const btnSaveAll    = document.getElementById('btnSaveAll');
          const avatarHint    = document.getElementById('avatarHint');

          // Notifications
          const noticeList    = document.getElementById('noticeList');
          const btnClearNoti  = document.getElementById('btnClearNoti');
          const notiModal     = document.getElementById('notiModal');
          const notiClose     = document.getElementById('notiClose');
          const notiModalTitle= document.getElementById('notiModalTitle');
          const notiModalBody = document.getElementById('notiModalBody');
          const notiMarkRead  = document.getElementById('notiMarkRead');

          // Header avatar (layout) nếu có
          const headerAvatar  = document.getElementById('avatar');

          // Copy wallet
          const btnCopy       = document.getElementById('btnCopy');

          function toast(msg){
            if(window.DApp?.showCustomAlert){ window.DApp.showCustomAlert(msg); return; }
            let t=document.createElement('div');
            t.textContent=msg; t.style.cssText='position:fixed;top:88px;right:16px;z-index:9999;background:rgba(0,0,0,.7);color:#fff;padding:10px 14px;border-radius:10px';
            document.body.appendChild(t); setTimeout(()=>t.remove(),2200);
          }
          function token(){
            if(typeof window.getRequestVerificationToken==='function') return window.getRequestVerificationToken();
            const el=document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]'); return el?el.value:'';
          }
          function setState(type,text){ saveState.className='save-state '+(type||''); saveState.textContent=text||''; if(type==='ok') setTimeout(()=>saveState.textContent='',1200); }


          function mapUser(u){
            return {
              name: u?.name || u?.fullName || u?.username || 'Unnamed',
              email: u?.email || '',
              wallet: u?.walletAddress || '',
              avatar: u?.avatarUrl || u?.avatar || '',
              bio: u?.bio || ''
            }
          }

          function renderUser(u){
            const d=mapUser(u);
            displayAvatar.src = d.avatar || ('https://api.dicebear.com/7.x/identicon/svg?seed='+(d.wallet||'guest'));
            displayName.textContent = d.name;
            displayWallet.textContent = d.wallet || 'Not available';
            displayBio.textContent = d.bio || 'No bio provided.';
            inputName.value=d.name; inputEmail.value=d.email; inputAvatar.value=d.avatar; inputBio.value=d.bio;
            if(headerAvatar && d.avatar){ headerAvatar.src = d.avatar; }
          }

          function renderKyc(res){
            // reset
            mainVerifyIcon.classList.add('hidden'); kycButton.classList.add('hidden'); kycPill.classList.add('hidden'); kycBadge.classList.add('hidden');
            kycIconDot.style.color = 'var(--muted)';

            if(!res || res.success===false){
              // unknown/error
              kycBadge.classList.remove('hidden'); kycIconDot.style.color = '#ff8e8e'; kycPill.textContent='KYC Error'; kycPill.classList.remove('hidden');
              return;
            }
            switch(String(res.message)){
              case '2': // verified
                mainVerifyIcon.classList.remove('hidden');
                kycBadge.classList.remove('hidden'); kycIconDot.style.color = '#19e58c';
                kycPill.textContent='Verified'; kycPill.classList.remove('hidden');
                break;
              case '1': // pending
                kycBadge.classList.remove('hidden'); kycIconDot.style.color = '#ffd27d';
                kycPill.textContent='Pending'; kycPill.classList.remove('hidden');
                break;
              case '3': // rejected
                kycBadge.classList.remove('hidden'); kycIconDot.style.color = '#ff8e8e';
                kycPill.textContent='Rejected'; kycPill.classList.remove('hidden');
                kycButton.textContent='Re-submit KYC'; kycButton.classList.remove('hidden');
                break;
              default: // 0 not verified
                kycBadge.classList.remove('hidden'); kycIconDot.style.color = 'var(--muted)';
                kycPill.textContent='Not Verified'; kycPill.classList.remove('hidden');
                kycButton.textContent='Verify KYC Now'; kycButton.classList.remove('hidden');
                break;
            }
          }

          // Data loaders
          async function loadProfile(){
            try{
              const r=await fetch('/User/GetUserProfile',{cache:'no-store'});
              if(!r.ok) throw new Error('Fetch profile failed');
              const data=await r.json();
              renderUser(data);
            }catch(e){ setState('err','Không tải được hồ sơ'); }
          }
          async function loadKyc(){
            try{
              const r=await fetch('/Kyc/CheckKyc',{cache:'no-store'});
              if(!r.ok) throw new Error('Fetch KYC failed');
              const data=await r.json(); renderKyc(data);
            }catch(e){ renderKyc({success:false}); }
          }

          // Save handlers
          async function saveAll(){
            const body={ name:inputName.value.trim(), email:inputEmail.value.trim(), avatar:inputAvatar.value.trim(), bio:inputBio.value.trim() };
            btnSaveAll.disabled=true; const o=btnSaveAll.textContent; btnSaveAll.textContent='Saving…'; setState('saving','Đang lưu…');
            try{
              const r=await fetch('/User/UpdateProfile',{method:'POST', headers:{'Content-Type':'application/json', ...(token()?{'RequestVerificationToken':token()}: {})}, body:JSON.stringify(body)});
              if(!r.ok){ let msg='Server error'; try{const e=await r.json(); msg=e?.message||msg;}catch{} throw new Error(msg); }
              renderUser({...body, walletAddress: displayWallet.textContent});
              setState('ok','Đã lưu'); toast('Profile updated successfully!');
            }catch(err){ setState('err',err.message||'Lỗi lưu'); toast('Failed to update profile.'); }
            finally{ btnSaveAll.disabled=false; btnSaveAll.textContent=o; }
          }
          function previewAvatar(){
            const url=inputAvatar.value.trim(); if(!url){ avatarHint.textContent=''; return; }
            displayAvatar.src=url; avatarHint.textContent='Xem trước — bấm "Lưu ảnh" để cập nhật.';
          }
          async function saveAvatarOnly(){
            const url=inputAvatar.value.trim(); if(!url){ avatarHint.textContent='Chưa nhập URL'; return; }
            btnSaveAvatar.disabled=true; const o=btnSaveAvatar.textContent; btnSaveAvatar.textContent='Saving…'; setState('saving','Đang lưu avatar…');
            try{
              const r=await fetch('/User/UpdateProfile',{method:'POST',headers:{'Content-Type':'application/json', ...(token()?{'RequestVerificationToken':token()}: {})}, body:JSON.stringify({avatar:url})});
              if(!r.ok) throw new Error('Save avatar failed');
              displayAvatar.src=url; if(headerAvatar) headerAvatar.src=url;
              avatarHint.textContent='Đã cập nhật ảnh đại diện'; setState('ok','Đã lưu avatar');
            }catch(e){ setState('err','Lưu avatar lỗi');}
            finally{ btnSaveAvatar.disabled=false; btnSaveAvatar.textContent=o; }
          } 

          // Events
          btnPreview.addEventListener('click', previewAvatar);
          btnSaveAvatar.addEventListener('click', saveAvatarOnly);
          btnSaveAll.addEventListener('click', saveAll);
          btnClearNoti.addEventListener('click', clearReadNotifications);
          btnCopy.addEventListener('click', async ()=>{
            const t = displayWallet.textContent?.trim(); if(!t) return;
            try{ await navigator.clipboard.writeText(t); toast('Đã copy địa chỉ ví'); }catch{ toast('Không copy được'); }
          });

          // Init
          root.classList.remove('hidden');
                    Promise.all([loadProfile(), loadKyc(), loadNotifications()]);

                    // SignalR connection for real-time notifications
                    const notificationConnection = new signalR.HubConnectionBuilder()
                        .withUrl("/notificationHub")
                        .build();

                    notificationConnection.start().then(function () {
                        console.log("NotificationHub connected.");
                    }).catch(function (err) {
                        console.error("NotificationHub connection failed: ", err);
                    });

                    // Listen for new notifications
                    notificationConnection.on("NewNotification", function (notification) {
                        console.log("New notification received:", notification);
                        // Add to notification list immediately (prepend for newest first)
                        addNotificationToList(notification, true);
                        // Show toast notification
                        toast(`🔔 ${notification.title}`);
                    });

                    // Notification functions
                    let currentNoti = null;
                    let allNotifications = [];

                    async function loadNotifications(){
                        try{
                            const r = await fetch('/User/Notifications',{cache:'no-store'});
                            if(!r.ok) throw new Error('Failed to load');
                            const data = await r.json();
                            // Store all notifications and sort newest-first
                            allNotifications = data.sort((a,b)=> new Date(b.createdAt) - new Date(a.createdAt));
                            renderNotifications(allNotifications);
                        }catch(e){ console.warn('Noti load err',e); }
                    }

                    function renderNotifications(items){
                        noticeList.innerHTML='';
                        if(!items || items.length===0){ 
                            noticeList.innerHTML='<div class="muted" style="text-align:center;padding:20px;">Không có thông báo</div>'; 
                            return; 
                        }
                        for(const it of items){
                            addNotificationToList(it, false);
                        }
                    }

                    function addNotificationToList(it, prepend = true) {
                        // Remove existing notification if it exists (for updates)
                        const existingEl = document.querySelector(`[data-notification-id="${it.id || it.ID}"]`);
                        if (existingEl) {
                            existingEl.remove();
                        }

                        const el = document.createElement('div'); 
                        el.className='notice-item'+(it.isRead? '':' unread');
                        el.dataset.notificationId = it.id || it.ID;
                        el.style.cursor='pointer';
                        
                        const title = document.createElement('div'); 
                        title.className='notice-title'; 
                        title.textContent = it.title || '(No title)';
                        
                        const meta = document.createElement('div'); 
                        meta.className='notice-meta'; 
                        meta.textContent = (new Date(it.createdAt)).toLocaleString();
                        
                        el.appendChild(title); 
                        el.appendChild(meta);
                        
                        // Click anywhere on notification to open modal
                        el.addEventListener('click', () => openNotiDetail(it));
                        
                        if (prepend && noticeList.firstChild && !noticeList.firstChild.classList.contains('muted')) {
                            noticeList.insertBefore(el, noticeList.firstChild);
                        } else {
                            if (noticeList.firstChild && noticeList.firstChild.classList.contains('muted')) {
                                noticeList.innerHTML = ''; // Clear "no notifications" message
                            }
                            noticeList.appendChild(el);
                        }

                        // Add to allNotifications array if it's a new notification
                        if (prepend) {
                            const existingIndex = allNotifications.findIndex(n => (n.id || n.ID) === (it.id || it.ID));
                            if (existingIndex === -1) {
                                allNotifications.unshift(it);
                            }
                        }
                    }

                    async function openNotiDetail(it){
                        currentNoti = it;
                        
                        // Auto mark as read when opening if it's unread
                        if (!it.isRead) {
                            await markNotificationAsRead(it.id || it.ID, false); // Don't close modal
                        }
                        
                        notiModalTitle.textContent = it.title || 'Thông báo';
                        notiModalBody.innerHTML = `
                            <div style="margin-bottom: 12px;">
                                <strong>Loại:</strong> ${it.type || 'Thông báo chung'}
                            </div>
                            <div style="margin-bottom: 12px;">
                                <strong>Nội dung:</strong><br>
                                ${it.message || 'Không có nội dung'}
                            </div>
                            <div style="margin-bottom: 12px;">
                                <strong>Thời gian:</strong> ${(new Date(it.createdAt)).toLocaleString()}
                            </div>
                            ${it.data ? `<div style="margin-bottom: 12px;"><strong>Dữ liệu:</strong><br><pre style="background: #f5f5f5; padding: 8px; border-radius: 4px; font-size: 12px;">${it.data}</pre></div>` : ''}
                        `;
                        notiModal.classList.remove('hidden');
                    }

                    async function markNotificationAsRead(notificationId, closeModal = true) {
                        if (!notificationId) {
                            toast('Không tìm thấy ID thông báo');
                            return false;
                        }
                        
                        try{
                            const r = await fetch('/User/MarkNotificationRead', { 
                                method:'POST', 
                                headers:{
                                    'Content-Type':'application/json', 
                                    ...(token()?{'RequestVerificationToken':token()}: {})
                                }, 
                                body:JSON.stringify({notificationId: notificationId}) 
                            });
                            if(!r.ok) throw new Error('Mark failed');
                            
                            // Update local data
                            const notification = allNotifications.find(n => (n.id || n.ID) === notificationId);
                            if (notification) {
                                notification.isRead = true;
                            }
                            if (currentNoti && (currentNoti.id || currentNoti.ID) === notificationId) {
                                currentNoti.isRead = true;
                            }
                            
                            // Update the notification item in the list
                            const notificationElement = document.querySelector(`[data-notification-id="${notificationId}"]`);
                            if (notificationElement) {
                                notificationElement.classList.remove('unread');
                            }
                            
                            if (closeModal) {
                                toast('Đã đánh dấu đã đọc');
                                closeNoti();
                            }
                            
                            return true;
                        }catch(e){ 
                            console.error('Mark as read failed:', e);
                            toast('Không thể đánh dấu đã đọc'); 
                            return false;
                        }
                    }

                    async function clearReadNotifications() {
                        const readNotifications = allNotifications.filter(n => n.isRead);
                        if (readNotifications.length === 0) {
                            toast('Không có thông báo đã đọc để xóa');
                            return;
                        }
                        
                        btnClearNoti.disabled = true;
                        const originalText = btnClearNoti.textContent;
                        btnClearNoti.textContent = 'Đang xóa...';
                        
                        try {
                            // Call API to delete read notifications
                            const response = await fetch('/User/ClearReadNotifications', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    ...(token() ? { 'RequestVerificationToken': token() } : {})
                                }
                            });
                            
                            if (!response.ok) {
                                throw new Error('Failed to delete notifications');
                            }
                            
                            // Remove read notifications from UI
                            readNotifications.forEach(notification => {
                                const element = document.querySelector(`[data-notification-id="${notification.id || notification.ID}"]`);
                                if (element) {
                                    element.remove();
                                }
                            });
                            
                            // Update allNotifications array
                            allNotifications = allNotifications.filter(n => !n.isRead);
                            
                            // Show empty state if no notifications left
                            if (allNotifications.length === 0) {
                                noticeList.innerHTML = '<div class="muted" style="text-align:center;padding:20px;">Không có thông báo</div>';
                            }
                            
                            toast(`Đã xóa ${readNotifications.length} thông báo đã đọc`);
                        } catch (error) {
                            console.error('Error clearing notifications:', error);
                            toast('Có lỗi khi xóa thông báo');
                            // Reload notifications on error
                            loadNotifications();
                        } finally {
                            btnClearNoti.disabled = false;
                            btnClearNoti.textContent = originalText;
                        }
                    }

                    function closeNoti(){ 
                        notiModal.classList.add('hidden'); 
                        currentNoti=null; 
                    }

                    notiClose.addEventListener('click', closeNoti);
                    notiModal.addEventListener('click', (e)=>{ if(e.target===notiModal) closeNoti(); });
        })();
    </script>
}
