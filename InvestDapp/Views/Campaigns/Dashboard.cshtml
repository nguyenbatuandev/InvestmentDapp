@model InvestDapp.Models.Campaign
@{
    ViewData["Title"] = "Dashboard - " + Model.Name;
    Layout = "~/Pages/_Layout.cshtml";
}

@section Styles {
    <style>
        /* --- BIẾN MÀU SẮC VÀ THIẾT LẬP CƠ BẢN --- */
        :root {
            --bg-dark: #0a0e1a;
            --bg-light: #12182b;
            --primary: #00aaff;
            --primary-light: #00c6ff;
            --secondary: #272c44;
            --text-color: #e0e0e0;
            --text-muted: #8a93b3;
            --success: #00e676;
            --warning: #ffb800;
            --danger: #ff6b6b;
            --gradient: linear-gradient(90deg, var(--primary), var(--primary-light));
            --font-body: 'Poppins', sans-serif;
            --font-data: 'Fira Code', monospace;
        }

        /* --- THIẾT LẬP CHUNG --- */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: var(--font-body);
            background-color: var(--bg-dark);
            color: var(--text-color);
            line-height: 1.6;
            overflow-x: hidden;
        }

        /* --- BỐ CỤC DASHBOARD CHÍNH --- */
        .dashboard-container {
            display: grid;
            grid-template-columns: 350px 1fr;
            min-height: 100vh;
            margin-top: 80px;
        }

        /* --- ACTION PANEL (BÊN TRÁI) --- */
        .action-panel {
            background-color: var(--bg-dark);
            border-right: 1px solid var(--secondary);
            padding: 2rem;
            display: flex;
            flex-direction: column;
        }

        .panel-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 2.5rem;
        }

        .panel-header .logo {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--gradient);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }

        .panel-header h2 {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .investment-module {
            background-color: var(--bg-light);
            border-radius: 16px;
            border: 1px solid var(--secondary);
            padding: 2rem;
        }

        .investment-module h3 {
            font-size: 1.1rem;
            font-weight: 500;
            margin-bottom: 1.5rem;
            color: var(--primary);
        }

        /* Vote info styling */
        .vote-info, .refund-info, .completed-info, .project-status-info {
            background: rgba(0,0,0,0.2);
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1.5rem;
            text-align: center;
        }

        .vote-info p, .refund-info p, .completed-info p, .project-status-info p {
            margin-bottom: 0.5rem;
            color: var(--text-muted);
            font-size: 0.9rem;
        }

        .voting-stats, .refund-stats, .profit-stats {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .vote-stat, .refund-stat, .profit-stat {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.8rem;
            background: rgba(0,0,0,0.1);
            border-radius: 6px;
        }

        .vote-label, .refund-label, .profit-label {
            font-size: 0.9rem;
            color: var(--text-muted);
        }

        .vote-value, .refund-value, .profit-value {
            font-family: var(--font-data);
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--primary);
        }

        .refund-value {
            color: var(--success);
        }

        .profit-value {
            color: #ffd700;
        }

        /* Warning styling */
        .vote-info p[style*="warning"], .refund-info p[style*="warning"] {
            background: rgba(255, 184, 0, 0.1);
            padding: 0.8rem;
            border-radius: 6px;
            border-left: 4px solid var(--warning);
            margin: 1rem 0;
        }

        .form-group { 
            margin-bottom: 1.5rem; 
        }

        .form-group label {
            font-size: 0.9rem;
            color: var(--text-muted);
            margin-bottom: 0.5rem;
            display: block;
        }

        .input-wrapper {
            display: flex;
            align-items: center;
            background-color: var(--bg-dark);
            border: 1px solid var(--secondary);
            border-radius: 8px;
            padding: 0 0.8rem;
        }

        .input-wrapper:focus-within {
            box-shadow: 0 0 0 2px var(--primary);
        }

        .input-wrapper span {
            color: var(--text-muted);
            font-size: 1.2rem;
        }

        .input-wrapper input {
            background: transparent;
            border: none;
            outline: none;
            color: var(--text-color);
            font-family: var(--font-data);
            font-size: 1.5rem;
            padding: 0.8rem 0.5rem;
            width: 100%;
        }

        .output-group {
            background: rgba(0,0,0,0.2);
            border-radius: 8px;
            padding: 1rem;
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .output-group p {
            font-size: 0.9rem;
            color: var(--text-muted);
        }

        .token-display {
            font-family: var(--font-data);
            font-size: 2.5rem;
            font-weight: 600;
            color: var(--primary);
        }

        .token-symbol {
            font-size: 1rem;
            font-weight: 400;
            color: var(--primary-light);
        }

        .min-max-info {
            display: flex;
            justify-content: space-between;
            font-size: 0.8rem;
            color: var(--text-muted);
            margin-bottom: 2rem;
        }

        .btn.btn-primary {
            width: 100%;
            padding: 1rem;
            font-size: 1rem;
            font-weight: 600;
            background: var(--gradient);
            border: none;
            border-radius: 8px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 170, 255, 0.2);
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn.btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 170, 255, 0.4);
        }

        .panel-footer {
            margin-top: auto;
            display: flex;
            justify-content: space-around;
        }

        .panel-footer a {
            color: var(--text-muted);
            text-decoration: none;
            font-size: 0.9rem;
            transition: color 0.3s;
        }

        .panel-footer a:hover { 
            color: var(--primary); 
        }

        /* --- INFO PANEL (BÊN PHẢI) --- */
        .info-panel {
            padding: 2rem 3rem;
            overflow-y: auto;
            height: 100vh;
        }

        /* DASHBOARD HEADER */
        .dashboard-header {
            background: linear-gradient(145deg, var(--bg-light) 0%, rgba(10, 14, 26, 0.5) 100%);
            border: 1px solid var(--secondary);
            border-radius: 16px;
            padding: 2rem;
            margin-bottom: 3rem;
            position: relative;
            box-shadow: 0 0 25px rgba(0, 170, 255, 0.05);
            display: grid;
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }

        .dashboard-header .header-main-content h1 {
            font-size: 1.8rem;
            font-weight: 600;
            color: #fff;
        }

        .dashboard-header .project-tagline {
            font-size: 1rem;
            color: var(--text-muted);
        }

        .dashboard-header .social-links {
            position: absolute;
            top: 2rem;
            right: 2rem;
        }

        .dashboard-header .social-links a {
            color: var(--text-muted);
            font-size: 1.2rem;
            margin-left: 1.5rem;
            transition: color 0.3s;
            text-decoration: none;
        }

        .dashboard-header .social-links a:hover {
            color: var(--primary);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
        }

        .stat-item {
            background: transparent;
            padding: 1rem;
            border-radius: 12px;
            border: 1px solid var(--secondary);
            transition: background-color 0.3s, border-color 0.3s;
        }

        .stat-item:hover {
            background-color: rgba(39, 44, 68, 0.3);
            border-color: var(--primary);
        }

        .stat-item .stat-label {
            font-size: 0.9rem;
            color: var(--text-muted);
            margin-bottom: 0.5rem;
        }

        .stat-item .stat-value {
            font-family: var(--font-data);
            font-size: 1.75rem;
            font-weight: 500;
            color: var(--text-color);
        }

        .stat-item .progress-bar-container {
            width: 100%;
            background-color: var(--secondary);
            border-radius: 30px;
            height: 8px;
            margin-top: 1rem;
        }

        .stat-item .progress-bar-fill {
            background: var(--gradient);
            height: 100%;
            border-radius: 30px;
            transition: width 0.8s ease;
        }

        .info-section { 
            margin-bottom: 4rem; 
        }

        .info-section h2 {
            font-size: 1.5rem;
            font-weight: 500;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--secondary);
        }

        .info-section h2 i {
            margin-right: 1rem;
            color: var(--primary);
        }

        /* --- ROADMAP --- */
        .roadmap-timeline {
            position: relative;
        }

        .roadmap-timeline::before {
            content: '';
            position: absolute;
            top: 10px;
            bottom: 10px;
            left: 11px;
            width: 2px;
            background-color: var(--secondary);
            border-radius: 2px;
        }

        .roadmap-item {
            position: relative;
            padding-left: 45px;
            margin-bottom: 2rem;
        }

        .roadmap-item:last-child {
            margin-bottom: 0;
        }

        .roadmap-item::before {
            content: '';
            position: absolute;
            top: 4px;
            left: 11px;
            transform: translateX(-50%);
            width: 22px;
            height: 22px;
            border-radius: 50%;
            background-color: var(--bg-dark);
            border: 2px solid var(--secondary);
            transition: border-color 0.3s ease;
        }

        .roadmap-item.done::before {
            border-color: var(--primary);
            background-color: var(--primary);
        }

        .roadmap-item.current::before {
            border-color: var(--success);
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(0, 230, 118, 0.5);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(0, 230, 118, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(0, 230, 118, 0);
            }
        }

        .roadmap-content h4 {
            font-size: 1.1rem;
            color: var(--text-color);
        }

        .roadmap-content p {
            font-size: 0.9rem;
            color: var(--text-muted);
        }

        /* --- TEAM --- */
        .team-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 2rem;
            text-align: center;
        }

        .hexagon {
            position: relative;
            width: 120px;
            height: 138.56px;
            background-color: var(--secondary);
            margin: 0 auto 1rem;
            clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
        }

        .hexagon img {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 95%;
            height: 95%;
            object-fit: cover;
            clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
        }

        .team-member h4 { 
            font-size: 1.1rem; 
        }

        .team-member p { 
            font-size: 0.9rem; 
            color: var(--text-muted); 
        }

        /* --- TRANSACTION FEED --- */
        .transaction-feed {
            background-color: var(--bg-light);
            border: 1px solid var(--secondary);
            border-radius: 12px;
            padding: 1rem;
            height: 300px;
            overflow-y: auto;
        }

        .transaction-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.8rem 1rem;
            border-radius: 8px;
            animation: fadeIn 0.5s ease;
        }

        @@keyframes fadeIn { 
            from { 
                opacity: 0; 
                transform: translateY(-10px); 
            } 
            to { 
                opacity: 1; 
                transform: translateY(0); 
            } 
        }

        .transaction-item:nth-child(odd) { 
            background-color: rgba(0,0,0,0.1); 
        }

        .tx-from { 
            font-family: var(--font-data); 
            font-size: 0.9rem; 
            color: var(--text-muted); 
        }

        .tx-amount { 
            font-family: var(--font-data); 
            font-size: 1rem; 
            font-weight: 500; 
            color: var(--success); 
        }

        .tx-time { 
            font-family: var(--font-data); 
            font-size: 0.8rem; 
            color: var(--text-muted); 
        }

        /* Status badges */
        .status-badge {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            border-radius: 25px;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .status-pending {
            background: rgba(255, 184, 0, 0.2);
            color: #ffb800;
            border: 1px solid rgba(255, 184, 0, 0.3);
        }

        .status-active {
            background: rgba(0, 212, 170, 0.2);
            color: #00d4aa;
            border: 1px solid rgba(0, 212, 170, 0.3);
        }

        .status-voting {
            background: rgba(0, 170, 255, 0.2);
            color: #00aaff;
            border: 1px solid rgba(0, 170, 255, 0.3);
        }

        .status-completed {
            background: rgba(0, 230, 118, 0.2);
            color: #00e676;
            border: 1px solid rgba(0, 230, 118, 0.3);
        }

        .status-failed {
            background: rgba(255, 107, 107, 0.2);
            color: #ff6b6b;
            border: 1px solid rgba(255, 107, 107, 0.3);
        }

        /* --- WITHDRAWAL REQUEST STYLES --- */
        .withdrawal-request-card {
            transition: all 0.3s ease;
        }

        .withdrawal-request-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 170, 255, 0.1);
        }

        .vote-progress-bar {
            position: relative;
            overflow: hidden;
        }

        .btn.btn-success {
            background: linear-gradient(135deg, #28a745, #20c997);
            border: none;
            color: white;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn.btn-success:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        }

        .btn.btn-danger {
            background: linear-gradient(135deg, #dc3545, #e74c3c);
            border: none;
            color: white;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn.btn-danger:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
        }

        /* --- RESPONSIVE DESIGN --- */
        @@media (max-width: 1200px) {
            .dashboard-container { 
                grid-template-columns: 300px 1fr; 
            }
        }

        @@media (max-width: 992px) {
            .dashboard-container { 
                grid-template-columns: 1fr; 
            }
            .action-panel {
                border-right: none;
                border-bottom: 1px solid var(--secondary);
                height: auto;
            }
            .info-panel { 
                height: auto; 
            }
        }

        @@media (max-width: 576px) {
            .info-panel { 
                padding: 1.5rem; 
            }
            .dashboard-header { 
                padding: 1.5rem;
            }
        }
    </style>
}

<div class="dashboard-container">
    <aside class="action-panel">
        <div class="panel-header">
            <div class="logo">@Model.Name.Substring(0, 1).ToUpper()</div>
            <h2>@Model.Name</h2>
        </div>

        <div class="investment-module">
            @if (Model.Status == InvestDapp.Shared.Enums.CampaignStatus.Active && 
                 Model.ApprovalStatus == InvestDapp.Shared.Enums.ApprovalStatus.Approved)
            {
                <h3><i class="fa-solid fa-rocket"></i> Bảng điều khiển đầu tư</h3>
                <div class="form-group">
                    <label for="investment-amount">Số tiền đầu tư (BNB)</label>
                    <div class="input-wrapper">
                        <span>₿</span>
                        <input type="number" id="investment-amount" placeholder="1" min="0.1" step="0.1">
                    </div>
                </div>

                <div class="output-group">
                    <p>Phần sở hữu dự kiến</p>
                    <div class="token-display">
                        <span id="ownership-percentage">0</span>
                        <span class="token-symbol">%</span>
                    </div>
                </div>

                <div class="min-max-info">
                    <span>Tối thiểu: 0.1 BNB</span>
                    <span>Tối đa: @(Model.GoalAmount - Model.CurrentRaisedAmount) BNB</span>
                </div>
            }
            else if (Model.Status == InvestDapp.Shared.Enums.CampaignStatus.Voting)
            {
                var currentUserWallet = User.FindFirst("WalletAddress")?.Value;
                var userInvestment = Model.Investments?.FirstOrDefault(i => i.InvestorAddress.Equals(currentUserWallet, StringComparison.OrdinalIgnoreCase));
                var isInvestor = userInvestment != null;

                <h3><i class="fa-solid fa-vote-yea"></i> Bảng điều khiển bỏ phiếu</h3>
                
                if (isInvestor)
                {
                    <div class="vote-info">
                        <p>Dự án đang trong giai đoạn bỏ phiếu.</p>
                        <p>Bạn đã đầu tư <strong>@userInvestment.Amount.ToString("F2") BNB</strong> vào dự án này.</p>
                        <p>Hãy tham gia quyết định tương lai của dự án!</p>
                    </div>
                    
                    <div class="voting-stats">
                        <div class="vote-stat">
                            <span class="vote-label">Quyền vote của bạn:</span>
                            <span class="vote-value">@userInvestment.Amount.ToString("F2") BNB</span>
                        </div>
                        <div class="vote-stat">
                            <span class="vote-label">Phần trăm quyền vote:</span>
                            <span class="vote-value">@((userInvestment.Amount / Model.CurrentRaisedAmount * 100).ToString("F2"))%</span>
                        </div>
                    </div>
                    
                    <div class="voting-stats">
                        <div class="vote-stat">
                            <span class="vote-label">Phiếu ủng hộ:</span>
                            <span class="vote-value">--%</span>
                        </div>
                        <div class="vote-stat">
                            <span class="vote-label">Phiếu phản đối:</span>
                            <span class="vote-value">--%</span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="vote-info">
                        <p>Dự án đang trong giai đoạn bỏ phiếu.</p>
                        <p style="color: var(--warning);">⚠️ Chỉ nhà đầu tư mới có quyền bỏ phiếu.</p>
                        <p>Bạn cần đầu tư vào dự án để tham gia quyết định.</p>
                    </div>
                    
                    <div class="voting-stats">
                        <div class="vote-stat">
                            <span class="vote-label">Tổng vốn đầu tư:</span>
                            <span class="vote-value">@Model.CurrentRaisedAmount.ToString("F2") BNB</span>
                        </div>
                        <div class="vote-stat">
                            <span class="vote-label">Số nhà đầu tư:</span>
                            <span class="vote-value">@Model.InvestorCount người</span>
                        </div>
                    </div>
                }
            }
            else if (Model.Status == InvestDapp.Shared.Enums.CampaignStatus.Failed)
            {
                var currentUserWallet = User.FindFirst("WalletAddress")?.Value;
                var userInvestment = Model.Investments?.FirstOrDefault(i => i.InvestorAddress.Equals(currentUserWallet, StringComparison.OrdinalIgnoreCase));
                var isInvestor = userInvestment != null;

                <h3><i class="fa-solid fa-money-bill-wave"></i> Hoàn tiền đầu tư</h3>
                
                if (isInvestor)
                {
                    <div class="refund-info">
                        <p>Dự án đã thất bại hoặc bị hủy bỏ.</p>
                        <p>Bạn đã đầu tư <strong>@userInvestment.Amount.ToString("F2") BNB</strong> vào dự án này.</p>
                        <p>Bạn có thể claim lại toàn bộ số tiền đã đầu tư.</p>
                    </div>
                    
                    <div class="refund-stats">
                        <div class="refund-stat">
                            <span class="refund-label">Số tiền có thể claim:</span>
                            <span class="refund-value">@userInvestment.Amount.ToString("F2") BNB</span>
                        </div>
                        <div class="refund-stat">
                            <span class="refund-label">Ngày đầu tư:</span>
                            <span class="refund-value">@userInvestment.Timestamp.ToString("dd/MM/yyyy")</span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="refund-info">
                        <p>Dự án đã thất bại hoặc bị hủy bỏ.</p>
                        <p style="color: var(--warning);">⚠️ Chỉ nhà đầu tư mới có thể claim refund.</p>
                        <p>Bạn không có khoản đầu tư nào trong dự án này.</p>
                    </div>
                    
                    <div class="refund-stats">
                        <div class="refund-stat">
                            <span class="refund-label">Tổng vốn cần hoàn:</span>
                            <span class="refund-value">@Model.CurrentRaisedAmount.ToString("F2") BNB</span>
                        </div>
                        <div class="refund-stat">
                            <span class="refund-label">Số nhà đầu tư:</span>
                            <span class="refund-value">@Model.InvestorCount người</span>
                        </div>
                    </div>
                }
            }
            else if (Model.Status == InvestDapp.Shared.Enums.CampaignStatus.Completed)
            {
                <h3><i class="fa-solid fa-trophy"></i> Dự án hoàn thành</h3>
                <div class="completed-info">
                    <p>Chúc mừng! Dự án đã hoàn thành thành công.</p>
                    <p>Lợi nhuận sẽ được phân phối tự động.</p>
                </div>
                <div class="profit-stats">
                    <div class="profit-stat">
                        <span class="profit-label">Lợi nhuận nhận được:</span>
                        <span class="profit-value">-- BNB</span>
                    </div>
                </div>
            }
            else
            {
                <h3><i class="fa-solid fa-info-circle"></i> Thông tin dự án</h3>
                <div class="project-status-info">
                    <p>Dự án đang ở giai đoạn chuẩn bị.</p>
                    <p>Vui lòng chờ đợi thêm thông tin.</p>
                </div>
            }
        </div>

        <div class="panel-footer">
            <a href="@Url.Action("Details", new { id = Model.Id })">Chi tiết</a>
            <a href="@Url.Action("Posts", new { campaignId = Model.Id })">Bài viết</a>
            @if (Model.WithdrawalRequests?.Any() == true)
            {
                <a href="@Url.Action("WithdrawalRequests", new { id = Model.Id })">Rút vốn</a>
            }
            <a href="@Url.Action("Index")">Tất cả dự án</a>
        </div>
    </aside>

    <main class="info-panel">
        <header class="dashboard-header">
            <div class="header-main-content">
                <h1>Dashboard Chiến Dịch</h1>
                <p class="project-tagline">@Model.ShortDescription</p>
            </div>
            <div class="social-links">
                <a href="#"><i class="fab fa-telegram"></i></a>
                <a href="#"><i class="fab fa-twitter"></i></a>
                <a href="#"><i class="fas fa-globe"></i></a>
            </div>
            <div class="stats-grid">
                <div class="stat-item">
                    <p class="stat-label">Tổng huy động</p>
                    <p class="stat-value">@Model.CurrentRaisedAmount.ToString("F2") BNB</p>
                    <div class="progress-bar-container">
                        <div class="progress-bar-fill" style="width: @(Model.GoalAmount > 0 ? (Model.CurrentRaisedAmount / Model.GoalAmount * 100) : 0)%;"></div>
                    </div>
                </div>
                <div class="stat-item">
                    <p class="stat-label">Nhà đầu tư</p>
                    <p class="stat-value">@Model.InvestorCount</p>
                </div>
                <div class="stat-item">
                    <p class="stat-label">Thời gian còn lại</p>
                    <p id="countdown" class="stat-value">--:--:--:--</p>
                </div>
                <div class="stat-item">
                    <p class="stat-label">Trạng thái</p>
                    <div class="stat-value">
                        @{
                            string statusClass = "";
                            string statusText = "";
                            string statusIcon = "";
                            
                            if (Model.ApprovalStatus != InvestDapp.Shared.Enums.ApprovalStatus.Approved)
                            {
                                switch (Model.ApprovalStatus)
                                {
                                    case InvestDapp.Shared.Enums.ApprovalStatus.Pending:
                                        statusClass = "status-pending";
                                        statusText = "Chờ duyệt";
                                        statusIcon = "fa-clock";
                                        break;
                                    case InvestDapp.Shared.Enums.ApprovalStatus.Rejected:
                                        statusClass = "status-failed";
                                        statusText = "Bị từ chối";
                                        statusIcon = "fa-times-circle";
                                        break;
                                }
                            }
                            else
                            {
                                switch (Model.Status)
                                {
                                    case InvestDapp.Shared.Enums.CampaignStatus.Draft:
                                        statusClass = "status-pending";
                                        statusText = "Đang soạn thảo";
                                        statusIcon = "fa-edit";
                                        break;
                                    case InvestDapp.Shared.Enums.CampaignStatus.PendingPost:
                                        statusClass = "status-pending";
                                        statusText = "Chờ bài viết";
                                        statusIcon = "fa-pen";
                                        break;
                                    case InvestDapp.Shared.Enums.CampaignStatus.PendingApproval:
                                        statusClass = "status-pending";
                                        statusText = "Chờ phê duyệt";
                                        statusIcon = "fa-clock";
                                        break;
                                    case InvestDapp.Shared.Enums.CampaignStatus.Active:
                                        statusClass = "status-active";
                                        statusText = "Đang gây quỹ";
                                        statusIcon = "fa-play-circle";
                                        break;
                                    case InvestDapp.Shared.Enums.CampaignStatus.Voting:
                                        statusClass = "status-voting";
                                        statusText = "Đang bỏ phiếu";
                                        statusIcon = "fa-vote-yea";
                                        break;
                                    case InvestDapp.Shared.Enums.CampaignStatus.Completed:
                                        statusClass = "status-completed";
                                        statusText = "Hoàn thành";
                                        statusIcon = "fa-check-circle";
                                        break;
                                    case InvestDapp.Shared.Enums.CampaignStatus.Failed:
                                        statusClass = "status-failed";
                                        statusText = "Thất bại";
                                        statusIcon = "fa-times-circle";
                                        break;
                                }
                            }
                        }
                        <span class="status-badge @statusClass">
                            <i class="fas @statusIcon"></i> @statusText
                        </span>
                    </div>
                </div>
            </div>
        </header>

        <section class="info-section" id="roadmap">
            <h2><i class="fa-solid fa-map-signs"></i> Tiến độ dự án</h2>
            <div class="roadmap-timeline">
                <div class="roadmap-item done">
                    <div class="roadmap-content">
                        <h4>Tạo dự án</h4>
                        <p>@Model.CreatedAt.ToString("dd/MM/yyyy") - Đã hoàn thành</p>
                    </div>
                </div>
                
                @{
                    bool hasFirstPost = Model.Posts?.Any() == true;
                    bool isApproved = Model.ApprovalStatus == InvestDapp.Shared.Enums.ApprovalStatus.Approved;
                    var currentStatus = Model.Status;
                }

                <div class="roadmap-item @(hasFirstPost ? "done" : (currentStatus == InvestDapp.Shared.Enums.CampaignStatus.PendingPost || currentStatus == InvestDapp.Shared.Enums.CampaignStatus.Draft ? "current" : ""))">
                    <div class="roadmap-content">
                        <h4>Tạo bài viết đầu tiên</h4>
                        <p>@(hasFirstPost ? "Đã hoàn thành" : "Đang thực hiện")</p>
                    </div>
                </div>

                <div class="roadmap-item @(isApproved ? "done" : (hasFirstPost && currentStatus == InvestDapp.Shared.Enums.CampaignStatus.PendingApproval ? "current" : ""))">
                    <div class="roadmap-content">
                        <h4>Phê duyệt từ Admin</h4>
                        <p>@(isApproved ? "Đã hoàn thành" : (hasFirstPost ? "Đang chờ duyệt" : "Chưa bắt đầu"))</p>
                    </div>
                </div>

                <div class="roadmap-item @(currentStatus == InvestDapp.Shared.Enums.CampaignStatus.Active ? "current" : (currentStatus == InvestDapp.Shared.Enums.CampaignStatus.Completed ? "done" : ""))">
                    <div class="roadmap-content">
                        <h4>Gây quỹ</h4>
                        <p>
                            @switch (currentStatus)
                            {
                                case InvestDapp.Shared.Enums.CampaignStatus.Active:
                                    <text>Đang diễn ra</text>
                                    break;
                                case InvestDapp.Shared.Enums.CampaignStatus.Completed:
                                    <text>Đã hoàn thành</text>
                                    break;
                                case InvestDapp.Shared.Enums.CampaignStatus.Draft:
                                case InvestDapp.Shared.Enums.CampaignStatus.PendingPost:
                                case InvestDapp.Shared.Enums.CampaignStatus.PendingApproval:
                                    <text>Chưa bắt đầu</text>
                                    break;
                                default:
                                    if (isApproved)
                                    {
                                        <text>Sắp bắt đầu</text>
                                    }
                                    else
                                    {
                                        <text>Chưa bắt đầu</text>
                                    }
                                    break;
                            }
                        </p>
                    </div>
                </div>

                <div class="roadmap-item @(currentStatus == InvestDapp.Shared.Enums.CampaignStatus.Completed ? "done" : "")">
                    <div class="roadmap-content">
                        <h4>Hoàn thành dự án</h4>
                        <p>
                            @switch (currentStatus)
                            {
                                case InvestDapp.Shared.Enums.CampaignStatus.Completed:
                                    <text>Đã hoàn thành</text>
                                    break;
                                case InvestDapp.Shared.Enums.CampaignStatus.Failed:
                                    <text>Thất bại</text>
                                    break;
                                default:
                                    <text>Mục tiêu cuối cùng</text>
                                    break;
                            }
                        </p>
                    </div>
                </div>
            </div>
        </section>

        @if (Model.Posts?.Any() == true)
        {
            <section class="info-section" id="recent-posts">
                <h2><i class="fa-solid fa-newspaper"></i> Bài viết gần đây</h2>
                <div style="display: grid; gap: 1rem;">
                    @foreach (var post in Model.Posts.OrderByDescending(p => p.CreatedAt).Take(3))
                    {
                        <div style="background: var(--bg-light); padding: 1.5rem; border-radius: 12px; border: 1px solid var(--secondary);">
                            <h4 style="color: var(--primary); margin-bottom: 0.5rem;">
                                <a href="@Url.Action("PostDetails", new { id = post.Id })" style="text-decoration: none; color: inherit;">
                                    @post.Title
                                </a>
                            </h4>
                            <p style="color: var(--text-muted); font-size: 0.9rem; margin-bottom: 0.8rem;">
                                @post.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                            </p>
                            <p style="color: var(--text-color); line-height: 1.6;">
                                @if (post.Content.Length > 150)
                                {
                                    @(post.Content.Substring(0, 150) + "...")
                                }
                                else
                                {
                                    @post.Content
                                }
                            </p>
                        </div>
                    }
                </div>
                <div style="text-align: center; margin-top: 2rem;">
                    <a href="@Url.Action("Posts", new { campaignId = Model.Id })" class="btn btn-primary" style="width: auto; padding: 1rem 2rem;">
                        Xem tất cả bài viết
                    </a>
                </div>
            </section>
        }

        @if (Model.Status == InvestDapp.Shared.Enums.CampaignStatus.Voting && Model.WithdrawalRequests?.Any() == true)
        {
            <section class="info-section" id="withdrawal-requests">
                <h2><i class="fa-solid fa-vote-yea"></i> Yêu cầu rút vốn đang bỏ phiếu</h2>
                <div style="display: grid; gap: 1rem;">
                    @foreach (var request in Model.WithdrawalRequests.Where(r => r.Status == InvestDapp.Shared.Enums.WithdrawalStatus.Pending).OrderByDescending(r => r.CreatedAt).Take(3))
                    {
                        <div class="withdrawal-request-card" style="background: var(--bg-light); padding: 1.5rem; border-radius: 12px; border: 1px solid var(--secondary);">
                            <div class="request-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                                <h4 style="color: var(--primary); margin: 0;">
                                    <i class="fas fa-money-bill-wave"></i> Yêu cầu rút vốn #@request.Id
                                </h4>
                                <span class="status-badge status-voting">
                                    <i class="fas fa-vote-yea"></i> Đang bỏ phiếu
                                </span>
                            </div>
                            
                            <div class="request-details" style="margin-bottom: 1rem;">
                                <p style="color: var(--text-color); margin-bottom: 0.5rem;">
                                    <strong>Số tiền:</strong> @request.Amount.ToString("F2") BNB
                                </p>
                                <p style="color: var(--text-color); margin-bottom: 0.5rem;">
                                    <strong>Lý do:</strong> @request.Reason.Substring(0, Math.Min(request.Reason.Length, 100))@(request.Reason.Length > 100 ? "..." : "")
                                </p>
                                <p style="color: var(--text-muted); font-size: 0.9rem; margin-bottom: 1rem;">
                                    <strong>Người yêu cầu:</strong> @request.RequesterAddress.Substring(0, 6)...@request.RequesterAddress.Substring(request.RequesterAddress.Length - 4)
                                </p>
                            </div>

                            <div class="voting-progress" style="margin-bottom: 1rem;">
                                @{
                                    var totalVotes = (double)(request.AgreeVotes + request.DisagreeVotes);
                                    var agreePercentage = totalVotes > 0 ? (double)request.AgreeVotes / totalVotes * 100 : 0;
                                    var disagreePercentage = totalVotes > 0 ? (double)request.DisagreeVotes / totalVotes * 100 : 0;
                                }
                                
                                <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
                                    <span style="color: var(--success);">
                                        <i class="fas fa-thumbs-up"></i> Ủng hộ: @agreePercentage.ToString("F1")%
                                    </span>
                                    <span style="color: var(--danger);">
                                        <i class="fas fa-thumbs-down"></i> Phản đối: @disagreePercentage.ToString("F1")%
                                    </span>
                                </div>
                                
                                <div class="vote-progress-bar" style="height: 8px; background: var(--secondary); border-radius: 4px; overflow: hidden;">
                                    <div style="height: 100%; width: @agreePercentage%; background: var(--success); float: left;"></div>
                                    <div style="height: 100%; width: @disagreePercentage%; background: var(--danger); float: left;"></div>
                                </div>
                            </div>

                            <div class="vote-deadline" style="margin-bottom: 1rem;">
                                <p style="color: var(--warning); font-size: 0.9rem;">
                                    <i class="fas fa-clock"></i> 
                                    Hết hạn bỏ phiếu: @request.VoteEndTime.ToString("dd/MM/yyyy HH:mm")
                                </p>
                            </div>

                            @{
                                var currentUserWallet = User.FindFirst("WalletAddress")?.Value;
                                var isInvestor = Model.Investments?.Any(i => i.InvestorAddress.Equals(currentUserWallet, StringComparison.OrdinalIgnoreCase)) ?? false;
                                var hasVoted = request.Votes?.Any(v => v.VoterAddress.Equals(currentUserWallet, StringComparison.OrdinalIgnoreCase)) ?? false;
                                var votersCount = request.Votes?.Count ?? 0;
                            }

                            <div class="vote-actions" style="display: flex; gap: 1rem;">
                                @if (isInvestor && !hasVoted && DateTime.UtcNow < request.VoteEndTime)
                                {
                                    <button class="btn btn-success" onclick="voteOnWithdrawal(@request.Id, true)" style="flex: 1; padding: 0.8rem;">
                                        <i class="fas fa-thumbs-up"></i> Ủng hộ
                                    </button>
                                    <button class="btn btn-danger" onclick="voteOnWithdrawal(@request.Id, false)" style="flex: 1; padding: 0.8rem;">
                                        <i class="fas fa-thumbs-down"></i> Phản đối
                                    </button>
                                }
                                else if (hasVoted)
                                {
                                    <div style="text-align: center; width: 100%; padding: 0.8rem; background: rgba(0, 170, 255, 0.1); border-radius: 8px; color: var(--primary);">
                                        <i class="fas fa-check-circle"></i> Bạn đã bỏ phiếu
                                    </div>
                                }
                                else if (DateTime.UtcNow >= request.VoteEndTime)
                                {
                                    <div style="text-align: center; width: 100%; padding: 0.8rem; background: rgba(255, 107, 107, 0.1); border-radius: 8px; color: var(--danger);">
                                        <i class="fas fa-times-circle"></i> Đã hết hạn bỏ phiếu
                                    </div>
                                }
                                else
                                {
                                    <div style="text-align: center; width: 100%; padding: 0.8rem; background: rgba(255, 184, 0, 0.1); border-radius: 8px; color: var(--warning);">
                                        <i class="fas fa-lock"></i> Chỉ nhà đầu tư mới có thể bỏ phiếu
                                    </div>
                                }
                            </div>

                            @if (votersCount > 0)
                            {
                                <div style="margin-top: 1rem; text-align: center;">
                                    <small style="color: var(--text-muted);">
                                        <i class="fas fa-users"></i> @votersCount người đã bỏ phiếu
                                    </small>
                                </div>
                            }
                        </div>
                    }
                </div>
                
                @if (Model.WithdrawalRequests.Count() > 3)
                {
                    <div style="text-align: center; margin-top: 2rem;">
                        <a href="@Url.Action("WithdrawalRequests", new { id = Model.Id })" class="btn btn-primary" style="width: auto; padding: 1rem 2rem;">
                            <i class="fas fa-list"></i> Xem tất cả yêu cầu rút vốn (@Model.WithdrawalRequests.Count())
                        </a>
                    </div>
                }
                else if (Model.WithdrawalRequests?.Any() == true)
                {
                    <div style="text-align: center; margin-top: 2rem;">
                        <a href="@Url.Action("WithdrawalRequests", new { id = Model.Id })" class="btn btn-primary" style="width: auto; padding: 1rem 2rem;">
                            <i class="fas fa-eye"></i> Xem chi tiết đầy đủ
                        </a>
                    </div>
                }
            </section>
        }
    </main>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            
            // --- COUNTDOWN TIMER ---
            const countdownElement = document.getElementById('countdown');
            const campaignEndDate = new Date('@Model.EndTime.ToString("yyyy-MM-ddTHH:mm:ss")Z').getTime();

            const updateCountdown = () => {
                const now = new Date().getTime();
                const distance = campaignEndDate - now;

                if (distance < 0) {
                    clearInterval(countdownInterval);
                    countdownElement.textContent = "ĐÃ KẾT THÚC";
                    return;
                }

                const days = Math.floor(distance / (1000 * 60 * 60 * 24));
                const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((distance % (1000 * 60)) / 1000);
                
                const format = (num) => num.toString().padStart(2, '0');
                countdownElement.textContent = `${format(days)}d ${format(hours)}h ${format(minutes)}m ${format(seconds)}s`;
            };
            updateCountdown();
            const countdownInterval = setInterval(updateCountdown, 1000);

            // --- INVESTMENT CALCULATOR ---
            const investmentAmountInput = document.getElementById('investment-amount');
            const ownershipPercentageElement = document.getElementById('ownership-percentage');
            const goalAmount = @Model.GoalAmount;

            const updateOwnershipValue = () => {
                const amount = parseFloat(investmentAmountInput.value);
                if (isNaN(amount) || amount <= 0 || goalAmount <= 0) {
                    ownershipPercentageElement.textContent = '0';
                    return;
                }
                const ownership = (amount / goalAmount) * 100;
                ownershipPercentageElement.textContent = ownership.toFixed(2);
            };
            
            investmentAmountInput.addEventListener('input', updateOwnershipValue);
            updateOwnershipValue(); // Initial calculation
        });

        function investInCampaign(campaignId) {
            const amount = document.getElementById('investment-amount').value;
            if (!amount || parseFloat(amount) <= 0) {
                alert('Vui lòng nhập số tiền đầu tư hợp lệ!');
                return;
            }
            // Placeholder for investment functionality
            alert(`Đầu tư ${amount} BNB vào dự án. Tính năng này sẽ được phát triển trong tương lai!`);
        }

        function voteOnCampaign(campaignId) {
            // Hiển thị modal hoặc chuyển hướng đến trang bỏ phiếu
            if (confirm('Bạn có muốn tham gia bỏ phiếu cho dự án này không?')) {
                // Chuyển hướng đến trang voting hoặc mở modal
                window.location.href = `/Campaigns/Vote/${campaignId}`;
                // Hoặc có thể mở modal voting ngay tại đây
                // showVotingModal(campaignId);
            }
        }

        function claimRefund(campaignId) {
            if (confirm('Bạn có chắc chắn muốn claim lại tiền đầu tư không? Hành động này không thể hoàn tác.')) {
                // Gọi smart contract để claim refund
                claimRefundFromContract(campaignId);
            }
        }

        function voteOnWithdrawal(requestId, agree) {
            const actionText = agree ? 'ủng hộ' : 'phản đối';
            if (confirm(`Bạn có chắc chắn muốn ${actionText} yêu cầu rút vốn này không? Hành động này không thể hoàn tác.`)) {
                voteOnWithdrawalRequest(requestId, agree);
            }
        }

        async function voteOnWithdrawalRequest(requestId, agree) {
            try {
                // Kiểm tra xem có MetaMask không
                if (typeof window.ethereum === 'undefined') {
                    alert('Vui lòng cài đặt MetaMask để thực hiện giao dịch!');
                    return;
                }

                // Hiển thị loading state
                const voteButtons = document.querySelectorAll(`[onclick*="voteOnWithdrawal(${requestId}"]`);
                voteButtons.forEach(btn => {
                    btn.disabled = true;
                    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang xử lý...';
                });

                // Placeholder cho việc gọi smart contract
                // Ở đây sẽ tích hợp với Web3.js hoặc Ethers.js để call contract function
                await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate transaction
                
                const actionText = agree ? 'ủng hộ' : 'phản đối';
                alert(`Bỏ phiếu ${actionText} thành công! Giao dịch đã được ghi nhận trên blockchain.`);
                
                // Reload trang để cập nhật trạng thái
                window.location.reload();
                
            } catch (error) {
                console.error('Lỗi khi bỏ phiếu:', error);
                alert('Có lỗi xảy ra khi bỏ phiếu. Vui lòng thử lại!');
                
                // Reset buttons
                const voteButtons = document.querySelectorAll(`[onclick*="voteOnWithdrawal(${requestId}"]`);
                voteButtons.forEach(btn => {
                    btn.disabled = false;
                });
                // Restore original text - will need to be more specific in real implementation
                window.location.reload();
            }
        }
    </script>
}