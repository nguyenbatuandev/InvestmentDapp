@model InvestDapp.Models.Campaign
@{
    ViewData["Title"] = "Dashboard - " + Model.Name;
    Layout = "~/Pages/_Layout.cshtml";
}

@section Styles {
    <style>
        /* --- BIẾN MÀU SẮC VÀ THIẾT LẬP CƠ BẢN --- */
        :root {
            --bg-dark: #0a0e1a;
            --bg-light: #12182b;
            --primary: #00aaff;
            --primary-light: #00c6ff;
            --secondary: #272c44;
            --text-color: #e0e0e0;
            --text-muted: #8a93b3;
            --success: #00e676;
            --warning: #ffb800;
            --danger: #ff6b6b;
            --gradient: linear-gradient(90deg, var(--primary), var(--primary-light));
            --font-body: 'Poppins', sans-serif;
            --font-data: 'Fira Code', monospace;
        }

        /* --- THIẾT LẬP CHUNG --- */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: var(--font-body);
            background-color: var(--bg-dark);
            color: var(--text-color);
            line-height: 1.6;
            overflow-x: hidden;
        }

        /* --- BỐ CỤC DASHBOARD CHÍNH --- */
        .dashboard-container {
            display: grid;
            grid-template-columns: 350px 1fr;
            min-height: 100vh;
            margin-top: 80px;
        }

        /* --- ACTION PANEL (BÊN TRÁI) --- */
        .action-panel {
            background-color: var(--bg-dark);
            border-right: 1px solid var(--secondary);
            padding: 2rem;
            display: flex;
            flex-direction: column;
        }

        .panel-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 2.5rem;
        }

        .panel-header .logo {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--gradient);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }

        .panel-header h2 {
            font-size: 1.5rem;
            font-weight: 600;
        }

        .investment-module {
            background-color: var(--bg-light);
            border-radius: 16px;
            border: 1px solid var(--secondary);
            padding: 2rem;
        }

        .investment-module h3 {
            font-size: 1.1rem;
            font-weight: 500;
            margin-bottom: 1.5rem;
            color: var(--primary);
        }

        /* Vote info styling */
        .vote-info, .refund-info, .completed-info, .project-status-info {
            background: rgba(0,0,0,0.2);
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1.5rem;
            text-align: center;
        }

        .vote-info p, .refund-info p, .completed-info p, .project-status-info p {
            margin-bottom: 0.5rem;
            color: var(--text-muted);
            font-size: 0.9rem;
        }

        .voting-stats, .refund-stats, .profit-stats {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .vote-stat, .refund-stat, .profit-stat {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.8rem;
            background: rgba(0,0,0,0.1);
            border-radius: 6px;
        }

        .vote-label, .refund-label, .profit-label {
            font-size: 0.9rem;
            color: var(--text-muted);
        }

        .vote-value, .refund-value, .profit-value {
            font-family: var(--font-data);
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--primary);
        }

        .refund-value {
            color: var(--success);
        }

        .profit-value {
            color: #ffd700;
        }

        /* Warning styling */
        .vote-info p[style*="warning"], .refund-info p[style*="warning"] {
            background: rgba(255, 184, 0, 0.1);
            padding: 0.8rem;
            border-radius: 6px;
            border-left: 4px solid var(--warning);
            margin: 1rem 0;
        }

        .form-group { 
            margin-bottom: 1.5rem; 
        }

        .form-group label {
            font-size: 0.9rem;
            color: var(--text-muted);
            margin-bottom: 0.5rem;
            display: block;
        }

        .input-wrapper {
            display: flex;
            align-items: center;
            background-color: var(--bg-dark);
            border: 1px solid var(--secondary);
            border-radius: 8px;
            padding: 0 0.8rem;
        }

        .input-wrapper:focus-within {
            box-shadow: 0 0 0 2px var(--primary);
        }

        .input-wrapper span {
            color: var(--text-muted);
            font-size: 1.2rem;
        }

        .input-wrapper input {
            background: transparent;
            border: none;
            outline: none;
            color: var(--text-color);
            font-family: var(--font-data);
            font-size: 1.5rem;
            padding: 0.8rem 0.5rem;
            width: 100%;
        }

        .output-group {
            background: rgba(0,0,0,0.2);
            border-radius: 8px;
            padding: 1rem;
            text-align: center;
            margin-bottom: 1.5rem;
        }

        .output-group p {
            font-size: 0.9rem;
            color: var(--text-muted);
        }

        .token-display {
            font-family: var(--font-data);
            font-size: 2.5rem;
            font-weight: 600;
            color: var(--primary);
        }

        .token-symbol {
            font-size: 1rem;
            font-weight: 400;
            color: var(--primary-light);
        }

        .min-max-info {
            display: flex;
            justify-content: space-between;
            font-size: 0.8rem;
            color: var(--text-muted);
            margin-bottom: 2rem;
        }

        .btn.btn-primary {
            width: 100%;
            padding: 1rem;
            font-size: 1rem;
            font-weight: 600;
            background: var(--gradient);
            border: none;
            border-radius: 8px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 170, 255, 0.2);
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn.btn-primary:hover:not(:disabled) {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 170, 255, 0.4);
        }

        .btn.btn-primary:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .btn.btn-success {
            background: linear-gradient(135deg, var(--success), #10b981);
            color: white;
            border: none;
        }

        .btn.btn-success:hover:not(:disabled) {
            background: linear-gradient(135deg, #10b981, var(--success));
            transform: translateY(-2px);
        }

        .btn.btn-danger {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
            border: none;
        }

        .btn.btn-danger:hover:not(:disabled) {
            background: linear-gradient(135deg, #dc2626, #ef4444);
            transform: translateY(-2px);
        }

        /* Voting Interface Styles */
        .voting-section {
            margin-top: 1rem;
        }

        .withdrawal-requests {
            background: var(--bg-secondary);
            border-radius: 10px;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .withdrawal-request {
            background: var(--bg-dark);
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
            border-left: 4px solid var(--primary);
        }

        .request-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .request-amount {
            font-size: 1.2rem;
            font-weight: bold;
            color: var(--primary);
        }

        .request-status {
            padding: 0.25rem 0.5rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .status-pending {
            background: var(--warning);
            color: var(--bg-dark);
        }

        .status-approved {
            background: var(--success);
            color: white;
        }

        .status-rejected {
            background: var(--danger);
            color: white;
        }

        .vote-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin: 1rem 0;
        }

        .vote-stat {
            text-align: center;
            padding: 0.5rem;
            background: var(--bg-secondary);
            border-radius: 6px;
        }

        .vote-buttons {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }

        .vote-buttons .btn {
            flex: 1;
        }

        /* Profit Interface Styles */
        .profit-list {
            background: var(--bg-secondary);
            border-radius: 10px;
            padding: 1rem;
        }

        .profit-item {
            background: var(--bg-dark);
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
            border-left: 4px solid var(--success);
        }

        .profit-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .profit-amount {
            font-size: 1.2rem;
            font-weight: bold;
            color: var(--success);
        }

        .profit-status {
            padding: 0.25rem 0.5rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .status-claimable {
            background: var(--success);
            color: white;
        }

        .status-claimed {
            background: var(--text-muted);
            color: white;
        }

        .status-message {
            text-align: center;
            padding: 2rem;
            background: var(--bg-secondary);
            border-radius: 10px;
            margin-top: 1rem;
        }

        .status-message h3 {
            color: var(--primary);
            margin-bottom: 1rem;
        }

        .panel-footer {
            margin-top: auto;
            display: flex;
            justify-content: space-around;
        }

        .panel-footer a {
            color: var(--text-muted);
            text-decoration: none;
            font-size: 0.9rem;
            transition: color 0.3s;
        }

        .panel-footer a:hover { 
            color: var(--primary); 
        }

        /* --- INFO PANEL (BÊN PHẢI) --- */
        .info-panel {
            padding: 2rem 3rem;
            overflow-y: auto;
            height: 100vh;
        }

        /* DASHBOARD HEADER */
        .dashboard-header {
            background: linear-gradient(145deg, var(--bg-light) 0%, rgba(10, 14, 26, 0.5) 100%);
            border: 1px solid var(--secondary);
            border-radius: 16px;
            padding: 2rem;
            margin-bottom: 3rem;
            position: relative;
            box-shadow: 0 0 25px rgba(0, 170, 255, 0.05);
            display: grid;
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }

        .dashboard-header .header-main-content h1 {
            font-size: 1.8rem;
            font-weight: 600;
            color: #fff;
        }

        .dashboard-header .project-tagline {
            font-size: 1rem;
            color: var(--text-muted);
        }

        .dashboard-header .social-links {
            position: absolute;
            top: 2rem;
            right: 2rem;
        }

        .dashboard-header .social-links a {
            color: var(--text-muted);
            font-size: 1.2rem;
            margin-left: 1.5rem;
            transition: color 0.3s;
            text-decoration: none;
        }

        .dashboard-header .social-links a:hover {
            color: var(--primary);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
        }

        .stat-item {
            background: transparent;
            padding: 1rem;
            border-radius: 12px;
            border: 1px solid var(--secondary);
            transition: background-color 0.3s, border-color 0.3s;
        }

        .stat-item:hover {
            background-color: rgba(39, 44, 68, 0.3);
            border-color: var(--primary);
        }

        .stat-item .stat-label {
            font-size: 0.9rem;
            color: var(--text-muted);
            margin-bottom: 0.5rem;
        }

        .stat-item .stat-value {
            font-family: var(--font-data);
            font-size: 1.75rem;
            font-weight: 500;
            color: var(--text-color);
        }

        .stat-item .progress-bar-container {
            width: 100%;
            background-color: var(--secondary);
            border-radius: 30px;
            height: 8px;
            margin-top: 1rem;
        }

        .stat-item .progress-bar-fill {
            background: var(--gradient);
            height: 100%;
            border-radius: 30px;
            transition: width 0.8s ease;
        }

        .info-section { 
            margin-bottom: 4rem; 
        }

        .info-section h2 {
            font-size: 1.5rem;
            font-weight: 500;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--secondary);
        }

        .info-section h2 i {
            margin-right: 1rem;
            color: var(--primary);
        }

        /* --- ROADMAP --- */
        .roadmap-timeline {
            position: relative;
        }

        .roadmap-timeline::before {
            content: '';
            position: absolute;
            top: 10px;
            bottom: 10px;
            left: 11px;
            width: 2px;
            background-color: var(--secondary);
            border-radius: 2px;
        }

        .roadmap-item {
            position: relative;
            padding-left: 45px;
            margin-bottom: 2rem;
        }

        .roadmap-item:last-child {
            margin-bottom: 0;
        }

        .roadmap-item::before {
            content: '';
            position: absolute;
            top: 4px;
            left: 11px;
            transform: translateX(-50%);
            width: 22px;
            height: 22px;
            border-radius: 50%;
            background-color: var(--bg-dark);
            border: 2px solid var(--secondary);
            transition: border-color 0.3s ease;
        }

        .roadmap-item.done::before {
            border-color: var(--primary);
            background-color: var(--primary);
        }

        .roadmap-item.current::before {
            border-color: var(--success);
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(0, 230, 118, 0.5);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(0, 230, 118, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(0, 230, 118, 0);
            }
        }

        .roadmap-content h4 {
            font-size: 1.1rem;
            color: var(--text-color);
        }

        .roadmap-content p {
            font-size: 0.9rem;
            color: var(--text-muted);
        }

        /* --- TEAM --- */
        .team-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 2rem;
            text-align: center;
        }

        .hexagon {
            position: relative;
            width: 120px;
            height: 138.56px;
            background-color: var(--secondary);
            margin: 0 auto 1rem;
            clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
        }

        .hexagon img {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 95%;
            height: 95%;
            object-fit: cover;
            clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
        }

        .team-member h4 { 
            font-size: 1.1rem; 
        }

        .team-member p { 
            font-size: 0.9rem; 
            color: var(--text-muted); 
        }

        /* --- TRANSACTION FEED --- */
        .transaction-feed {
            background-color: var(--bg-light);
            border: 1px solid var(--secondary);
            border-radius: 12px;
            padding: 1rem;
            height: 300px;
            overflow-y: auto;
        }

        .transaction-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.8rem 1rem;
            border-radius: 8px;
            animation: fadeIn 0.5s ease;
        }

        @@keyframes fadeIn { 
            from { 
                opacity: 0; 
                transform: translateY(-10px); 
            } 
            to { 
                opacity: 1; 
                transform: translateY(0); 
            } 
        }

        .transaction-item:nth-child(odd) { 
            background-color: rgba(0,0,0,0.1); 
        }

        .tx-from { 
            font-family: var(--font-data); 
            font-size: 0.9rem; 
            color: var(--text-muted); 
        }

        .tx-amount { 
            font-family: var(--font-data); 
            font-size: 1rem; 
            font-weight: 500; 
            color: var(--success); 
        }

        .tx-time { 
            font-family: var(--font-data); 
            font-size: 0.8rem; 
            color: var(--text-muted); 
        }

        /* Status badges */
        .status-badge {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            border-radius: 25px;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .status-pending {
            background: rgba(255, 184, 0, 0.2);
            color: #ffb800;
            border: 1px solid rgba(255, 184, 0, 0.3);
        }

        .status-active {
            background: rgba(0, 212, 170, 0.2);
            color: #00d4aa;
            border: 1px solid rgba(0, 212, 170, 0.3);
        }

        .status-voting {
            background: rgba(0, 170, 255, 0.2);
            color: #00aaff;
            border: 1px solid rgba(0, 170, 255, 0.3);
        }

        .status-completed {
            background: rgba(0, 230, 118, 0.2);
            color: #00e676;
            border: 1px solid rgba(0, 230, 118, 0.3);
        }

        .status-failed {
            background: rgba(255, 107, 107, 0.2);
            color: #ff6b6b;
            border: 1px solid rgba(255, 107, 107, 0.3);
        }

        /* --- WITHDRAWAL REQUEST STYLES --- */
        .withdrawal-request-card {
            transition: all 0.3s ease;
        }

        .withdrawal-request-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 170, 255, 0.1);
        }

        .vote-progress-bar {
            position: relative;
            overflow: hidden;
        }

        .btn.btn-success {
            background: linear-gradient(135deg, #28a745, #20c997);
            border: none;
            color: white;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn.btn-success:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        }

        .btn.btn-danger {
            background: linear-gradient(135deg, #dc3545, #e74c3c);
            border: none;
            color: white;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn.btn-danger:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
        }

        /* --- NOTIFICATION SYSTEM --- */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 10000;
            max-width: 400px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            animation: slideInRight 0.3s ease;
        }

        .notification.success {
            background: linear-gradient(135deg, #28a745, #20c997);
        }

        .notification.error {
            background: linear-gradient(135deg, #dc3545, #e74c3c);
        }

        @@keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* --- RESPONSIVE DESIGN --- */
        @@media (max-width: 1200px) {
            .dashboard-container { 
                grid-template-columns: 300px 1fr; 
            }
        }

        @@media (max-width: 992px) {
            .dashboard-container { 
                grid-template-columns: 1fr; 
            }
            .action-panel {
                border-right: none;
                border-bottom: 1px solid var(--secondary);
                height: auto;
            }
            .info-panel { 
                height: auto; 
            }
        }

        @@media (max-width: 576px) {
            .info-panel { 
                padding: 1.5rem; 
            }
            .dashboard-header { 
                padding: 1.5rem;
            }
        }
    </style>
}

<div class="dashboard-container">
    <aside class="action-panel">
        <div class="panel-header">
            <div class="logo">@Model.Name.Substring(0, 1).ToUpper()</div>
            <h2>@Model.Name</h2>
        </div>

        <div class="investment-module">
            @if (Model.Status == InvestDapp.Shared.Enums.CampaignStatus.Active && 
                 Model.ApprovalStatus == InvestDapp.Shared.Enums.ApprovalStatus.Approved)
            {
                <!-- Investment Interface for Active Campaigns -->
                <h3><i class="fa-solid fa-rocket"></i> Bảng điều khiển đầu tư</h3>
                <div class="form-group">
                    <label for="investment-amount">Số tiền đầu tư (BNB)</label>
                    <div class="input-wrapper">
                        <span>₿</span>
                        <input type="number" id="investment-amount" placeholder="1" min="0.01" step="0.01">
                    </div>
                </div>

                <div class="output-group">
                    <p>Phần sở hữu dự kiến</p>
                    <div class="token-display">
                        <span id="ownership-percentage">0</span>
                        <span class="token-symbol">%</span>
                    </div>
                </div>

                <div class="min-max-info">
                    <span>Tối thiểu: 0.01 BNB</span>
                    <span>Tối đa: @(Model.GoalAmount - Model.CurrentRaisedAmount) BNB</span>
                </div>

                <button class="btn btn-primary" onclick="investInCampaign(@Model.Id)" id="invest-btn">
                    <i class="fas fa-rocket"></i> Đầu tư ngay
                </button>
            }
            else if (Model.Status == InvestDapp.Shared.Enums.CampaignStatus.Voting)
            {
                <!-- Voting Interface for Voting Status -->
                <h3><i class="fa-solid fa-vote-yea"></i> Bỏ phiếu rút tiền</h3>
                <div class="voting-section">
                    <div class="withdrawal-requests" id="withdrawal-requests">
                        <p>Đang tải danh sách yêu cầu rút tiền...</p>
                    </div>
                </div>
            }
            else if (Model.Status == InvestDapp.Shared.Enums.CampaignStatus.Completed)
            {
                <!-- Completed Campaign Interface -->
                <div id="completed-interface">
                    <!-- Owner Interface: Add Profit -->
                    <div id="owner-section" style="display: none;">
                        <h3><i class="fa-solid fa-plus-circle"></i> Thêm lợi nhuận</h3>
                        <div class="form-group">
                            <label for="profit-amount">Số tiền lợi nhuận (BNB)</label>
                            <div class="input-wrapper">
                                <span>₿</span>
                                <input type="number" id="profit-amount" placeholder="0.1" min="0.01" step="0.01">
                            </div>
                        </div>
                        <button class="btn btn-success" onclick="addProfit(@Model.Id)" id="add-profit-btn">
                            <i class="fas fa-plus"></i> Thêm lợi nhuận
                        </button>
                    </div>

                    <!-- Investor Interface: Claim Profit -->
                    <div id="investor-section">
                        <h3><i class="fa-solid fa-money-bill-wave"></i> Nhận lợi nhuận</h3>
                        <div class="profit-list" id="profit-list">
                            <p>Đang tải danh sách lợi nhuận...</p>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="status-message">
                    <h3><i class="fa-solid fa-info-circle"></i> Trạng thái chiến dịch</h3>
                    <p>Chiến dịch đang ở trạng thái: <strong>@Model.Status</strong></p>
                    @if (Model.Status == InvestDapp.Shared.Enums.CampaignStatus.Draft)
                    {
                        <p>Chiến dịch đang được soạn thảo.</p>
                    }
                    else if (Model.Status == InvestDapp.Shared.Enums.CampaignStatus.PendingApproval)
                    {
                        <p>Chiến dịch đang chờ phê duyệt.</p>
                    }
                    else if (Model.Status == InvestDapp.Shared.Enums.CampaignStatus.Failed)
                    {
                        <p>Chiến dịch đã thất bại.</p>
                    }
                </div>
            }
        </div>

        <div class="panel-footer">
            <a href="@Url.Action("Details", new { id = Model.Id })">Chi tiết</a>
            <a href="@Url.Action("Posts", new { campaignId = Model.Id })">Bài viết</a>
            @if (Model.WithdrawalRequests?.Any() == true)
            {
                <a href="@Url.Action("WithdrawalRequests", new { id = Model.Id })">Rút vốn</a>
            }
            <a href="@Url.Action("Index")">Tất cả dự án</a>
        </div>
    </aside>

    <main class="info-panel">
        <header class="dashboard-header">
            <div class="header-main-content">
                <h1>Dashboard Chiến Dịch</h1>
                <p class="project-tagline">@Model.ShortDescription</p>
            </div>
            <div class="social-links">
                <a href="#"><i class="fab fa-telegram"></i></a>
                <a href="#"><i class="fab fa-twitter"></i></a>
                <a href="#"><i class="fas fa-globe"></i></a>
            </div>
            <div class="stats-grid">
                <div class="stat-item">
                    <p class="stat-label">Tổng huy động</p>
                    <p class="stat-value">@Model.CurrentRaisedAmount.ToString("F2") BNB</p>
                    <div class="progress-bar-container">
                        <div class="progress-bar-fill" style="width: @(Model.GoalAmount > 0 ? (Model.CurrentRaisedAmount / Model.GoalAmount * 100) : 0)%;"></div>
                    </div>
                </div>
                <div class="stat-item">
                    <p class="stat-label">Nhà đầu tư</p>
                    <p class="stat-value">@Model.InvestorCount</p>
                </div>
                <div class="stat-item">
                    <p class="stat-label">Thời gian còn lại</p>
                    <p id="countdown" class="stat-value">--:--:--:--</p>
                </div>
                <div class="stat-item">
                    <p class="stat-label">Trạng thái</p>
                    <div class="stat-value">
                        @{
                            string statusClass = "";
                            string statusText = "";
                            string statusIcon = "";
                            
                            if (Model.ApprovalStatus != InvestDapp.Shared.Enums.ApprovalStatus.Approved)
                            {
                                switch (Model.ApprovalStatus)
                                {
                                    case InvestDapp.Shared.Enums.ApprovalStatus.Pending:
                                        statusClass = "status-pending";
                                        statusText = "Chờ duyệt";
                                        statusIcon = "fa-clock";
                                        break;
                                    case InvestDapp.Shared.Enums.ApprovalStatus.Rejected:
                                        statusClass = "status-failed";
                                        statusText = "Bị từ chối";
                                        statusIcon = "fa-times-circle";
                                        break;
                                }
                            }
                            else
                            {
                                switch (Model.Status)
                                {
                                    case InvestDapp.Shared.Enums.CampaignStatus.Draft:
                                        statusClass = "status-pending";
                                        statusText = "Đang soạn thảo";
                                        statusIcon = "fa-edit";
                                        break;
                                    case InvestDapp.Shared.Enums.CampaignStatus.PendingPost:
                                        statusClass = "status-pending";
                                        statusText = "Chờ bài viết";
                                        statusIcon = "fa-pen";
                                        break;
                                    case InvestDapp.Shared.Enums.CampaignStatus.PendingApproval:
                                        statusClass = "status-pending";
                                        statusText = "Chờ phê duyệt";
                                        statusIcon = "fa-clock";
                                        break;
                                    case InvestDapp.Shared.Enums.CampaignStatus.Active:
                                        statusClass = "status-active";
                                        statusText = "Đang gây quỹ";
                                        statusIcon = "fa-play-circle";
                                        break;
                                    case InvestDapp.Shared.Enums.CampaignStatus.Voting:
                                        statusClass = "status-voting";
                                        statusText = "Đang bỏ phiếu";
                                        statusIcon = "fa-vote-yea";
                                        break;
                                    case InvestDapp.Shared.Enums.CampaignStatus.Completed:
                                        statusClass = "status-completed";
                                        statusText = "Hoàn thành";
                                        statusIcon = "fa-check-circle";
                                        break;
                                    case InvestDapp.Shared.Enums.CampaignStatus.Failed:
                                        statusClass = "status-failed";
                                        statusText = "Thất bại";
                                        statusIcon = "fa-times-circle";
                                        break;
                                }
                            }
                        }
                        <span class="status-badge @statusClass">
                            <i class="fas @statusIcon"></i> @statusText
                        </span>
                    </div>
                </div>
            </div>
        </header>

        <section class="info-section" id="roadmap">
            <h2><i class="fa-solid fa-map-signs"></i> Tiến độ dự án</h2>
            <div class="roadmap-timeline">
                <div class="roadmap-item done">
                    <div class="roadmap-content">
                        <h4>Tạo dự án</h4>
                        <p>@Model.CreatedAt.ToString("dd/MM/yyyy") - Đã hoàn thành</p>
                    </div>
                </div>
                
                @{
                    bool hasFirstPost = Model.Posts?.Any() == true;
                    bool isApproved = Model.ApprovalStatus == InvestDapp.Shared.Enums.ApprovalStatus.Approved;
                    var currentStatus = Model.Status;
                }

                <div class="roadmap-item @(hasFirstPost ? "done" : (currentStatus == InvestDapp.Shared.Enums.CampaignStatus.PendingPost || currentStatus == InvestDapp.Shared.Enums.CampaignStatus.Draft ? "current" : ""))">
                    <div class="roadmap-content">
                        <h4>Tạo bài viết đầu tiên</h4>
                        <p>@(hasFirstPost ? "Đã hoàn thành" : "Đang thực hiện")</p>
                    </div>
                </div>

                <div class="roadmap-item @(isApproved ? "done" : (hasFirstPost && currentStatus == InvestDapp.Shared.Enums.CampaignStatus.PendingApproval ? "current" : ""))">
                    <div class="roadmap-content">
                        <h4>Phê duyệt từ Admin</h4>
                        <p>@(isApproved ? "Đã hoàn thành" : (hasFirstPost ? "Đang chờ duyệt" : "Chưa bắt đầu"))</p>
                    </div>
                </div>

                <div class="roadmap-item @(currentStatus == InvestDapp.Shared.Enums.CampaignStatus.Active ? "current" : (currentStatus == InvestDapp.Shared.Enums.CampaignStatus.Completed ? "done" : ""))">
                    <div class="roadmap-content">
                        <h4>Gây quỹ</h4>
                        <p>
                            @switch (currentStatus)
                            {
                                case InvestDapp.Shared.Enums.CampaignStatus.Active:
                                    <text>Đang diễn ra</text>
                                    break;
                                case InvestDapp.Shared.Enums.CampaignStatus.Completed:
                                    <text>Đã hoàn thành</text>
                                    break;
                                case InvestDapp.Shared.Enums.CampaignStatus.Draft:
                                case InvestDapp.Shared.Enums.CampaignStatus.PendingPost:
                                case InvestDapp.Shared.Enums.CampaignStatus.PendingApproval:
                                    <text>Chưa bắt đầu</text>
                                    break;
                                default:
                                    if (isApproved)
                                    {
                                        <text>Sắp bắt đầu</text>
                                    }
                                    else
                                    {
                                        <text>Chưa bắt đầu</text>
                                    }
                                    break;
                            }
                        </p>
                    </div>
                </div>

                <div class="roadmap-item @(currentStatus == InvestDapp.Shared.Enums.CampaignStatus.Completed ? "done" : "")">
                    <div class="roadmap-content">
                        <h4>Hoàn thành dự án</h4>
                        <p>
                            @switch (currentStatus)
                            {
                                case InvestDapp.Shared.Enums.CampaignStatus.Completed:
                                    <text>Đã hoàn thành</text>
                                    break;
                                case InvestDapp.Shared.Enums.CampaignStatus.Failed:
                                    <text>Thất bại</text>
                                    break;
                                default:
                                    <text>Mục tiêu cuối cùng</text>
                                    break;
                            }
                        </p>
                    </div>
                </div>
            </div>
        </section>

        @if (Model.Posts?.Any() == true)
        {
            <section class="info-section" id="recent-posts">
                <h2><i class="fa-solid fa-newspaper"></i> Bài viết gần đây</h2>
                <div style="display: grid; gap: 1rem;">
                    @foreach (var post in Model.Posts.OrderByDescending(p => p.CreatedAt).Take(3))
                    {
                        <div style="background: var(--bg-light); padding: 1.5rem; border-radius: 12px; border: 1px solid var(--secondary);">
                            <h4 style="color: var(--primary); margin-bottom: 0.5rem;">
                                <a href="@Url.Action("PostDetails", new { id = post.Id })" style="text-decoration: none; color: inherit;">
                                    @post.Title
                                </a>
                            </h4>
                            <p style="color: var(--text-muted); font-size: 0.9rem; margin-bottom: 0.8rem;">
                                @post.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                            </p>
                            <p style="color: var(--text-color); line-height: 1.6;">
                                @if (post.Content.Length > 150)
                                {
                                    @(post.Content.Substring(0, 150) + "...")
                                }
                                else
                                {
                                    @post.Content
                                }
                            </p>
                        </div>
                    }
                </div>
                <div style="text-align: center; margin-top: 2rem;">
                    <a href="@Url.Action("Posts", new { campaignId = Model.Id })" class="btn btn-primary" style="width: auto; padding: 1rem 2rem;">
                        Xem tất cả bài viết
                    </a>
                </div>
            </section>
        }

        @if (Model.Status == InvestDapp.Shared.Enums.CampaignStatus.Voting && Model.WithdrawalRequests?.Any() == true)
        {
            <section class="info-section" id="withdrawal-requests">
                <h2><i class="fa-solid fa-vote-yea"></i> Yêu cầu rút vốn đang bỏ phiếu</h2>
                <div style="display: grid; gap: 1rem;">
                    @foreach (var request in Model.WithdrawalRequests.Where(r => r.Status == InvestDapp.Shared.Enums.WithdrawalStatus.Pending).OrderByDescending(r => r.CreatedAt).Take(3))
                    {
                        <div class="withdrawal-request-card" style="background: var(--bg-light); padding: 1.5rem; border-radius: 12px; border: 1px solid var(--secondary);">
                            <div class="request-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                                <h4 style="color: var(--primary); margin: 0;">
                                    <i class="fas fa-money-bill-wave"></i> Yêu cầu rút vốn #@request.Id
                                </h4>
                                <span class="status-badge status-voting">
                                    <i class="fas fa-vote-yea"></i> Đang bỏ phiếu
                                </span>
                            </div>
                            
                            <div class="request-details" style="margin-bottom: 1rem;">
                                <p style="color: var(--text-color); margin-bottom: 0.5rem;">
                                    <strong>Số tiền:</strong> @request.Amount.ToString("F2") BNB
                                </p>
                                <p style="color: var(--text-color); margin-bottom: 0.5rem;">
                                    <strong>Lý do:</strong> @request.Reason.Substring(0, Math.Min(request.Reason.Length, 100))@(request.Reason.Length > 100 ? "..." : "")
                                </p>
                                <p style="color: var(--text-muted); font-size: 0.9rem; margin-bottom: 1rem;">
                                    <strong>Người yêu cầu:</strong> @request.RequesterAddress.Substring(0, 6)...@request.RequesterAddress.Substring(request.RequesterAddress.Length - 4)
                                </p>
                            </div>

                            <div class="voting-progress" style="margin-bottom: 1rem;">
                                @{
                                    var totalVotes = (double)(request.AgreeVotes + request.DisagreeVotes);
                                    var agreePercentage = totalVotes > 0 ? (double)request.AgreeVotes / totalVotes * 100 : 0;
                                    var disagreePercentage = totalVotes > 0 ? (double)request.DisagreeVotes / totalVotes * 100 : 0;
                                }
                                
                                <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
                                    <span style="color: var(--success);">
                                        <i class="fas fa-thumbs-up"></i> Ủng hộ: @agreePercentage.ToString("F1")%
                                    </span>
                                    <span style="color: var(--danger);">
                                        <i class="fas fa-thumbs-down"></i> Phản đối: @disagreePercentage.ToString("F1")%
                                    </span>
                                </div>
                                
                                <div class="vote-progress-bar" style="height: 8px; background: var(--secondary); border-radius: 4px; overflow: hidden;">
                                    <div style="height: 100%; width: @agreePercentage%; background: var(--success); float: left;"></div>
                                    <div style="height: 100%; width: @disagreePercentage%; background: var(--danger); float: left;"></div>
                                </div>
                            </div>

                            <div class="vote-deadline" style="margin-bottom: 1rem;">
                                <p style="color: var(--warning); font-size: 0.9rem;">
                                    <i class="fas fa-clock"></i> 
                                    Hết hạn bỏ phiếu: @request.VoteEndTime.ToString("dd/MM/yyyy HH:mm")
                                </p>
                            </div>

                            @{
                                var currentUserWallet = User.FindFirst("WalletAddress")?.Value;
                                var isInvestor = Model.Investments?.Any(i => i.InvestorAddress.Equals(currentUserWallet, StringComparison.OrdinalIgnoreCase)) ?? false;
                                var hasVoted = request.Votes?.Any(v => v.VoterAddress.Equals(currentUserWallet, StringComparison.OrdinalIgnoreCase)) ?? false;
                                var votersCount = request.Votes?.Count ?? 0;
                            }

                            <div class="vote-actions" style="display: flex; gap: 1rem;">
                                @if (isInvestor && !hasVoted && DateTime.UtcNow < request.VoteEndTime)
                                {
                                    <button class="btn btn-success" onclick="voteOnWithdrawal(@request.Id, true)" style="flex: 1; padding: 0.8rem;">
                                        <i class="fas fa-thumbs-up"></i> Ủng hộ
                                    </button>
                                    <button class="btn btn-danger" onclick="voteOnWithdrawal(@request.Id, false)" style="flex: 1; padding: 0.8rem;">
                                        <i class="fas fa-thumbs-down"></i> Phản đối
                                    </button>
                                }
                                else if (hasVoted)
                                {
                                    <div style="text-align: center; width: 100%; padding: 0.8rem; background: rgba(0, 170, 255, 0.1); border-radius: 8px; color: var(--primary);">
                                        <i class="fas fa-check-circle"></i> Bạn đã bỏ phiếu
                                    </div>
                                }
                                else if (DateTime.UtcNow >= request.VoteEndTime)
                                {
                                    <div style="text-align: center; width: 100%; padding: 0.8rem; background: rgba(255, 107, 107, 0.1); border-radius: 8px; color: var(--danger);">
                                        <i class="fas fa-times-circle"></i> Đã hết hạn bỏ phiếu
                                    </div>
                                }
                                else
                                {
                                    <div style="text-align: center; width: 100%; padding: 0.8rem; background: rgba(255, 184, 0, 0.1); border-radius: 8px; color: var(--warning);">
                                        <i class="fas fa-lock"></i> Chỉ nhà đầu tư mới có thể bỏ phiếu
                                    </div>
                                }
                            </div>

                            @if (votersCount > 0)
                            {
                                <div style="margin-top: 1rem; text-align: center;">
                                    <small style="color: var(--text-muted);">
                                        <i class="fas fa-users"></i> @votersCount người đã bỏ phiếu
                                    </small>
                                </div>
                            }
                        </div>
                    }
                </div>
                
                @if (Model.WithdrawalRequests.Count() > 3)
                {
                    <div style="text-align: center; margin-top: 2rem;">
                        <a href="@Url.Action("WithdrawalRequests", new { id = Model.Id })" class="btn btn-primary" style="width: auto; padding: 1rem 2rem;">
                            <i class="fas fa-list"></i> Xem tất cả yêu cầu rút vốn (@Model.WithdrawalRequests.Count())
                        </a>
                    </div>
                }
                else if (Model.WithdrawalRequests?.Any() == true)
                {
                    <div style="text-align: center; margin-top: 2rem;">
                        <a href="@Url.Action("WithdrawalRequests", new { id = Model.Id })" class="btn btn-primary" style="width: auto; padding: 1rem 2rem;">
                            <i class="fas fa-eye"></i> Xem chi tiết đầy đủ
                        </a>
                    </div>
                }
            </section>
        }
    </main>
</div>

@section Scripts {
    <!-- Load Ethers.js v5 for compatibility -->
    <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
    <script>
        // Fallback loading for Ethers.js
        function ensureEthersLoaded() {
            return new Promise((resolve, reject) => {
                if (typeof ethers !== 'undefined') {
                    console.log('Ethers.js already loaded');
                    resolve();
                    return;
                }
                
                console.log('Loading Ethers.js fallback...');
                const fallbackScript = document.createElement('script');
                fallbackScript.src = 'https://unpkg.com/ethers@5.7.2/dist/ethers.umd.min.js';
                fallbackScript.onload = () => {
                    console.log('Ethers.js loaded via fallback');
                    resolve();
                };
                fallbackScript.onerror = () => {
                    console.error('Failed to load Ethers.js');
                    reject(new Error('Failed to load Ethers.js'));
                };
                document.head.appendChild(fallbackScript);
            });
        }
    </script>
    <script src="~/js/contract-config.js"></script>
    <script>
        // Global variables
        let web3;
        let contract;
        let userAccount;

        document.addEventListener('DOMContentLoaded', async () => {
            try {
                // Debug: Check if ethers is available
                console.log('DOMContentLoaded - checking ethers:', typeof ethers);
                
                // Ensure Ethers.js is loaded before proceeding
                await ensureEthersLoaded();
                
                // Debug: Verify ethers after ensuring loaded
                console.log('After ensureEthersLoaded - ethers:', typeof ethers);
                console.log('ethers.providers:', typeof ethers?.providers);
                console.log('ethers.providers.Web3Provider:', typeof ethers?.providers?.Web3Provider);
                
                // Initialize Web3 and contract
                await initializeWeb3();
                
                // Setup MetaMask event listeners
                if (typeof window.ethereum !== 'undefined') {
                    // Handle account changes
                    window.ethereum.on('accountsChanged', async (accounts) => {
                        console.log('Accounts changed:', accounts);
                        if (accounts.length === 0) {
                            console.log('MetaMask disconnected');
                            showError('MetaMask đã ngắt kết nối. Vui lòng kết nối lại!');
                            userAccount = null;
                            web3 = null;
                            contract = null;
                        } else {
                            console.log('Account switched, reinitializing...');
                            await initializeWeb3();
                        }
                    });

                    // Handle network changes
                    window.ethereum.on('chainChanged', async (chainId) => {
                        console.log('Network changed to:', chainId);
                        const chainIdDec = parseInt(chainId, 16);
                        
                        if (chainIdDec !== CONTRACT_CONFIG.EXPECTED_CHAIN_ID_DEC) {
                            showError('Vui lòng chuyển về BSC Testnet để sử dụng ứng dụng!');
                            // Optionally try to switch back automatically
                            // await switchToBSCTestnet();
                        } else {
                            console.log('Switched to correct network, reinitializing...');
                            await initializeWeb3();
                        }
                    });

                    // Handle MetaMask connection
                    window.ethereum.on('connect', (connectInfo) => {
                        console.log('MetaMask connected:', connectInfo);
                    });

                    // Handle MetaMask disconnection
                    window.ethereum.on('disconnect', (error) => {
                        console.log('MetaMask disconnected:', error);
                        showError('Kết nối MetaMask bị ngắt. Vui lòng kết nối lại!');
                        userAccount = null;
                        web3 = null;
                        contract = null;
                    });
                }
                
            } catch (error) {
                console.error('Error loading Ethers.js:', error);
                showError('Không thể tải thư viện blockchain. Vui lòng kiểm tra kết nối internet!');
            }
            
            // --- COUNTDOWN TIMER ---
            const countdownElement = document.getElementById('countdown');
            // Use Unix timestamp to avoid date parsing issues
            const campaignEndDate = @(((DateTimeOffset)Model.EndTime).ToUnixTimeMilliseconds());

            const updateCountdown = () => {
                const now = new Date().getTime();
                const distance = campaignEndDate - now;

                if (distance < 0) {
                    clearInterval(countdownInterval);
                    countdownElement.textContent = "ĐÃ KẾT THÚC";
                    return;
                }

                const days = Math.floor(distance / (1000 * 60 * 60 * 24));
                const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((distance % (1000 * 60)) / 1000);
                
                const format = (num) => num.toString().padStart(2, '0');
                countdownElement.textContent = `${format(days)}d ${format(hours)}h ${format(minutes)}m ${format(seconds)}s`;
            };
            updateCountdown();
            const countdownInterval = setInterval(updateCountdown, 1000);

            // --- INVESTMENT CALCULATOR ---
            const investmentAmountInput = document.getElementById('investment-amount');
            const ownershipPercentageElement = document.getElementById('ownership-percentage');
            const goalAmount = @(Model.GoalAmount.ToString("F2", System.Globalization.CultureInfo.InvariantCulture));

            const updateOwnershipValue = () => {
                const amount = parseFloat(investmentAmountInput.value);
                if (isNaN(amount) || amount <= 0 || goalAmount <= 0) {
                    ownershipPercentageElement.textContent = '0';
                    return;
                }
                const ownership = (amount / goalAmount) * 100;
                ownershipPercentageElement.textContent = ownership.toFixed(2);
            };
            
            if (investmentAmountInput) {
                investmentAmountInput.addEventListener('input', updateOwnershipValue);
                updateOwnershipValue(); // Initial calculation
            }
        });

        // Initialize Web3 and contract with robust error handling
        async function initializeWeb3() {
            try {
                console.log('Initializing Web3...');
                
                // Check if Ethers.js is available
                if (typeof ethers === 'undefined') {
                    console.error('Ethers.js not loaded');
                    showError('Thư viện blockchain chưa được tải. Vui lòng refresh trang!');
                    return false;
                }
                
                // Check if window.ethereum exists
                if (typeof window.ethereum === 'undefined') {
                    console.error('MetaMask not installed');
                    showError('Vui lòng cài đặt MetaMask để sử dụng tính năng đầu tư!');
                    return false;
                }

                // Create Web3 provider (Ethers v5 syntax)
                web3 = new ethers.providers.Web3Provider(window.ethereum);
                console.log('Web3 provider created');

                // Request accounts with timeout
                const accounts = await Promise.race([
                    window.ethereum.request({ method: 'eth_requestAccounts' }),
                    new Promise((_, reject) => setTimeout(() => reject(new Error('Connection timeout')), 15000))
                ]);

                if (!accounts || accounts.length === 0) {
                    throw new Error('No accounts found');
                }

                console.log('Accounts retrieved:', accounts);

                // Get signer
                const signer = web3.getSigner();
                userAccount = await signer.getAddress();
                console.log('User account:', userAccount);

                // Check network first
                const network = await web3.getNetwork();
                console.log('Current network:', network);
                
                if (network.chainId !== CONTRACT_CONFIG.EXPECTED_CHAIN_ID_DEC) {
                    console.log('Wrong network, switching to BSC Testnet...');
                    const switched = await switchToBSCTestnet();
                    if (!switched) {
                        throw new Error('Failed to switch network');
                    }
                    // Re-create web3 after network switch (Ethers v5 syntax)
                    web3 = new ethers.providers.Web3Provider(window.ethereum);
                }

                // Initialize contract
                try {
                    contract = new ethers.Contract(
                        CONTRACT_CONFIG.CONTRACT_ADDRESS,
                        CONTRACT_CONFIG.CONTRACT_ABI,
                        signer
                    );
                    console.log('Contract initialized successfully');
                    
                    // Test contract connection by calling a view function
                    await contract.campaignCounter();
                    console.log('Contract connection verified');
                    
                } catch (contractError) {
                    console.error('Contract initialization failed:', contractError);
                    throw new Error('Không thể kết nối với smart contract');
                }

                console.log('Web3 initialization completed successfully');
                return true;
                
            } catch (error) {
                console.error('Web3 initialization error:', error);
                
                // Handle specific errors
                if (error.code === 4001) {
                    showError('Bạn đã từ chối kết nối ví. Vui lòng thử lại và chấp nhận kết nối.');
                } else if (error.code === -32002) {
                    showError('Đã có yêu cầu kết nối MetaMask đang chờ. Vui lòng kiểm tra MetaMask.');
                } else if (error.message === 'Connection timeout') {
                    showError('Kết nối ví bị timeout. Vui lòng thử lại.');
                } else if (error.message === 'No accounts found') {
                    showError('Không tìm thấy tài khoản nào. Vui lòng unlock MetaMask.');
                } else if (error.message.includes('smart contract')) {
                    showError(error.message);
                } else {
                    showError('Không thể kết nối với ví. Vui lòng kiểm tra MetaMask và thử lại!');
                }
                
                return false;
            }
        }

        // Switch to BSC Testnet with robust error handling
        async function switchToBSCTestnet() {
            try {
                console.log('Attempting to switch to BSC Testnet...');
                
                await window.ethereum.request({
                    method: 'wallet_switchEthereumChain',
                    params: [{ chainId: CONTRACT_CONFIG.EXPECTED_CHAIN_ID_HEX }],
                });
                
                console.log('Successfully switched to BSC Testnet');
                return true;
                
            } catch (switchError) {
                console.log('Switch error:', switchError);
                
                // Chain not added to MetaMask
                if (switchError.code === 4902) {
                    try {
                        console.log('Adding BSC Testnet to MetaMask...');
                        
                        await window.ethereum.request({
                            method: 'wallet_addEthereumChain',
                            params: [{
                                chainId: CONTRACT_CONFIG.EXPECTED_CHAIN_ID_HEX,
                                chainName: 'BSC Testnet',
                                nativeCurrency: {
                                    name: 'BNB',
                                    symbol: 'BNB',
                                    decimals: 18
                                },
                                rpcUrls: ['https://data-seed-prebsc-1-s1.binance.org:8545/'],
                                blockExplorerUrls: ['https://testnet.bscscan.com/']
                            }]
                        });
                        
                        console.log('BSC Testnet added successfully, attempting to switch again...');
                        
                        // Try to switch again after adding
                        await window.ethereum.request({
                            method: 'wallet_switchEthereumChain',
                            params: [{ chainId: CONTRACT_CONFIG.EXPECTED_CHAIN_ID_HEX }],
                        });
                        
                        console.log('Successfully switched to BSC Testnet after adding');
                        return true;
                        
                    } catch (addError) {
                        console.error('Error adding BSC Testnet:', addError);
                        
                        if (addError.code === 4001) {
                            showError('Bạn đã từ chối thêm BSC Testnet. Vui lòng thêm thủ công trong MetaMask.');
                        } else {
                            showError('Không thể thêm BSC Testnet. Vui lòng thêm thủ công!');
                        }
                        return false;
                    }
                } else if (switchError.code === 4001) {
                    // User rejected the switch
                    showError('Bạn đã từ chối chuyển sang BSC Testnet. Vui lòng chuyển thủ công trong MetaMask.');
                    return false;
                } else {
                    console.error('Error switching to BSC Testnet:', switchError);
                    showError('Không thể chuyển sang BSC Testnet! Vui lòng chuyển thủ công trong MetaMask.');
                    return false;
                }
            }
        }

        // Main investment function
        async function investInCampaign(campaignId) {
            let originalText = ''; // Declare at function scope
            
            try {
                const amountInput = document.getElementById('investment-amount');
                const amount = parseFloat(amountInput.value);
                
                // Validation
                if (!amount || amount <= 0) {
                    showError('Vui lòng nhập số tiền đầu tư hợp lệ!');
                    return;
                }

                if (amount < 0.01) {
                    showError('Số tiền đầu tư tối thiểu là 0.01 BNB!');
                    return;
                }

                const maxAmount = @((Model.GoalAmount - Model.CurrentRaisedAmount).ToString("F2", System.Globalization.CultureInfo.InvariantCulture));
                if (amount > maxAmount) {
                    showError(`Số tiền đầu tư không được vượt quá ${maxAmount} BNB!`);
                    return;
                }

                // Check Web3 connection and reinitialize if needed
                if (!web3 || !contract || !userAccount) {
                    console.log('Web3 not connected, attempting to initialize...');
                    const initialized = await initializeWeb3();
                    if (!initialized || !web3 || !contract || !userAccount) {
                        showError('Không thể kết nối với ví. Vui lòng kiểm tra MetaMask và thử lại!');
                        return;
                    }
                }

                // Double-check network
                const network = await web3.getNetwork();
                if (network.chainId !== CONTRACT_CONFIG.EXPECTED_CHAIN_ID_DEC) {
                    showError('Vui lòng chuyển sang BSC Testnet để thực hiện giao dịch!');
                    return;
                }

                // Show loading state
                const investBtn = document.getElementById('invest-btn');
                if (investBtn) {
                    originalText = investBtn.innerHTML;
                    investBtn.disabled = true;
                    investBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang xử lý...';
                }

                // Convert amount to Wei
                const amountWei = ethers.utils.parseEther(amount.toString());

                // Call smart contract
                console.log('Calling invest function with:', {
                    campaignId: campaignId,
                    amount: amount,
                    amountWei: amountWei.toString(),
                    userAccount: userAccount,
                    contractAddress: CONTRACT_CONFIG.CONTRACT_ADDRESS
                });

                // Verify campaign exists first
                try {
                    const campaign = await contract.campaigns(campaignId);
                    console.log('Campaign info:', campaign);
                    console.log('Campaign status (raw):', campaign.status);
                    console.log('Campaign status (number):', campaign.status.toNumber ? campaign.status.toNumber() : campaign.status);
                    
                    if (campaign.id.toString() === '0') {
                        throw new Error('Campaign not found on blockchain');
                    }
                    
                    const statusValue = campaign.status.toNumber ? campaign.status.toNumber() : campaign.status;
                    console.log('Status value for comparison:', statusValue);
                    
                    // Bỏ qua kiểm tra status cứng nhắc - cho phép đầu tư ở mọi trạng thái
                    const statusNames = ['Draft', 'PendingPost', 'PendingApproval', 'Active', 'Voting', 'Completed', 'Failed'];
                    const statusName = statusNames[statusValue] || 'Unknown';
                    console.log(`📊 Campaign status: ${statusName} (${statusValue})`);
                    
                    console.log('✅ Allowing investment regardless of status');
                    
                    // Check if campaign has ended
                    const currentTime = Math.floor(Date.now() / 1000);
                    if (campaign.endTime.toNumber() < currentTime) {
                        throw new Error('Campaign has ended');
                    }
                    
                } catch (campaignCheckError) {
                    console.error('Campaign verification failed:', campaignCheckError);
                    throw campaignCheckError; // Re-throw the original error
                }

                const tx = await contract.invest(campaignId, {
                    value: amountWei,
                    gasLimit: 300000 // Increased gas limit
                });

                showSuccess('Giao dịch đã được gửi! Đang chờ xác nhận...');
                console.log('Transaction sent:', tx.hash);

                // Wait for transaction confirmation
                const receipt = await tx.wait();
                console.log('Transaction confirmed:', receipt);

                if (receipt.status === 1) {
                    showSuccess('Đầu tư thành công! Giao dịch đã được xác nhận trên blockchain.');
                    
                    // Reset form
                    amountInput.value = '';
                    document.getElementById('ownership-percentage').textContent = '0';
                    
                    // Reload page after delay to show updated data
                    setTimeout(() => {
                        window.location.reload();
                    }, 3000);
                } else {
                    showError('Giao dịch thất bại! Vui lòng thử lại.');
                }

            } catch (error) {
                console.error('Investment error:', error);
                
                // Handle specific errors
                if (error.code === 4001) {
                    showError('Giao dịch bị hủy bởi người dùng.');
                } else if (error.code === -32603) {
                    showError('Giao dịch bị từ chối. Vui lòng kiểm tra số dư và thử lại.');
                } else if (error.message && error.message.includes('insufficient funds')) {
                    showError('Số dư BNB không đủ để thực hiện giao dịch.');
                } else if (error.message && error.message.includes('Campaign not found')) {
                    showError('Không tìm thấy chiến dịch trên blockchain.');
                } else if (error.message && error.message.includes('Campaign đang ở trạng thái')) {
                    showError(error.message);
                } else if (error.message && error.message.includes('Campaign has ended')) {
                    showError('Chiến dịch đã kết thúc, không thể đầu tư.');
                } else if (error.message && error.message.includes('Investment too small')) {
                    showError('Số tiền đầu tư quá nhỏ. Tối thiểu 0.01 BNB.');
                } else if (error.code === 'CALL_EXCEPTION') {
                    showError('Smart contract từ chối giao dịch. Campaign có thể chưa ở trạng thái Active.');
                } else if (error.reason) {
                    showError(`Lỗi smart contract: ${error.reason}`);
                } else {
                    showError('Có lỗi xảy ra khi đầu tư. Vui lòng thử lại!');
                }
            } finally {
                // Reset button state
                const investBtn = document.getElementById('invest-btn');
                if (investBtn) {
                    investBtn.disabled = false;
                    investBtn.innerHTML = originalText || 'Đầu tư ngay';
                }
            }
        }

        // Utility functions
        function showSuccess(message) {
            // Create and show success notification
            const notification = createNotification(message, 'success');
            document.body.appendChild(notification);
            setTimeout(() => notification.remove(), 5000);
        }

        function showError(message) {
            // Create and show error notification
            const notification = createNotification(message, 'error');
            document.body.appendChild(notification);
            setTimeout(() => notification.remove(), 5000);
        }

        function createNotification(message, type) {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 1rem 1.5rem;
                border-radius: 8px;
                color: white;
                font-weight: 500;
                z-index: 10000;
                max-width: 400px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                background: ${type === 'success' ? 'linear-gradient(135deg, #28a745, #20c997)' : 'linear-gradient(135deg, #dc3545, #e74c3c)'};
            `;
            notification.innerHTML = `
                <div style="display: flex; align-items: center; gap: 0.5rem;">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle'}"></i>
                    <span>${message}</span>
                </div>
            `;
            return notification;
        }

        function voteOnCampaign(campaignId) {
            // Hiển thị modal hoặc chuyển hướng đến trang bỏ phiếu
            if (confirm('Bạn có muốn tham gia bỏ phiếu cho dự án này không?')) {
                // Chuyển hướng đến trang voting hoặc mở modal
                window.location.href = `/Campaigns/Vote/${campaignId}`;
                // Hoặc có thể mở modal voting ngay tại đây
                // showVotingModal(campaignId);
            }
        }

        function claimRefund(campaignId) {
            if (confirm('Bạn có chắc chắn muốn claim lại tiền đầu tư không? Hành động này không thể hoàn tác.')) {
                claimRefundFromContract(campaignId);
            }
        }

        async function claimRefundFromContract(campaignId) {
            try {
                // Check Web3 connection and reinitialize if needed
                if (!web3 || !contract || !userAccount) {
                    console.log('Web3 not connected, attempting to initialize...');
                    const initialized = await initializeWeb3();
                    if (!initialized || !web3 || !contract || !userAccount) {
                        showError('Không thể kết nối với ví. Vui lòng kiểm tra MetaMask và thử lại!');
                        return;
                    }
                }

                // Double-check network
                const network = await web3.getNetwork();
                if (network.chainId !== CONTRACT_CONFIG.EXPECTED_CHAIN_ID_DEC) {
                    showError('Vui lòng chuyển sang BSC Testnet để thực hiện giao dịch!');
                    return;
                }

                // Show loading state
                const refundBtn = document.getElementById('refund-btn');
                const originalText = refundBtn.innerHTML;
                refundBtn.disabled = true;
                refundBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang xử lý...';

                console.log('Calling refund function for campaign:', campaignId);

                // Call smart contract refund function
                const tx = await contract.refund(campaignId, {
                    gasLimit: 150000 // Set appropriate gas limit
                });

                showSuccess('Giao dịch claim refund đã được gửi! Đang chờ xác nhận...');
                console.log('Refund transaction sent:', tx.hash);

                // Wait for transaction confirmation
                const receipt = await tx.wait();
                console.log('Refund transaction confirmed:', receipt);

                if (receipt.status === 1) {
                    showSuccess('Claim refund thành công! Số BNB đã được hoàn về ví của bạn.');
                    
                    // Reload page after delay to show updated data
                    setTimeout(() => {
                        window.location.reload();
                    }, 3000);
                } else {
                    showError('Giao dịch claim refund thất bại! Vui lòng thử lại.');
                }

            } catch (error) {
                console.error('Refund error:', error);
                
                // Handle specific errors
                if (error.code === 4001) {
                    showError('Giao dịch bị hủy bởi người dùng.');
                } else if (error.code === -32603) {
                    showError('Giao dịch bị từ chối. Vui lòng kiểm tra và thử lại.');
                } else if (error.message && error.message.includes('insufficient funds')) {
                    showError('Số dư BNB không đủ để thanh toán phí gas.');
                } else if (error.message && error.message.includes('Campaign not found')) {
                    showError('Không tìm thấy chiến dịch trên blockchain.');
                } else if (error.message && error.message.includes('No investment found')) {
                    showError('Bạn chưa đầu tư vào chiến dịch này.');
                } else if (error.message && error.message.includes('Campaign is not failed')) {
                    showError('Chiến dịch chưa ở trạng thái thất bại, không thể claim refund.');
                } else {
                    showError('Có lỗi xảy ra khi claim refund. Vui lòng thử lại!');
                }
            } finally {
                // Reset button state
                const refundBtn = document.getElementById('refund-btn');
                if (refundBtn) {
                    refundBtn.disabled = false;
                    refundBtn.innerHTML = originalText;
                }
            }
        }

        function voteOnWithdrawal(requestId, agree) {
            const actionText = agree ? 'ủng hộ' : 'phản đối';
            if (confirm(`Bạn có chắc chắn muốn ${actionText} yêu cầu rút vốn này không? Hành động này không thể hoàn tác.`)) {
                voteOnWithdrawalRequest(requestId, agree);
            }
        }

        async function voteOnWithdrawalRequest(requestId, agree) {
            try {
                // Check Web3 connection and reinitialize if needed
                if (!web3 || !contract || !userAccount) {
                    console.log('Web3 not connected, attempting to initialize...');
                    const initialized = await initializeWeb3();
                    if (!initialized || !web3 || !contract || !userAccount) {
                        showError('Không thể kết nối với ví. Vui lòng kiểm tra MetaMask và thử lại!');
                        return;
                    }
                }

                // Double-check network
                const network = await web3.getNetwork();
                if (network.chainId !== CONTRACT_CONFIG.EXPECTED_CHAIN_ID_DEC) {
                    showError('Vui lòng chuyển sang BSC Testnet để thực hiện giao dịch!');
                    return;
                }

                // Hiển thị loading state
                const voteButtons = document.querySelectorAll(`[onclick*="voteOnWithdrawal(${requestId}"]`);
                const originalTexts = [];
                voteButtons.forEach((btn, index) => {
                    originalTexts[index] = btn.innerHTML;
                    btn.disabled = true;
                    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang xử lý...';
                });

                console.log('Calling voteForWithdrawal function:', {
                    campaignId: @Model.Id,
                    requestId: requestId,
                    agree: agree
                });

                // Call smart contract vote function
                const tx = await contract.voteForWithdrawal(@Model.Id, requestId, agree, {
                    gasLimit: 150000 // Set appropriate gas limit
                });

                const actionText = agree ? 'ủng hộ' : 'phản đối';
                showSuccess(`Giao dịch bỏ phiếu ${actionText} đã được gửi! Đang chờ xác nhận...`);
                console.log('Vote transaction sent:', tx.hash);

                // Wait for transaction confirmation
                const receipt = await tx.wait();
                console.log('Vote transaction confirmed:', receipt);

                if (receipt.status === 1) {
                    showSuccess(`Bỏ phiếu ${actionText} thành công! Giao dịch đã được ghi nhận trên blockchain.`);
                    
                    // Reload trang để cập nhật trạng thái
                    setTimeout(() => {
                        window.location.reload();
                    }, 3000);
                } else {
                    showError('Giao dịch bỏ phiếu thất bại! Vui lòng thử lại.');
                }
                
            } catch (error) {
                console.error('Lỗi khi bỏ phiếu:', error);
                
                // Handle specific errors
                if (error.code === 4001) {
                    showError('Giao dịch bị hủy bởi người dùng.');
                } else if (error.code === -32603) {
                    showError('Giao dịch bị từ chối. Vui lòng kiểm tra và thử lại.');
                } else if (error.message && error.message.includes('insufficient funds')) {
                    showError('Số dư BNB không đủ để thanh toán phí gas.');
                } else if (error.message && error.message.includes('Not an investor')) {
                    showError('Chỉ nhà đầu tư mới có quyền bỏ phiếu.');
                } else if (error.message && error.message.includes('Already voted')) {
                    showError('Bạn đã bỏ phiếu cho yêu cầu này rồi.');
                } else if (error.message && error.message.includes('Vote ended')) {
                    showError('Thời gian bỏ phiếu đã kết thúc.');
                } else if (error.message && error.message.includes('Request not found')) {
                    showError('Không tìm thấy yêu cầu rút vốn.');
                } else {
                    showError('Có lỗi xảy ra khi bỏ phiếu. Vui lòng thử lại!');
                }
                
                // Reset buttons
                const voteButtons = document.querySelectorAll(`[onclick*="voteOnWithdrawal(${requestId}"]`);
                voteButtons.forEach((btn, index) => {
                    btn.disabled = false;
                    btn.innerHTML = originalTexts[index] || btn.innerHTML;
                });
            }
        }

        // ===== VOTING FUNCTIONS =====
        
        // Load withdrawal requests for voting
        async function loadWithdrawalRequests(campaignId) {
            try {
                await ensureWalletConnected();
                const contract = await getContract();
                
                // Get withdrawal requests count
                // Note: You might need to implement getWithdrawalRequestsCount in your smart contract
                const requestsElement = document.getElementById('withdrawal-requests');
                requestsElement.innerHTML = '<p>Đang tải danh sách yêu cầu rút tiền...</p>';
                
                // For now, we'll create a sample interface
                // You should implement this based on your smart contract structure
                requestsElement.innerHTML = `
                    <div class="withdrawal-request">
                        <div class="request-header">
                            <span class="request-amount">Yêu cầu rút: 10 BNB</span>
                            <span class="request-status status-pending">Đang bỏ phiếu</span>
                        </div>
                        <p>Lý do: Mua thiết bị và nguyên liệu cho dự án</p>
                        <div class="vote-stats">
                            <div class="vote-stat">
                                <div>Phiếu ủng hộ</div>
                                <div style="color: var(--success);">45 BNB (65%)</div>
                            </div>
                            <div class="vote-stat">
                                <div>Phiếu phản đối</div>
                                <div style="color: var(--danger);">24 BNB (35%)</div>
                            </div>
                        </div>
                        <div class="vote-buttons">
                            <button class="btn btn-success" onclick="voteForWithdrawal(${campaignId}, 0, true)">
                                <i class="fas fa-thumbs-up"></i> Ủng hộ
                            </button>
                            <button class="btn btn-danger" onclick="voteForWithdrawal(${campaignId}, 0, false)">
                                <i class="fas fa-thumbs-down"></i> Phản đối
                            </button>
                        </div>
                    </div>
                `;
                
            } catch (error) {
                console.error('Error loading withdrawal requests:', error);
                document.getElementById('withdrawal-requests').innerHTML = '<p style="color: var(--danger);">Không thể tải danh sách yêu cầu rút tiền.</p>';
            }
        }

        // Vote for withdrawal request
        async function voteForWithdrawal(campaignId, requestId, agree) {
            try {
                await ensureWalletConnected();
                const contract = await getContract();
                
                const actionText = agree ? 'ủng hộ' : 'phản đối';
                console.log(`Voting ${actionText} for campaign ${campaignId}, request ${requestId}`);
                
                // Set button loading state
                const voteButtons = document.querySelectorAll(`[onclick*="voteForWithdrawal(${campaignId}, ${requestId}"]`);
                const originalTexts = [];
                voteButtons.forEach((btn, index) => {
                    originalTexts[index] = btn.innerHTML;
                    btn.disabled = true;
                    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang xử lý...';
                });

                // Call smart contract
                const tx = await contract.voteForWithdrawal(campaignId, requestId, agree, {
                    gasLimit: 150000
                });

                showSuccess(`Giao dịch bỏ phiếu ${actionText} đã được gửi! Đang chờ xác nhận...`);
                console.log('Vote transaction sent:', tx.hash);

                const receipt = await tx.wait();
                console.log('Vote transaction confirmed:', receipt);

                if (receipt.status === 1) {
                    showSuccess(`Bỏ phiếu ${actionText} thành công!`);
                    // Reload voting interface
                    setTimeout(() => loadWithdrawalRequests(campaignId), 2000);
                } else {
                    showError('Giao dịch bỏ phiếu thất bại!');
                }
                
                // Reset buttons
                voteButtons.forEach((btn, index) => {
                    btn.disabled = false;
                    btn.innerHTML = originalTexts[index];
                });
                
            } catch (error) {
                console.error('Voting error:', error);
                
                if (error.code === 4001) {
                    showError('Giao dịch bị hủy bởi người dùng.');
                } else if (error.message && error.message.includes('Only investors can vote')) {
                    showError('Chỉ nhà đầu tư mới có quyền bỏ phiếu.');
                } else if (error.message && error.message.includes('You have already voted')) {
                    showError('Bạn đã bỏ phiếu cho yêu cầu này rồi.');
                } else if (error.message && error.message.includes('Voting period has ended')) {
                    showError('Thời gian bỏ phiếu đã kết thúc.');
                } else {
                    showError('Có lỗi xảy ra khi bỏ phiếu. Vui lòng thử lại!');
                }
                
                // Reset buttons
                const voteButtons = document.querySelectorAll(`[onclick*="voteForWithdrawal(${campaignId}, ${requestId}"]`);
                voteButtons.forEach((btn) => {
                    btn.disabled = false;
                    btn.innerHTML = btn.innerHTML.replace('<i class="fas fa-spinner fa-spin"></i> Đang xử lý...', btn.textContent);
                });
            }
        }

        // ===== PROFIT FUNCTIONS =====
        
        // Add profit (for campaign owner)
        async function addProfit(campaignId) {
            try {
                await ensureWalletConnected();
                const contract = await getContract();
                
                const profitAmountInput = document.getElementById('profit-amount');
                const amount = parseFloat(profitAmountInput.value);
                
                if (isNaN(amount) || amount <= 0) {
                    showError('Vui lòng nhập số tiền lợi nhuận hợp lệ!');
                    return;
                }
                
                if (amount < 0.01) {
                    showError('Số tiền lợi nhuận tối thiểu là 0.01 BNB!');
                    return;
                }
                
                const amountWei = ethers.utils.parseEther(amount.toString());
                
                console.log('Adding profit:', {
                    campaignId: campaignId,
                    amount: amount,
                    amountWei: amountWei.toString()
                });
                
                // Set button loading state
                const addProfitBtn = document.getElementById('add-profit-btn');
                const originalText = addProfitBtn.innerHTML;
                addProfitBtn.disabled = true;
                addProfitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang xử lý...';
                
                // Call smart contract
                const tx = await contract.addProfit(campaignId, {
                    value: amountWei,
                    gasLimit: 200000
                });
                
                showSuccess('Giao dịch thêm lợi nhuận đã được gửi! Đang chờ xác nhận...');
                console.log('Add profit transaction sent:', tx.hash);
                
                const receipt = await tx.wait();
                console.log('Add profit transaction confirmed:', receipt);
                
                if (receipt.status === 1) {
                    showSuccess(`Thêm lợi nhuận ${amount} BNB thành công!`);
                    profitAmountInput.value = '';
                    // Reload profit interface
                    setTimeout(() => loadProfitList(campaignId), 2000);
                } else {
                    showError('Giao dịch thêm lợi nhuận thất bại!');
                }
                
                // Reset button
                addProfitBtn.disabled = false;
                addProfitBtn.innerHTML = originalText;
                
            } catch (error) {
                console.error('Add profit error:', error);
                
                if (error.code === 4001) {
                    showError('Giao dịch bị hủy bởi người dùng.');
                } else if (error.message && error.message.includes('insufficient funds')) {
                    showError('Số dư BNB không đủ để thêm lợi nhuận.');
                } else if (error.message && error.message.includes('Campaign not completed')) {
                    showError('Chỉ có thể thêm lợi nhuận cho campaign đã hoàn thành.');
                } else if (error.message && error.message.includes('Profit must be greater than zero')) {
                    showError('Số tiền lợi nhuận phải lớn hơn 0.');
                } else {
                    showError('Có lỗi xảy ra khi thêm lợi nhuận. Vui lòng thử lại!');
                }
                
                // Reset button
                const addProfitBtn = document.getElementById('add-profit-btn');
                if (addProfitBtn) {
                    addProfitBtn.disabled = false;
                    addProfitBtn.innerHTML = '<i class="fas fa-plus"></i> Thêm lợi nhuận';
                }
            }
        }
        
        // Load profit list for investors
        async function loadProfitList(campaignId) {
            try {
                await ensureWalletConnected();
                const contract = await getContract();
                
                const profitListElement = document.getElementById('profit-list');
                profitListElement.innerHTML = '<p>Đang tải danh sách lợi nhuận...</p>';
                
                // For now, create sample interface
                // You should implement this based on your smart contract structure
                profitListElement.innerHTML = `
                    <div class="profit-item">
                        <div class="profit-header">
                            <span class="profit-amount">Lợi nhuận: 5 BNB</span>
                            <span class="profit-status status-claimable">Có thể nhận</span>
                        </div>
                        <p>Phần của bạn: 0.5 BNB (10% ownership)</p>
                        <button class="btn btn-success" onclick="claimProfit(${campaignId}, 0)">
                            <i class="fas fa-money-bill-wave"></i> Nhận lợi nhuận
                        </button>
                    </div>
                    <div class="profit-item">
                        <div class="profit-header">
                            <span class="profit-amount">Lợi nhuận: 3 BNB</span>
                            <span class="profit-status status-claimed">Đã nhận</span>
                        </div>
                        <p>Đã nhận: 0.3 BNB (10% ownership)</p>
                    </div>
                `;
                
            } catch (error) {
                console.error('Error loading profit list:', error);
                document.getElementById('profit-list').innerHTML = '<p style="color: var(--danger);">Không thể tải danh sách lợi nhuận.</p>';
            }
        }
        
        // Claim profit (for investors)
        async function claimProfit(campaignId, profitIndex) {
            try {
                await ensureWalletConnected();
                const contract = await getContract();
                
                console.log('Claiming profit:', {
                    campaignId: campaignId,
                    profitIndex: profitIndex
                });
                
                // Set button loading state
                const claimButton = document.querySelector(`[onclick*="claimProfit(${campaignId}, ${profitIndex}"]`);
                const originalText = claimButton.innerHTML;
                claimButton.disabled = true;
                claimButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang xử lý...';
                
                // Call smart contract
                const tx = await contract.claimProfit(campaignId, profitIndex, {
                    gasLimit: 200000
                });
                
                showSuccess('Giao dịch nhận lợi nhuận đã được gửi! Đang chờ xác nhận...');
                console.log('Claim profit transaction sent:', tx.hash);
                
                const receipt = await tx.wait();
                console.log('Claim profit transaction confirmed:', receipt);
                
                if (receipt.status === 1) {
                    showSuccess('Nhận lợi nhuận thành công!');
                    // Reload profit interface
                    setTimeout(() => loadProfitList(campaignId), 2000);
                } else {
                    showError('Giao dịch nhận lợi nhuận thất bại!');
                }
                
                // Reset button
                claimButton.disabled = false;
                claimButton.innerHTML = originalText;
                
            } catch (error) {
                console.error('Claim profit error:', error);
                
                if (error.code === 4001) {
                    showError('Giao dịch bị hủy bởi người dùng.');
                } else if (error.message && error.message.includes('No investments found')) {
                    showError('Bạn chưa đầu tư vào campaign này.');
                } else if (error.message && error.message.includes('Profit already claimed')) {
                    showError('Bạn đã nhận lợi nhuận này rồi.');
                } else if (error.message && error.message.includes('Campaign not completed')) {
                    showError('Campaign chưa hoàn thành.');
                } else if (error.message && error.message.includes('No profit to claim')) {
                    showError('Không có lợi nhuận để nhận.');
                } else {
                    showError('Có lỗi xảy ra khi nhận lợi nhuận. Vui lòng thử lại!');
                }
                
                // Reset button
                const claimButton = document.querySelector(`[onclick*="claimProfit(${campaignId}, ${profitIndex}"]`);
                if (claimButton) {
                    claimButton.disabled = false;
                    claimButton.innerHTML = '<i class="fas fa-money-bill-wave"></i> Nhận lợi nhuận';
                }
            }
        }

        // ===== INITIALIZATION FOR STATUS-SPECIFIC INTERFACES =====
        
        // Check campaign status and initialize appropriate interface
        async function initializeStatusInterface() {
            const campaignId = @Model.Id;
            const status = @((int)Model.Status);
            
            console.log('Initializing interface for status:', status);
            
            if (status === 4) { // Voting
                await loadWithdrawalRequests(campaignId);
            } else if (status === 5) { // Completed
                // Check if user is owner or investor
                try {
                    await ensureWalletConnected();
                    const currentUser = userAccount;
                    const ownerAddress = '@Model.OwnerAddress';
                    
                    if (currentUser && currentUser.toLowerCase() === ownerAddress.toLowerCase()) {
                        // Show owner interface
                        document.getElementById('owner-section').style.display = 'block';
                        document.getElementById('investor-section').style.display = 'none';
                    } else {
                        // Show investor interface and load profit list
                        document.getElementById('owner-section').style.display = 'none';
                        document.getElementById('investor-section').style.display = 'block';
                        await loadProfitList(campaignId);
                    }
                } catch (error) {
                    console.error('Error checking user role:', error);
                    // Default to investor interface
                    document.getElementById('owner-section').style.display = 'none';
                    document.getElementById('investor-section').style.display = 'block';
                }
            }
        }

        // Call initialization after DOM is loaded and wallet is connected
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(initializeStatusInterface, 1000); // Wait for wallet connection
        });
    </script>
}