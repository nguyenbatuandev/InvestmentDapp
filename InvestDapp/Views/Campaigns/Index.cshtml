@model IEnumerable<InvestDapp.Models.Campaign>
@{
    ViewData["Title"] = "Khám phá dự án";
    Layout = "~/Pages/_Layout.cshtml";
}

@section Styles {
    <style>
        /* --- BỐ CỤC TRANG CHÍNH --- */
        :root {
            --bg-dark: #0a0e1a;
            --bg-light: #12182b;
            --primary: #00aaff;
            --primary-light: #00c6ff;
            --secondary: #272c44;
            --text-color: #e0e0e0;
            --text-muted: #8a93b3;
            --success: #00e676;
            --warning: #ffb800;
            --danger: #ff6b6b;
            --gradient: linear-gradient(90deg, var(--primary), var(--primary-light));
        }

        .page-container {
            max-width: 1400px;
            margin: 0 auto;
			margin-top: 30px;
            padding: 3rem 1.5rem;
        }

        .page-title {
            text-align: center;
            margin-bottom: 3rem;
        }

            .page-title h1 {
                font-size: 2.5rem;
                font-weight: 700;
                color: #fff;
            }

            .page-title p {
                font-size: 1.1rem;
                color: var(--text-muted);
            }

        /* --- FILTER BAR --- */
        .filter-bar {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            align-items: center;
            background-color: var(--bg-light);
            padding: 1rem;
            border-radius: 12px;
            border: 1px solid var(--secondary);
            margin-bottom: 3rem;
        }

        .filter-group {
            display: flex;
            align-items: center;
        }

        .filter-status {
            gap: 0.5rem;
        }

        .filter-btn {
            background-color: transparent;
            border: 1px solid var(--secondary);
            color: var(--text-muted);
            padding: 0.6rem 1.2rem;
            border-radius: 25px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s ease;
        }

            .filter-btn:hover {
                color: var(--text-color);
                border-color: var(--primary);
            }

            .filter-btn.active {
                background-color: var(--primary);
                color: var(--bg-dark);
                font-weight: 700;
                border-color: var(--primary);
                box-shadow: 0 2px 8px rgba(0, 170, 255, 0.3);
            }

        .input-wrapper {
            display: flex;
            align-items: center;
            background-color: var(--bg-dark);
            border: 1px solid var(--secondary);
            border-radius: 25px;
            padding: 0 1rem;
        }

            .input-wrapper:focus-within {
                box-shadow: 0 0 0 2px var(--primary);
            }

            .input-wrapper i {
                color: var(--text-muted);
                margin-right: 0.5rem;
            }

            .input-wrapper input {
                background: transparent;
                border: none;
                outline: none;
                color: var(--text-color);
                padding: 0.7rem 0.6rem;
                width: 220px;
                font-size: 1rem;
            }

        .styled-select {
            background-color: var(--bg-dark);
            color: var(--text-color);
            border: 1px solid var(--secondary);
            border-radius: 25px;
            padding: 0.7rem 1.5rem 0.7rem 1rem;
            -webkit-appearance: none;
            appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%238a93b3' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 1rem center;
            background-size: 1em;
            cursor: pointer;
            font-size: 1rem;
        }

        /* --- PROJECT GRID --- */
        .project-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 1.5rem;
        }

        .project-card {
            background-color: var(--bg-light);
            border: 1px solid var(--secondary);
            border-radius: 12px;
            overflow: hidden;
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
            display: flex;
            flex-direction: column;
        }

            .project-card:hover {
                transform: translateY(-8px);
                box-shadow: 0 12px 30px rgba(0, 170, 255, 0.15);
            }

        .card-banner {
            position: relative;
            overflow: hidden;
            border-radius: 12px 12px 0 0;
            height: 220px;
        }

        .card-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease-in-out;
        }

        .project-card:hover .card-image {
            transform: scale(1.05);
        }

        .status-badge {
            position: absolute;
            top: 1rem;
            right: 1rem;
            padding: 0.4rem 1rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 600;
            text-transform: uppercase;
            display: flex;
            align-items: center;
            gap: 0.4rem;
        }

        .status-active {
            background-color: rgba(0, 230, 118, 0.15);
            color: var(--success);
            border: 1px solid var(--success);
        }

        .status-pending {
            background-color: rgba(255, 184, 0, 0.15);
            color: var(--warning);
            border: 1px solid var(--warning);
        }

        .status-voting {
            background-color: rgba(0, 170, 255, 0.15);
            color: var(--primary);
            border: 1px solid var(--primary);
        }

        .status-completed {
            background-color: rgba(0, 170, 255, 0.15);
            color: var(--primary);
            border: 1px solid var(--primary);
        }

        .status-failed {
            background-color: rgba(255, 107, 107, 0.15);
            color: var(--danger);
            border: 1px solid var(--danger);
        }

        .card-content {
            padding: 1.75rem;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }

        .card-header {
            display: flex;
            align-items: center;
            gap: 1rem; 
            margin-bottom: 1.2rem;
        }

        .project-logo {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: var(--gradient);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 1.2rem;
            flex-shrink: 0;
        }

        .project-info {
            flex-grow: 1;
        }

        .project-name {
            font-size: 1.3rem;
            font-weight: 600;
            color: #fff;
            line-height: 1.4;
            margin: 0;
        }

        .project-desc {
            color: var(--text-muted);
            font-size: 1rem;
            line-height: 1.5;
            margin-bottom: 1.5rem;
            height: 4.5rem;
            overflow: hidden;
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 3;
        }

        .stats-container {
            margin-top: auto;
        }

        .progress-stats {
            display: flex;
            justify-content: space-between;
            font-size: 0.95rem;
            margin-bottom: 0.6rem;
            color: var(--text-muted);
        }

            .progress-stats strong {
                color: var(--text-color);
                font-weight: 600;
            }

        .progress-bar-container {
            width: 100%;
            background-color: var(--secondary);
            border-radius: 10px;
            height: 10px;
            overflow: hidden;
        }

        .progress-bar-fill {
            background: var(--gradient);
            height: 100%;
            border-radius: 10px;
            transition: width 0.8s ease;
        }

        .card-footer {
            margin-top: 1.75rem;
        }

        .btn-details {
            width: 100%;
            background: transparent;
            border: 1px solid var(--primary);
            color: var(--primary);
            padding: 0.8rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

            .btn-details:hover {
                background-color: var(--primary);
                color: var(--bg-dark);
                box-shadow: 0 4px 10px rgba(0, 170, 255, 0.3);
            }

        .no-results {
            color: var(--text-muted);
            font-size: 1.1rem;
            text-align: center;
            padding: 2rem;
            grid-column: 1 / -1;
        }

        .empty-state {
            text-align: center;
            padding: 80px 20px;
            color: var(--text-muted);
            grid-column: 1 / -1;
        }

        .empty-icon {
            font-size: 4rem;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .empty-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 10px;
            color: var(--text-color);
        }

        .empty-description {
            font-size: 1rem;
            line-height: 1.6;
            margin-bottom: 30px;
        }

        /* --- RESPONSIVE --- */
        @@media (max-width: 768px) {
            .filter-bar {
                flex-direction: column;
                align-items: stretch;
            }

            .input-wrapper input {
                width: 100%;
            }

            .project-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
}

<main class="page-container">
    <div class="page-title">
        <h1>Khám phá các Dự án</h1>
        <p>Tìm kiếm, lọc và đầu tư vào các dự án tiềm năng trên nền tảng của chúng tôi.</p>
    </div>

    <div class="filter-bar">
        <div class="filter-group filter-status">
            <button class="filter-btn active" data-status="all">Tất cả</button>
            <button class="filter-btn" data-status="active">🟢 Đang gọi vốn</button>
            <button class="filter-btn" data-status="completed">🔵 Hoàn thành</button>
            <button class="filter-btn" data-status="failed">🔴 Thất bại</button>
        </div>

        <div class="filter-group">
            <div class="input-wrapper">
                <i class="fa-solid fa-search"></i>
                <input type="search" id="search-input" placeholder="Tìm theo tên dự án...">
            </div>
        </div>

        <div class="filter-group">
            <select id="sort-select" class="styled-select">
                <option value="newest">Sắp xếp: Mới nhất</option>
                <option value="progress">Sắp xếp: Tiến độ cao</option>
                <option value="amount">Sắp xếp: Huy động nhiều</option>
            </select>
        </div>
    </div>

    <div class="project-grid" id="project-grid">
        @if (Model?.Any() == true)
        {
            @foreach (var campaign in Model)
            {
                var progress = campaign.GoalAmount > 0 ? (campaign.CurrentRaisedAmount / campaign.GoalAmount) * 100 : 0;
                var statusClass = "";
                var statusText = "";
                
                switch (campaign.Status)
                {
                    case InvestDapp.Shared.Enums.CampaignStatus.Draft:
                        statusClass = "status-pending";
                        statusText = "Đang soạn thảo";
                        break;
                    case InvestDapp.Shared.Enums.CampaignStatus.PendingPost:
                        statusClass = "status-pending";
                        statusText = "Chờ bài viết";
                        break;
                    case InvestDapp.Shared.Enums.CampaignStatus.PendingApproval:
                        statusClass = "status-pending";
                        statusText = "Chờ phê duyệt";
                        break;
                    case InvestDapp.Shared.Enums.CampaignStatus.Active:
                        statusClass = "status-active";
                        statusText = "Đang gọi vốn";
                        break;
                    case InvestDapp.Shared.Enums.CampaignStatus.Voting:
                        statusClass = "status-voting";
                        statusText = "Đang bỏ phiếu";
                        break;
                    case InvestDapp.Shared.Enums.CampaignStatus.Completed:
                        statusClass = "status-completed";
                        statusText = "Hoàn thành";
                        break;
                    case InvestDapp.Shared.Enums.CampaignStatus.Failed:
                        statusClass = "status-failed";
                        statusText = "Thất bại";
                        break;
                    default:
                        statusClass = "status-pending";
                        statusText = "Đang chuẩn bị";
                        break;
                }

                <div class="project-card" data-status="@campaign.Status.ToString().ToLower()" data-name="@campaign.Name.ToLower()" data-progress="@progress" data-amount="@campaign.CurrentRaisedAmount" data-created="@campaign.CreatedAt.Ticks">
                    <div class="card-banner">
                        @if (!string.IsNullOrEmpty(campaign.ImageUrl))
                        {
                            <img src="@campaign.ImageUrl" alt="@campaign.Name" class="card-image">
                        }
                        else
                        {
                            <div class="card-image" style="background: var(--gradient); display: flex; align-items: center; justify-content: center; color: white; font-size: 2rem;">
                                <i class="fas fa-rocket"></i>
                            </div>
                        }
                        <span class="status-badge @statusClass">
                            @statusText
                        </span>
                    </div>
                    <div class="card-content">
                        <div class="card-header">
                            <div class="project-logo">
                                @campaign.Name.Substring(0, 1).ToUpper()
                            </div>
                            <div class="project-info">
                                <h3 class="project-name">@campaign.Name</h3>
                                <p class="project-chain">@(campaign.category?.Name ?? "Blockchain")</p>
                            </div>
                        </div>
                        <p class="project-desc">@(campaign.ShortDescription ?? campaign.Description ?? "Mô tả dự án sẽ được cập nhật...")</p>
                        <div class="stats-container">
                            <div class="progress-stats">
                                <span>Tiến độ: <strong>@progress.ToString("F0")%</strong></span>
                                <span>Đã huy động: <strong>@campaign.CurrentRaisedAmount.ToString("F2") BNB</strong></span>
                            </div>
                            <div class="progress-bar-container">
                                <div class="progress-bar-fill" style="width: @progress%"></div>
                            </div>
                        </div>
                        <div class="card-footer">
                            <a href="@Url.Action("Dashboard", new { id = campaign.Id })" class="btn-details">
                                <i class="fas fa-eye"></i> Xem Dashboard
                            </a>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="fas fa-rocket"></i>
                </div>
                <h2 class="empty-title">Chưa Có Dự Án Nào</h2>
                <p class="empty-description">
                    Hiện tại chưa có dự án nào được phê duyệt trên nền tảng. Hãy quay lại sau hoặc tạo dự án đầu tiên của bạn!
                </p>
            </div>
        }
    </div>
</main>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- DOM ELEMENTS ---
            const projectGrid = document.getElementById('project-grid');
            const statusFilters = document.querySelectorAll('.filter-btn');
            const searchInput = document.getElementById('search-input');
            const sortSelect = document.getElementById('sort-select');
            const allCards = document.querySelectorAll('.project-card');

            // --- FILTER AND SORT FUNCTIONS ---
            const applyFilters = () => {
                const activeFilter = document.querySelector('.filter-btn.active');
                const status = activeFilter ? activeFilter.dataset.status : 'all';
                const searchTerm = searchInput.value.toLowerCase().trim();
                const sortBy = sortSelect.value;

                let visibleCards = Array.from(allCards);

                // Status filter
                if (status !== 'all') {
                    visibleCards = visibleCards.filter(card => {
                        const cardStatus = card.dataset.status;
                        return cardStatus === status;
                    });
                }

                // Search filter
                if (searchTerm) {
                    visibleCards = visibleCards.filter(card => {
                        const cardName = card.dataset.name;
                        return cardName.includes(searchTerm);
                    });
                }

                // Hide all cards first
                allCards.forEach(card => {
                    card.style.display = 'none';
                });

                // Sort visible cards
                visibleCards.sort((a, b) => {
                    switch (sortBy) {
                        case 'progress':
                            return parseFloat(b.dataset.progress) - parseFloat(a.dataset.progress);
                        case 'amount':
                            return parseFloat(b.dataset.amount) - parseFloat(a.dataset.amount);
                        case 'newest':
                        default:
                            return parseInt(b.dataset.created) - parseInt(a.dataset.created);
                    }
                });

                // Show filtered and sorted cards
                visibleCards.forEach(card => {
                    card.style.display = 'flex';
                });

                // Show no results message if needed
                const noResultsMsg = document.querySelector('.no-results');
                if (noResultsMsg) noResultsMsg.remove();

                if (visibleCards.length === 0 && allCards.length > 0) {
                    const noResults = document.createElement('div');
                    noResults.className = 'no-results';
                    noResults.textContent = 'Không tìm thấy dự án nào phù hợp với bộ lọc của bạn.';
                    projectGrid.appendChild(noResults);
                }
            };

            // --- EVENT LISTENERS ---
            statusFilters.forEach(btn => {
                btn.addEventListener('click', () => {
                    statusFilters.forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                    applyFilters();
                });
            });

            searchInput.addEventListener('input', applyFilters);
            sortSelect.addEventListener('change', applyFilters);

            // --- ANIMATE PROGRESS BARS ---
            const progressBars = document.querySelectorAll('.progress-bar-fill');
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const bar = entry.target;
                        const width = bar.style.width;
                        bar.style.width = '0%';
                        setTimeout(() => {
                            bar.style.width = width;
                        }, 100);
                        observer.unobserve(bar);
                    }
                });
            });

            progressBars.forEach(bar => observer.observe(bar));
        });
    </script>
}
