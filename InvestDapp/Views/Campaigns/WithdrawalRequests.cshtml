@model InvestDapp.Models.Campaign
@{
    ViewData["Title"] = "Yêu cầu rút vốn - " + Model.Name;
    Layout = "~/Pages/_Layout.cshtml";
}

@section Styles {
<style>
  /* ===== Reset viền & chống tràn ngang ===== */
  *{box-sizing:border-box}
  html,body{overflow-x:hidden}

  /* ===== Tokens (giữ palette cũ) ===== */
  :root{
    --shell-w:1200px;
    --pad:16px;
    --radius:14px;
    --muted:#8a93b3;
    --pri:#00aaff; --pri2:#00c6ff;
    --ok:#22c55e; --warn:#ffb800; --bad:#ff6b6b;
    --card-bg:linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
    --card-br:1px solid rgba(255,255,255,.10);
  }

  /* ===== Khung trang ===== */
  .wd-shell{
    max-width:var(--shell-w);
    margin:calc(var(--header-h) + 26px) auto 64px;
    padding:0 var(--pad);
  }

  /* ===== Hero gọn, cân lề ===== */
  .wd-hero{
    border:var(--card-br); border-radius:var(--radius);
    background:var(--card-bg); box-shadow:var(--shadow);
    padding:20px;
  }
  .wd-hero-row{
    display:flex; gap:14px; align-items:flex-start; justify-content:space-between; flex-wrap:wrap;
  }
  .wd-title{margin:0; font:800 clamp(22px,2.5vw,30px)/1.15 'Plus Jakarta Sans',ui-sans-serif}
  .wd-sub{margin:6px 0 0; color:var(--muted)}
  .chip{
    display:inline-flex; gap:8px; align-items:center; padding:8px 12px; border-radius:999px;
    border:1px solid rgba(255,255,255,.14); font-weight:800; font-size:.9rem; white-space:nowrap;
    background:rgba(255,255,255,.05)
  }
  .chip.pending{color:var(--warn); border-color:rgba(255,184,0,.35); background:rgba(255,184,0,.12)}
  .chip.approved{color:var(--ok); border-color:rgba(34,197,94,.35); background:rgba(34,197,94,.10)}
  .chip.rejected{color:var(--bad); border-color:rgba(255,107,107,.35); background:rgba(255,107,107,.10)}

  /* ===== Nút quay lại ===== */
  .wd-back{
    display:inline-flex; gap:8px; align-items:center; font-weight:700; text-decoration:none;
    border:1px solid rgba(255,255,255,.12); border-radius:12px; padding:10px 12px; margin:14px 0 10px;
    background:linear-gradient(180deg, rgba(255,255,255,.05), rgba(255,255,255,.03)); color:var(--fg);
  }
  .wd-back:hover{transform:translateY(-1px)}

  /* ===== Thống kê tóm tắt ===== */
  .wd-stats{
    display:grid; gap:12px; margin:14px 0 22px;
    grid-template-columns:repeat(4,1fr);
  }
  @@media (max-width:992px){ .wd-stats{grid-template-columns:repeat(2,1fr)} }
  @@media (max-width:520px){ .wd-stats{grid-template-columns:1fr} }
  .wd-stat{
    border:var(--card-br); border-radius:12px; background:rgba(255,255,255,.04); padding:14px; text-align:center
  }
  .wd-stat i{font-size:1.25rem; display:block; margin-bottom:6px; color:var(--pri)}
  .wd-stat .v{font:800 1.25rem/1 ui-monospace,'Fira Code',monospace}
  .wd-stat .l{color:var(--muted); font-size:.86rem}

  /* ===== Danh sách requests ===== */
  .wd-list{display:grid; gap:16px}
  .wd-card{
    border:var(--card-br); border-radius:var(--radius); background:var(--card-bg); box-shadow:var(--shadow);
    padding:16px; opacity:0; transform:translateY(16px); animation:rise .5s ease forwards;
  }

  /* Header trong card */
  .wd-card-h{
    display:flex; align-items:center; justify-content:space-between; gap:10px; padding-bottom:12px;
    border-bottom:1px solid rgba(255,255,255,.10); margin-bottom:12px;
  }
  .wd-card-h h3{margin:0; font-weight:800; font-size:1.05rem; display:flex; align-items:center; gap:10px; color:var(--pri)}
  .badge{
    display:inline-flex; gap:8px; align-items:center; padding:8px 12px; border-radius:999px; font-weight:800; font-size:.85rem;
    border:1px solid rgba(255,255,255,.14); background:rgba(255,255,255,.05);
  }
  .badge.pending{color:var(--warn); background:rgba(255,184,0,.12); border-color:rgba(255,184,0,.3)}
  .badge.approved{color:var(--ok); background:rgba(34,197,94,.12); border-color:rgba(34,197,94,.28)}
  .badge.rejected{color:var(--bad); background:rgba(255,107,107,.12); border-color:rgba(255,107,107,.3)}
  .badge.executed{color:var(--pri); background:rgba(0,170,255,.12); border-color:rgba(0,170,255,.28)}

  /* Nội dung 2 cột trong card (mô tả | tóm tắt vote) */
  .wd-grid{display:grid; gap:16px; grid-template-columns:1fr 320px}
  @@media (max-width:900px){ .wd-grid{grid-template-columns:1fr} }

  .info p{margin:0 0 10px}
  .info strong{color:var(--pri)}
  .addr{font-family:'Fira Code',monospace; font-size:.9rem; color:var(--muted); word-break:break-all}
  .tx{font-family:'Fira Code',monospace; font-size:.8rem; color:var(--muted); word-break:break-all}

  .vote-box{border:1px solid rgba(255,255,255,.10); border-radius:12px; background:rgba(255,255,255,.03); padding:14px}
  .vote-box h4{margin:0 0 8px; color:var(--pri); text-align:center; font-weight:800; font-size:1rem}
  .vote-stats{display:flex; justify-content:space-between; font-size:.9rem; margin-bottom:6px}
  .agree{color:var(--ok)} .disagree{color:var(--bad)}
  .bar{height:12px; border-radius:999px; background:rgba(255,255,255,.06); border:1px solid rgba(255,255,255,.10); overflow:hidden}
  .fill-agree{height:100%; float:left; background:linear-gradient(90deg, #28a745, #20c997)}
  .fill-disagree{height:100%; float:left; background:linear-gradient(90deg, #dc3545, #e74c3c)}
  .deadline{
    margin-top:8px; text-align:center; color:var(--warn); font-size:.88rem; background:rgba(255,184,0,.10);
    border-radius:8px; padding:8px
  }

  /* Danh sách voter */
  .voters{margin-top:12px}
  .v-head{display:flex; justify-content:space-between; align-items:center; margin-bottom:8px}
  .v-head h4{margin:0; color:var(--pri); font-size:1rem}
  .v-list{display:grid; gap:8px; max-height:300px; overflow:auto}
  .v-item{
    display:flex; justify-content:space-between; align-items:center; padding:10px 12px; border-radius:10px;
    background:rgba(255,255,255,.03); border-left:4px solid transparent;
  }
  .v-item.agreed{border-left-color:var(--ok)} .v-item.disagreed{border-left-color:var(--bad)}
  .v-addr{font-family:'Fira Code',monospace; font-size:.9rem}
  .v-meta{display:flex; gap:12px; align-items:center; color:var(--muted); font-size:.82rem}

  /* Vùng actions */
  .actions{display:flex; gap:10px; margin-top:10px; flex-wrap:wrap}
  .btn{
    display:inline-flex; gap:8px; align-items:center; padding:12px 16px; border-radius:10px; border:0; font-weight:800; cursor:pointer;
    background:linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.03)); color:var(--fg);
  }
  .btn-success{background:linear-gradient(135deg,#28a745,#20c997); color:#fff}
  .btn-danger{background:linear-gradient(135deg,#dc3545,#e74c3c); color:#fff}
  .btn[disabled]{opacity:.6; cursor:not-allowed}

  /* Empty */
  .empty{
    border:var(--card-br); border-radius:var(--radius); background:var(--card-bg); box-shadow:var(--shadow);
    text-align:center; padding:48px 16px; color:var(--muted)
  }
  .empty i{font-size:3rem; opacity:.6; display:block; margin-bottom:10px}

  /* Hiệu ứng vào */
  @@keyframes rise{to{opacity:1; transform:translateY(0)}}
</style>
}

<div class="wd-shell">
  <!-- HERO -->
  <section class="wd-hero">
    <div class="wd-hero-row">
      <div>
        <h1 class="wd-title"><i class="fas fa-vote-yea"></i> Yêu cầu rút vốn</h1>
        <p class="wd-sub">@Model.Name</p>
      </div>
      <div>
        @switch (Model.ApprovalStatus)
        {
          case InvestDapp.Shared.Enums.ApprovalStatus.Pending:
            <span class="chip pending"><i class="fas fa-clock"></i> Chờ duyệt</span>; break;
          case InvestDapp.Shared.Enums.ApprovalStatus.Approved:
            <span class="chip approved"><i class="fas fa-check-circle"></i> Đã duyệt</span>; break;
          case InvestDapp.Shared.Enums.ApprovalStatus.Rejected:
            <span class="chip rejected"><i class="fas fa-times-circle"></i> Từ chối</span>; break;
        }
      </div>
    </div>
  </section>

  <!-- Back -->
  <a href="@Url.Action("Dashboard", new { id = Model.Id })" class="wd-back">
    <i class="fas fa-arrow-left"></i> Quay lại Dashboard
  </a>

  <!-- Summary Statistics -->
  <section class="wd-stats">
    @{
      var pendingCount = Model.WithdrawalRequests?.Count(r => r.Status == InvestDapp.Shared.Enums.WithdrawalStatus.Pending) ?? 0;
      var approvedCount = Model.WithdrawalRequests?.Count(r => r.Status == InvestDapp.Shared.Enums.WithdrawalStatus.Approved) ?? 0;
      var rejectedCount = Model.WithdrawalRequests?.Count(r => r.Status == InvestDapp.Shared.Enums.WithdrawalStatus.Rejected) ?? 0;
      var executedCount = Model.WithdrawalRequests?.Count(r => r.Status == InvestDapp.Shared.Enums.WithdrawalStatus.Executed) ?? 0;
    }
    <div class="wd-stat">
      <i class="fas fa-clock"></i>
      <div class="v">@pendingCount</div>
      <div class="l">Đang chờ bỏ phiếu</div>
    </div>
    <div class="wd-stat">
      <i class="fas fa-thumbs-up"></i>
      <div class="v">@approvedCount</div>
      <div class="l">Đã được phê duyệt</div>
    </div>
    <div class="wd-stat">
      <i class="fas fa-thumbs-down"></i>
      <div class="v">@rejectedCount</div>
      <div class="l">Đã bị từ chối</div>
    </div>
    <div class="wd-stat">
      <i class="fas fa-check-circle"></i>
      <div class="v">@executedCount</div>
      <div class="l">Đã thực thi</div>
    </div>
  </section>

  <!-- Withdrawal Requests -->
  <section class="wd-list">
    @if (Model.WithdrawalRequests?.Any() == true)
    {
      @foreach (var request in Model.WithdrawalRequests.OrderByDescending(r => r.CreatedAt))
      {
        <article class="wd-card">
          <!-- Header -->
          <div class="wd-card-h">
            <h3><i class="fas fa-money-bill-wave"></i> Yêu cầu rút vốn #@request.Id</h3>
            @{
              string sClass = "", sIcon = "", sText = "";
              switch (request.Status)
              {
                case InvestDapp.Shared.Enums.WithdrawalStatus.Pending:   sClass="pending";  sIcon="fa-clock";        sText="Đang bỏ phiếu"; break;
                case InvestDapp.Shared.Enums.WithdrawalStatus.Approved:  sClass="approved"; sIcon="fa-thumbs-up";    sText="Đã phê duyệt";  break;
                case InvestDapp.Shared.Enums.WithdrawalStatus.Rejected:  sClass="rejected"; sIcon="fa-thumbs-down";  sText="Đã từ chối";    break;
                case InvestDapp.Shared.Enums.WithdrawalStatus.Executed:  sClass="executed"; sIcon="fa-check-circle"; sText="Đã thực thi";   break;
              }
            }
            <span class="badge @sClass"><i class="fas @sIcon"></i> @sText</span>
          </div>

          <!-- Body -->
          <div class="wd-grid">
            <!-- Info -->
            <div class="info">
              <p><strong>Lý do rút vốn:</strong></p>
              <p>@request.Reason</p>

              <p><strong>Người yêu cầu:</strong></p>
              <p class="addr">@request.RequesterAddress</p>

              <p><strong>Thời gian tạo:</strong> @request.CreatedAt.ToString("dd/MM/yyyy HH:mm")</p>

              @if (!string.IsNullOrEmpty(request.txhash))
              {
                <p><strong>Transaction Hash:</strong></p>
                <p class="tx">@request.txhash</p>
              }
            </div>

            <!-- Vote summary -->
            <div class="vote-box">
              <h4><i class="fas fa-chart-pie"></i> Kết quả bỏ phiếu</h4>
              @{
                var campaignTotal = (Model.TotalInvestmentsOnCompletion > 0) ? Model.TotalInvestmentsOnCompletion : Model.CurrentRaisedAmount;
                var agreeBNB = Convert.ToDouble(request.AgreeVotes) / 1000000000000000000.0;
                var disagreeBNB = Convert.ToDouble(request.DisagreeVotes) / 1000000000000000000.0;
                var agreePct = (campaignTotal > 0) ? (agreeBNB / campaignTotal * 100.0) : 0.0;
                var disagreePct = (campaignTotal > 0) ? (disagreeBNB / campaignTotal * 100.0) : 0.0;
                var _agreeStr = agreePct.ToString("F2", System.Globalization.CultureInfo.InvariantCulture);
                var _disagreeStr = disagreePct.ToString("F2", System.Globalization.CultureInfo.InvariantCulture);
              }
              <div class="vote-stats">
                <span class="agree"><i class="fas fa-thumbs-up"></i> Ủng hộ: @agreePct.ToString("F1")%</span>
                <span class="disagree"><i class="fas fa-thumbs-down"></i> Phản đối: @disagreePct.ToString("F1")%</span>
              </div>
              <div class="bar">
                <div class="fill-agree" style="width:@_agreeStr%"></div>
                <div class="fill-disagree" style="width:@_disagreeStr%"></div>
              </div>

              @if (request.Status == InvestDapp.Shared.Enums.WithdrawalStatus.Pending)
              {
                <div class="deadline">
                  <i class="fas fa-hourglass-half"></i> Hết hạn: @request.VoteEndTime.ToString("dd/MM/yyyy HH:mm")
                </div>
              }
            </div>
          </div>

          <!-- Voters -->
          @if (request.Votes?.Any() == true)
          {
            <div class="voters">
              <div class="v-head">
                <h4><i class="fas fa-users"></i> Danh sách người bỏ phiếu</h4>
                <span class="muted">@request.Votes.Count người đã vote</span>
              </div>
              <div class="v-list">
                @foreach (var vote in request.Votes.OrderByDescending(v => v.CreatedAt))
                {
                  <div class="v-item @(vote.Agreed ? "agreed" : "disagreed")">
                    <span class="v-addr">@vote.VoterAddress.Substring(0, 6)...@vote.VoterAddress.Substring(vote.VoterAddress.Length - 4)</span>
                    <div class="v-meta">
                      <span>@vote.VoteWeight.ToString("F2") BNB</span>
                      <span class="@(vote.Agreed ? "agree" : "disagree")">
                        <i class="fas @(vote.Agreed ? "fa-thumbs-up" : "fa-thumbs-down")"></i>
                        @(vote.Agreed ? "Ủng hộ" : "Phản đối")
                      </span>
                    </div>
                  </div>
                }
              </div>
            </div>
          }
        </article>
      }
    }
    else
    {
      <div class="empty">
        <i class="fas fa-inbox"></i>
        <h3>Chưa có yêu cầu rút vốn nào</h3>
        <p>Dự án này chưa có yêu cầu rút vốn nào được tạo.</p>
      </div>
    }
  </section>
</div>

@section Scripts {
<script>
  function voteOnWithdrawal(requestId, agree) {
      const actionText = agree ? 'ủng hộ' : 'phản đối';
      if (!confirm(`Bạn có chắc chắn muốn ${actionText} yêu cầu rút vốn này không? Hành động này không thể hoàn tác.`)) return;

      // Always request authoritative pending withdrawal id from server API before voting.
      (async () => {
          try {
              const apiRes = await fetch(`/api/campaigns/@Model.Id/pending-withdrawal`);
              if (!apiRes.ok) {
                  const txt = await apiRes.text();
                  throw new Error(txt || 'Không thể lấy thông tin yêu cầu rút vốn từ server.');
              }
              const payload = await apiRes.json();
              const resolved = Number(payload?.requestId ?? payload?.requestIdOnChain ?? requestId);
              if (!Number.isFinite(resolved)) throw new Error('Server không trả về requestId hợp lệ.');

              await voteOnWithdrawalRequest(resolved, agree);
          } catch (err) {
              console.error('Failed to resolve pending withdrawal from API:', err);
              alert(err.message || 'Không thể xác định yêu cầu rút vốn. Vui lòng thử lại sau.');
              window.location.reload();
          }
      })();
  }

  async function voteOnWithdrawalRequest(requestId, agree) {
      try {
          // Kiểm tra MetaMask và kết nối web3
          if (typeof window.ethereum === 'undefined') {
              alert('Vui lòng cài đặt MetaMask để thực hiện giao dịch!');
              return;
          }

          // ensure web3/contract initialized (Dashboard/Details pattern)
          if (!window.web3 || !window.contract || !window.userAccount) {
              const ok = (typeof initializeWeb3 === 'function') ? await initializeWeb3() : false;
              if (!ok) return;
          }

          // Preflight: ensure caller is an on-chain investor and has non-zero balance
          let onChainBalanceWei = ethers.constants.Zero;
          try {
              onChainBalanceWei = await contract.campaignInvestorBalances(@Model.Id, userAccount);
              if (!onChainBalanceWei || onChainBalanceWei.eq(ethers.constants.Zero)) {
                  alert('Chỉ nhà đầu tư mới có quyền bỏ phiếu (on-chain balance = 0).');
                  return;
              }
          } catch (readErr) {
              console.error('Không thể kiểm tra on-chain investor balance:', readErr);
              alert('Không thể kiểm tra trạng thái nhà đầu tư trên blockchain. Vui lòng thử lại.');
              return;
          }

          // Hiển thị loading state
          const voteButtons = document.querySelectorAll(`[onclick*="voteOnWithdrawal(${requestId}"]`);
          voteButtons.forEach(btn => {
              btn.disabled = true;
              btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang xử lý...';
          });

          // Send the transaction (contract already weights votes by on-chain balances)
          try {
              const tx = await contract.voteForWithdrawal(@Model.Id, requestId, agree, { gasLimit: 150000 });
              alert('Bỏ phiếu đã được gửi, chờ xác nhận...');
              const receipt = await tx.wait();
              if (receipt.status === 1) {
                  alert('Bỏ phiếu thành công!');
                  window.location.reload();
              } else {
                  alert('Giao dịch bị thất bại trên blockchain.');
                  window.location.reload();
              }
          } catch (txErr) {
              console.error('Lỗi gửi giao dịch vote:', txErr);
              if (txErr && (txErr.code === 4001 || txErr.code === 'ACTION_REJECTED')) alert('Bạn đã huỷ giao dịch.');
              else alert('Có lỗi khi gửi giao dịch. Vui lòng thử lại.');
              window.location.reload();
          }

      } catch (error) {
          console.error('Lỗi khi bỏ phiếu:', error);
          alert('Có lỗi xảy ra khi bỏ phiếu. Vui lòng thử lại!');
          window.location.reload();
      }
  }

  // Nhẹ hiệu ứng vào theo thứ tự
  document.addEventListener('DOMContentLoaded', function() {
    const cards = document.querySelectorAll('.wd-card');
    cards.forEach((card, i)=> card.style.animationDelay = `${i*0.06}s`);
  });
</script>
}
