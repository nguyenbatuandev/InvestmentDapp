@model InvestDapp.Models.Campaign
@{
    ViewData["Title"] = Model.Name;
    Layout = "~/Pages/_Layout.cshtml";
}

@Html.AntiForgeryToken()

@section Styles {
<style>
  /* ====== RESET NHẸ & KHUNG TRANG ====== */
  *{ box-sizing: border-box; }
  html,body{ overflow-x:hidden; }
  .campaign-page{ max-width:1200px; margin: calc(var(--header-h) + 28px) auto 60px; padding: 0 16px; }

  /* ====== HERO ====== */
  .hero{
    position:relative; overflow:hidden;
    border:1px solid var(--border); border-radius: var(--radius);
    background: linear-gradient(180deg, rgba(108,240,255,.10), rgba(155,107,255,.06));
    padding: 28px 22px;
  }
  .hero::after{
    content:""; position:absolute; inset:-40% -10% auto auto; width:420px; height:420px;
    background: radial-gradient(closest-side, rgba(255,255,255,.08), rgba(255,255,255,0));
    transform: translate(12%, -12%); pointer-events:none; filter: blur(2px);
  }
  .hero h1{ margin:0 0 8px; font: 800 clamp(22px, 2.4vw, 30px)/1.15 'Plus Jakarta Sans', ui-sans-serif; letter-spacing:.2px; }
  .hero p{ margin:0; color: var(--muted); font-size: clamp(14px, 1.7vw, 16px); }
  .chip{
    display:inline-flex; align-items:center; gap:8px; margin-top:10px;
    padding:8px 12px; border-radius:12px; font-weight:700; font-size:.9rem; border:1px solid var(--border);
    background: rgba(255,255,255,.05);
  }
  .chip.pending{ color:#ffc107; border-color: rgba(255,193,7,.35); background: rgba(255,193,7,.12); }
  .chip.approved{ color:#00d4aa; border-color: rgba(0,212,170,.35); background: rgba(0,212,170,.10); }
  .chip.rejected{ color:#ff6b6b; border-color: rgba(255,107,107,.35); background: rgba(255,107,107,.10); }
  .chip.completed{ color:#28a745; border-color: rgba(40,167,69,.35); background: rgba(40,167,69,.10); }

  /* ====== LƯỚI NỘI DUNG ====== */
  .grid{
    display:grid; gap: 22px; margin-top: 18px;
    grid-template-columns: 2fr 1fr;
  }
  @@media (max-width: 992px){ .grid{ grid-template-columns: 1fr; } }

  /* ====== CARD CHUẨN ====== */
  .card{
    border:1px solid var(--border); border-radius: var(--radius);
    background: var(--glass); box-shadow: var(--shadow); padding: 18px;
  }
  .card h3{
    margin:0 0 12px; font-size: 1.05rem; font-weight:800; letter-spacing:.2px; color: var(--primary);
    display:flex; align-items:center; gap:10px;
  }

  /* ====== STATS ====== */
  .stats{
    display:grid; gap: 14px; grid-template-columns: repeat(4, 1fr); margin-top: 16px;
  }
  @@media (max-width: 992px){ .stats{ grid-template-columns: repeat(2,1fr); } }
  @@media (max-width: 520px){ .stats{ grid-template-columns: 1fr; } }
  .stat{
    border:1px solid var(--border); background: rgba(255,255,255,.04);
    border-radius: 12px; padding: 16px; text-align:center; transition: transform .15s;
  }
  .stat:hover{ transform: translateY(-2px); }
  .stat i{ font-size: 1.4rem; color: var(--primary); margin-bottom: 6px; display:block; }
  .stat .val{ font: 800 1.3rem/1 'Fira Code', ui-monospace; }
  .stat .lbl{ color: var(--muted); font-size: .85rem; }

  /* ====== PROGRESS ====== */
  .progress-box{ margin-top: 6px; }
  .progress-head{ display:flex; align-items:center; justify-content:space-between; margin-bottom: 6px; }
  .progress{ height: 12px; border-radius: 999px; background: rgba(255,255,255,.06); border:1px solid var(--border); overflow:hidden; }
  .progress .fill{ height:100%; width:0; background: linear-gradient(90deg, var(--primary), var(--accent)); transition: width .6s ease; }
  .progress-info{ display:flex; justify-content:space-between; color: var(--muted); font-size:.85rem; margin-top: 4px; }

  /* ====== MÔ TẢ ====== */
  .desc{ color: var(--fg); line-height: 1.75; }
  .desc p{ margin: 0 0 10px; }
  .desc img{ max-width:100%; height:auto; border-radius:10px; border:1px solid var(--border); }
  .desc a{ color: var(--primary); text-decoration: underline; }

  /* ====== SIDEBAR ====== */
  .owner{
    display:flex; align-items:center; gap:12px; padding: 12px; border-radius: 12px;
    background: rgba(255,255,255,.03); border:1px solid var(--border);
  }
  .owner .ava{
    width:44px; height:44px; border-radius:50%; display:grid; place-items:center;
    background: conic-gradient(from 160deg,#6cf0ff,#9b6bff,#6cf0ff); color:#04121c; font-weight:900;
    border: 1px solid var(--border);
  }
  .owner .addr{ color: var(--muted); font-family: ui-monospace, 'Fira Code', monospace; font-size: .9rem; word-break: break-all; }

  .media img{ width:100%; max-width:100%; display:block; border-radius: 12px; border:1px solid var(--border); }

  .actions{ display:grid; gap:10px; }
  .act{ display:inline-flex; align-items:center; justify-content:center; gap:8px; padding:12px 14px; border-radius:12px; border:1px solid var(--border); font-weight:800; text-decoration:none; }
  .act.primary{ background: linear-gradient(135deg, rgba(108,240,255,.18), rgba(155,107,255,.18)); color: var(--fg); }
  .act.secondary{ background: rgba(255,255,255,.04); color: var(--fg); }
  .act:disabled, .act[disabled]{ opacity:.6; cursor:not-allowed; }

  /* ====== CARDS NHỎ ====== */
  .side-card + .side-card{ margin-top: 16px; }
  .side-title{ margin:0 0 10px; font-weight:800; color: var(--primary); font-size: 1rem; }

  /* ====== MODAL SỬA LẠI (không tràn viền) ====== */
  .modal{ position: fixed; z-index: 9999; inset:0; display:none; background: rgba(0,0,0,.6); }
  .modal .modal-content{
    width: min(520px, 92vw); max-height: 84vh; overflow:auto; margin: 6vh auto 0;
    padding: 18px; border-radius: 14px; border:1px solid var(--border); background: rgba(8,10,14,.96);
  }
  .modal .row{ display:grid; gap:10px; }
  .modal textarea, .modal input[type="number"]{
    width:100%; padding: 10px 12px; background: rgba(255,255,255,.03); border:1px solid var(--border);
    border-radius: 10px; color: var(--fg);
  }
  .modal .footer{ display:flex; gap:10px; justify-content:flex-end; margin-top: 12px; }
  .btn-flat{ padding:10px 12px; border-radius: 10px; border:1px solid var(--border); background: rgba(255,255,255,.04); color: var(--fg); }
  .btn-grad{ padding:10px 12px; border-radius: 10px; border:0; background: linear-gradient(135deg,#28a745,#20c997); color:#fff; font-weight:800; }
</style>
}


<div class="campaign-page">
  <!-- HERO -->
  <section class="hero">
    <h1>@Model.Name</h1>
    <p>@Model.ShortDescription</p>

    @switch (Model.ApprovalStatus)
    {
      case InvestDapp.Shared.Enums.ApprovalStatus.Pending:
        <span class="chip pending"><i class="fas fa-clock"></i> Chờ duyệt</span>; break;
      case InvestDapp.Shared.Enums.ApprovalStatus.Approved:
        <span class="chip approved"><i class="fas fa-check-circle"></i> Đã duyệt</span>; break;
      case InvestDapp.Shared.Enums.ApprovalStatus.Rejected:
        <span class="chip rejected"><i class="fas fa-times-circle"></i> Từ chối</span>; break;
    }

    <!-- STAT BLOCK ngay trong hero cho cân bố cục -->
    <div class="stats">
      <div class="stat">
        <i class="fas fa-coins"></i>
        <div class="val">@Model.GoalAmount BNB</div>
        <div class="lbl">Mục tiêu</div>
      </div>
      <div class="stat">
        <i class="fas fa-chart-line"></i>
        <div class="val">@Model.CurrentRaisedAmount BNB</div>
        <div class="lbl">Đã huy động</div>
      </div>
      <div class="stat">
        <i class="fas fa-users"></i>
        <div class="val">@Model.InvestorCount</div>
        <div class="lbl">Nhà đầu tư</div>
      </div>
      <div class="stat">
        <i class="fas fa-calendar-alt"></i>
        <div class="val">@((Model.EndTime - DateTime.UtcNow).Days)</div>
        <div class="lbl">Ngày còn lại</div>
      </div>
    </div>
  </section>

  <!-- GRID -->
  <section class="grid">
    <!-- MAIN -->
    <article class="card">
      <h3><i class="fas fa-file-alt"></i> Mô tả chi tiết</h3>
      <div class="desc">
        @Html.Raw(Model.Description?.Replace("\n", "<br/>"))
      </div>

      @if (Model.Posts?.Any() == true)
      {
        <div style="margin-top:18px;">
          <h3><i class="fas fa-newspaper"></i> Bài viết mới nhất</h3>
          @foreach (var post in Model.Posts.Take(3).OrderByDescending(p => p.CreatedAt))
          {
            <div class="card" style="padding:12px; margin-bottom:10px;">
              <h4 style="margin:0 0 6px; color: var(--fg); font-weight:800;">
                <a href="@Url.Action("PostDetails", new { id = post.Id })" style="color:var(--primary); text-decoration:none;">@post.Title</a>
              </h4>
              <small style="color:var(--muted)">@post.CreatedAt.ToString("dd/MM/yyyy HH:mm")</small>
            </div>
          }
        </div>
      }
    </article>

    <!-- SIDEBAR -->
    <aside class="side">
      <!-- PROGRESS -->
      <div class="card side-card">
        <h3><i class="fas fa-tasks"></i> Tiến độ</h3>
        <div class="progress-box">
          <div class="progress-head">
            <span style="font-weight:700">Hoàn thành</span>
            <span style="color:var(--primary); font-weight:800;">
              @(Model.GoalAmount > 0 ? (Model.CurrentRaisedAmount / Model.GoalAmount * 100).ToString("F1") : "0")%
            </span>
          </div>
          <div class="progress">
            @{
              var _pct = Model.GoalAmount > 0 ? (Model.CurrentRaisedAmount / Model.GoalAmount * 100) : 0;
              var _pctStr = _pct.ToString("F2", System.Globalization.CultureInfo.InvariantCulture);
            }
            <div class="fill" style="width:@_pctStr%"></div>
          </div>
          <div class="progress-info">
            <span>@Model.CurrentRaisedAmount BNB</span>
            <span>@Model.GoalAmount BNB</span>
          </div>
          <div class="progress-info" style="margin-top:4px">
            <i class="fas fa-clock" aria-hidden="true"></i>
            <span style="margin-left:6px">Kết thúc: <b>@Model.EndTime.ToString("dd/MM/yyyy HH:mm")</b></span>
          </div>
        </div>
      </div>

      <!-- OWNER -->
      <div class="card side-card">
        <h3><i class="fas fa-user-circle"></i> Người tạo</h3>
        <div class="owner">
          <div class="ava">@Model.OwnerAddress?.Substring(0,2).ToUpper()</div>
          <div>
            <div style="font-weight:800">Chủ dự án</div>
            <div class="addr">@Model.OwnerAddress</div>
          </div>
        </div>
      </div>

      @if (!string.IsNullOrEmpty(Model.ImageUrl))
      {
        <div class="card side-card media">
          <h3><i class="fas fa-image"></i> Hình ảnh</h3>
          <img src="@Model.ImageUrl" alt="@Model.Name" />
        </div>
      }

      <!-- ACTIONS -->
      <div class="card side-card">
        <div class="actions">
          @{
            var currentUserWallet = User.FindFirst("WalletAddress")?.Value;
            var isOwner = currentUserWallet == Model.OwnerAddress;
            var isInvestor = Model.Investments?.Any(i => i.InvestorAddress.Equals(currentUserWallet, StringComparison.OrdinalIgnoreCase)) ?? false;
          }

          <a href="@Url.Action("Dashboard", new { id = Model.Id })" class="act primary">
            <i class="fas fa-tachometer-alt"></i> Xem Dashboard
          </a>

          @if (isOwner)
          {
            <!-- Owner actions (UI only, giữ nguyên onclick/flow) -->
            @if (Model.ApprovalStatus == InvestDapp.Shared.Enums.ApprovalStatus.Approved)
            {
              @switch (Model.Status)
              {
                case InvestDapp.Shared.Enums.CampaignStatus.Active:
                  <button class="act primary" onclick="requestWithdrawal(@Model.Id)">
                    <i class="fas fa-hand-holding-usd"></i> Yêu cầu rút vốn
                  </button>
                  break;

                case InvestDapp.Shared.Enums.CampaignStatus.Voting:
                  var hasPending = Model.WithdrawalRequests?.Any(w => w.Status == InvestDapp.Shared.Enums.WithdrawalStatus.Pending) == true;
                  var rejectedCount = Model.WithdrawalRequests?.Count(w => w.Status == InvestDapp.Shared.Enums.WithdrawalStatus.Rejected) ?? 0;
                  var canCreateNewAttempt = !hasPending && rejectedCount < 2;

                  @if (hasPending)
                  {
                    <button class="act secondary" onclick="checkWithdrawalExecution(@Model.Id)">
                      <i class="fas fa-check-circle"></i> Kiểm tra kết quả vote
                    </button>
                  }
                  else if (canCreateNewAttempt)
                  {
                    <button class="act primary" onclick="requestWithdrawal(@Model.Id)">
                      <i class="fas fa-hand-holding-usd"></i> Yêu cầu rút vốn (Lần @((Model.WithdrawalRequests?.Count() ?? 0) + 1))
                    </button>
                  }
                  else
                  {
                    <span class="act secondary" style="cursor:default; opacity:.85;">
                      <i class="fas fa-vote-yea"></i> Đang trong quá trình vote
                    </span>
                  }
                  break;

                case InvestDapp.Shared.Enums.CampaignStatus.Completed:
                  <button class="act primary" onclick="addProfitToCampaign(@Model.Id)">
                    <i class="fas fa-plus-circle"></i> Thêm lợi nhuận
                  </button>
                  break;

                case InvestDapp.Shared.Enums.CampaignStatus.Failed:
                  <span class="act secondary" style="cursor:default; opacity:.85;">
                    <i class="fas fa-times-circle"></i> Chiến dịch đã thất bại
                  </span>
                  break;

                default:
                  <span class="act secondary" style="cursor:default; opacity:.85;">
                    <i class="fas fa-info-circle"></i> Không có hành động khả dụng
                  </span>
                  break;
              }
            }
          }
          else if (Model.ApprovalStatus == InvestDapp.Shared.Enums.ApprovalStatus.Pending)
          {
            <span class="act secondary" style="cursor:default; opacity:.85;">
              <i class="fas fa-clock"></i> Chờ duyệt chiến dịch
            </span>
          }
          else if (Model.ApprovalStatus == InvestDapp.Shared.Enums.ApprovalStatus.Rejected)
          {
            <span class="act secondary" style="cursor:default; opacity:.85;">
              <i class="fas fa-times-circle"></i> Chiến dịch bị từ chối
            </span>
          }
          else if (Model.ApprovalStatus == InvestDapp.Shared.Enums.ApprovalStatus.Approved)
          {
            @switch (Model.Status)
            {
              case InvestDapp.Shared.Enums.CampaignStatus.Active:
                <button class="act primary" onclick="investInCampaign(@Model.Id)">
                  <i class="fas fa-dollar-sign"></i> Đầu tư ngay
                </button>
                break;

              case InvestDapp.Shared.Enums.CampaignStatus.Voting:
                @if (isInvestor)
                {
                  <button class="act primary" onclick="voteOnCampaign(@Model.Id)">
                    <i class="fas fa-vote-yea"></i> Bỏ phiếu
                  </button>
                  @if (Model.WithdrawalRequests?.Any(w => w.Status == InvestDapp.Shared.Enums.WithdrawalStatus.Pending) == true)
                  {
                    <button class="act secondary" onclick="checkWithdrawalExecution(@Model.Id)">
                      <i class="fas fa-check-circle"></i> Kiểm tra kết quả vote
                    </button>
                  }
                }
                else
                {
                  <span class="act secondary" title="Chỉ nhà đầu tư mới có quyền bỏ phiếu" style="cursor:default; opacity:.85;">
                    <i class="fas fa-lock"></i> Bỏ phiếu (Chỉ nhà đầu tư)
                  </span>
                }
                break;

              case InvestDapp.Shared.Enums.CampaignStatus.Failed:
                @if (isInvestor)
                {
                  <button class="act primary" onclick="claimRefund(@Model.Id)">
                    <i class="fas fa-money-bill-wave"></i> Claim lại tiền
                  </button>
                }
                else
                {
                  <span class="act secondary" title="Chỉ nhà đầu tư mới có thể claim" style="cursor:default; opacity:.85;">
                    <i class="fas fa-lock"></i> Claim (Chỉ nhà đầu tư)
                  </span>
                }
                break;

              case InvestDapp.Shared.Enums.CampaignStatus.Completed:
                @if (isInvestor)
                {
                  <button class="act primary" onclick="claimProfits(@Model.Id)">
                    <i class="fas fa-gift"></i> Nhận lợi nhuận
                  </button>
                }
                <span class="act secondary" style="cursor:default; opacity:.85;">
                  <i class="fas fa-check-circle"></i> Đã hoàn thành
                </span>
                break;

              default:
                <span class="act secondary" style="cursor:default; opacity:.85;">
                  <i class="fas fa-clock"></i> Đang chuẩn bị
                </span>
                break;
            }
          }
        </div>
      </div>
    </aside>
  </section>
</div>


<!-- ====== MODALS: Withdrawal & Profit ====== -->
<!-- Withdrawal Modal -->
<div id="withdrawalModal" class="modal" style="display:none;">
  <div class="modal-content">
    <h3>Yêu cầu rút vốn</h3>
    <form id="withdrawalForm">
      <div class="row">
        <label for="withdrawalReason">Lý do</label>
        <textarea id="withdrawalReason" name="reason" rows="5" placeholder="Nhập lý do rút vốn (ít nhất 10 ký tự)"></textarea>
      </div>
      <div class="footer">
        <button type="button" class="btn-flat" onclick="closeWithdrawalModal()">Hủy</button>
        <button id="submitWithdrawal" type="submit" class="btn-grad"><i class="fas fa-paper-plane"></i> Gửi Yêu Cầu</button>
      </div>
    </form>
  </div>
</div>

<!-- Profit Modal -->
<div id="profitModal" class="modal" style="display:none;">
  <div class="modal-content">
    <h3>Thêm lợi nhuận vào chiến dịch</h3>
    <form id="profitForm">
      <div class="row">
        <label for="profitAmount">Số BNB</label>
        <input id="profitAmount" name="amount" type="number" step="0.001" placeholder="0.001" />
      </div>
      <div class="footer">
        <button type="button" class="btn-flat" onclick="closeProfitModal()">Hủy</button>
        <button id="submitProfit" type="submit" class="btn-grad"><i class="fas fa-plus"></i> Thêm</button>
      </div>
    </form>
  </div>
</div>

@section Scripts {
  <!-- Load ethers & contract config (once) -->
  <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
  <script src="~/js/contract-config.js" asp-append-version="true"></script>

  <script>
    /*********************** Toast helpers ************************/
    function createToast(message, kind){
      const el = document.createElement('div');
      el.className = 'toast ' + (kind==='ok'?'ok':'bad');
      el.style.cssText = `
        position:fixed;top:20px;right:20px;z-index:99999;padding:12px 14px;border-radius:12px;
        color:#fff;font-weight:800;background:${kind==='ok'?'linear-gradient(135deg,#28a745,#20c997)':'linear-gradient(135deg,#dc3545,#e74c3c)'};
        box-shadow:0 6px 20px rgba(0,0,0,.25)
      `;
      el.innerHTML = `<i class="fas ${kind==='ok'?'fa-check-circle':'fa-exclamation-triangle'}"></i> ${message}`;
      document.body.appendChild(el); setTimeout(()=>el.remove(), 4500);
    }
    const showSuccess = (m)=>createToast(m,'ok');
    const showError   = (m)=>createToast(m,'bad');

    /*********************** Global web3 vars ************************/
    let web3, contract, userAccount;

    /*********************** Load ethers fallback (optional) ************************/
    function ensureEthersLoaded() {
      return new Promise((resolve, reject) => {
        if (typeof ethers !== 'undefined') { resolve(); return; }
        const cdns = [
          'https://unpkg.com/ethers@5.7.2/dist/ethers.umd.min.js',
          'https://cdnjs.cloudflare.com/ajax/libs/ethers/5.7.2/ethers.umd.min.js'
        ];
        const tryLoad = (i) => {
          if (i >= cdns.length) { reject(new Error('Failed to load Ethers.js')); return; }
          const s = document.createElement('script');
          s.src = cdns[i];
          s.onload = () => resolve();
          s.onerror = () => tryLoad(i+1);
          document.head.appendChild(s);
        };
        tryLoad(0);
      });
    }

    /*********************** Network switch ************************/
    async function switchToBSCTestnet(){
      const rpcUrls = [
        'https://bsc-testnet.publicnode.com',
        'https://bsc-testnet-rpc.publicnode.com',
        'https://data-seed-prebsc-1-s1.binance.org:8545/',
        'https://endpoints.omniatech.io/v1/bsc/testnet/public',
        'https://rpc.ankr.com/bsc_testnet'
      ];
      try{
        await window.ethereum.request({
          method: 'wallet_switchEthereumChain',
          params: [{ chainId: CONTRACT_CONFIG.EXPECTED_CHAIN_ID_HEX }],
        });
        return true;
      }catch(switchError){
        if (switchError.code === 4902){
          try{
            await window.ethereum.request({
              method: 'wallet_addEthereumChain',
              params: [{
                chainId: CONTRACT_CONFIG.EXPECTED_CHAIN_ID_HEX,
                chainName: 'BSC Testnet',
                nativeCurrency: { name:'BNB', symbol:'BNB', decimals:18 },
                rpcUrls,
                blockExplorerUrls: ['https://testnet.bscscan.com/']
              }]
            });
            await window.ethereum.request({
              method: 'wallet_switchEthereumChain',
              params: [{ chainId: CONTRACT_CONFIG.EXPECTED_CHAIN_ID_HEX }],
            });
            return true;
          }catch(addErr){
            if (addErr.code === 4001) showError('Bạn đã từ chối thêm BSC Testnet.');
            else showError('Không thể thêm BSC Testnet.');
            return false;
          }
        }else if (switchError.code === 4001){
          showError('Bạn đã từ chối chuyển mạng.');
          return false;
        }else{
          showError('Không thể chuyển sang BSC Testnet.');
          return false;
        }
      }
    }

    /*********************** Init web3 + contract ************************/
    async function initializeWeb3(){
      try{
        await ensureEthersLoaded();
        if (typeof window.ethereum === 'undefined'){ showError('Vui lòng cài MetaMask để sử dụng!'); return false; }

        web3 = new ethers.providers.Web3Provider(window.ethereum, 'any');

        // yêu cầu account (timeout 15s)
        const accounts = await Promise.race([
          window.ethereum.request({ method:'eth_requestAccounts' }),
          new Promise((_,rej)=>setTimeout(()=>rej(new Error('Connection timeout')),15000))
        ]);
        if (!accounts || accounts.length===0) throw new Error('No accounts found');

        let signer = web3.getSigner();
        userAccount = await signer.getAddress();

        const net = await web3.getNetwork();
        if (net.chainId !== CONTRACT_CONFIG.EXPECTED_CHAIN_ID_DEC){
          const ok = await switchToBSCTestnet();
          if (!ok) throw new Error('Failed to switch network');
          web3 = new ethers.providers.Web3Provider(window.ethereum, 'any');
          signer = web3.getSigner();
          userAccount = await signer.getAddress();
        }

        contract = new ethers.Contract(CONTRACT_CONFIG.CONTRACT_ADDRESS, CONTRACT_CONFIG.CONTRACT_ABI, signer);
        await contract.campaignCounter(); // ping view để chắc kết nối ok

        return true;
      }catch(err){
        console.error('Web3 init error:', err);
        if (err.code === 4001) showError('Bạn đã từ chối kết nối ví.');
        else if (err.code === -32002) showError('Yêu cầu kết nối đang chờ trong MetaMask.');
        else if (err.message === 'Connection timeout') showError('Kết nối ví bị timeout.');
        else if (err.message === 'No accounts found') showError('Vui lòng unlock MetaMask.');
        else showError(err.message || 'Không thể kết nối với ví.');
        return false;
      }
    }

    async function ensureWalletConnected(){
      if (!web3 || !contract || !userAccount) return await initializeWeb3();
      return true;
    }

    /*********************** Withdrawal flow (ABI fallback ready) ************************/
    function requestWithdrawal(){ const m = document.getElementById('withdrawalModal'); if (m) m.style.display = 'block'; }
    function closeWithdrawalModal(){
      const m = document.getElementById('withdrawalModal'); if (m) m.style.display='none';
      const f = document.getElementById('withdrawalForm'); if (f) f.reset();
    }

    async function submitWithdrawalRequest(campaignId, reason){
      const btn = document.getElementById('submitWithdrawal');
      const originalText = btn?.innerHTML;
      try{
        if (!await ensureWalletConnected()) return;

        // validate
        if (!reason || reason.trim().length < 10){ showError('Lý do rút vốn phải có ít nhất 10 ký tự'); return; }

        if (btn){ btn.disabled = true; btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang kiểm tra điều kiện...'; }

        // kiểm tra owner + trạng thái on-chain
        const c = await contract.campaigns(campaignId);
        const owner = (c.owner || c[1] || '').toString();
        const goal = ethers.BigNumber.from(c.goalAmount || c[3] || 0);
        const raised = ethers.BigNumber.from(c.currentRaisedAmount || c[4] || 0);
        const end = parseInt((c.endTime || c[6] || 0).toString(),10);
        const status = parseInt((c.status || c[7] || 0).toString(),10);

        if (owner.toLowerCase() !== userAccount.toLowerCase()) { showError('❌ Chỉ chủ chiến dịch mới yêu cầu rút vốn'); return; }
        const now = Math.floor(Date.now()/1000);
        // Tuỳ logic của bạn, có thể mở comment để chặn sớm:
        // if (raised.lt(goal)) { showError('❌ Chưa đạt mục tiêu.'); return; }
        // if (now < end) { showError('❌ Chưa đến thời điểm kết thúc chiến dịch.'); return; }
        if (!(status === 0 || status === 1)) { showError('❌ Trạng thái hiện tại không cho phép rút vốn.'); return; }

        // Check pending requests (best-effort)
        try{
          const limit = 20;
          for (let i=0;i<limit;i++){
            try{
              const req = await contract.withdrawalRequests(campaignId, i);
              const st = (req.status && req.status.toNumber) ? req.status.toNumber() : parseInt((req.status || 0).toString(),10);
              if (st === 0){ showError('❌ Đã tồn tại yêu cầu rút vốn đang chờ xử lý.'); return; }
            }catch{ break; }
          }
        }catch(e){ console.warn('Scan pending withdrawal failed (non-fatal):', e); }

        if (btn){ btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Kiểm tra on-chain...'; }

        // Preflight 2-arg -> nếu revert silent => fallback 1-arg
        let useLegacyOneArg = false;
        try{
          await contract.callStatic.requestFullWithdrawal(campaignId, reason.trim());
        }catch(preflightErr){
          const msg = (preflightErr?.message||'').toLowerCase();
          const data = preflightErr?.data || preflightErr?.error?.data || '0x';
          if (msg.includes('missing trie node')) { showError('❌ RPC node lỗi (missing trie node). Đổi RPC/ thử lại.'); return; }
          if (data === '0x' || msg.includes('without a reason string')){
            useLegacyOneArg = true;
          }else{
            try{
              if (typeof data === 'string' && data.length > 138){
                const str = ethers.utils.toUtf8String('0x' + data.slice(138));
                showError('❌ Contract từ chối: ' + str);
              }else{
                showError('❌ Contract từ chối yêu cầu.');
              }
            }catch{ showError('❌ Contract từ chối yêu cầu.'); }
            return;
          }
        }

        // Estimate & send
        if (btn){ btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Ước lượng gas...'; }
        let tx;

        if (!useLegacyOneArg){
          let gas;
          try{
            gas = await contract.estimateGas.requestFullWithdrawal(campaignId, reason.trim());
          }catch(estErr){
            if ((estErr?.message||'').toLowerCase().includes('missing trie node')){ showError('❌ RPC node không đồng bộ.'); return; }
            // fallback sang 1-arg nếu estimateGas fail kiểu call-exception trống
            useLegacyOneArg = true;
          }

          if (!useLegacyOneArg){
            const gasLimit = gas.mul(12).div(10);
            if (btn){ btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Gửi giao dịch...'; }
            tx = await contract.requestFullWithdrawal(campaignId, reason.trim(), { gasLimit });
          }
        }

        if (useLegacyOneArg){
          if (btn){ btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Gửi (legacy ABI)...'; }
          const signer = web3.getSigner();
          const ifaceLegacy = new ethers.utils.Interface(['function requestFullWithdrawal(uint256 _campaignId)']);
          const data = ifaceLegacy.encodeFunctionData('requestFullWithdrawal', [campaignId]);
          let gasLimit = ethers.BigNumber.from('300000');
          try{
            const gas = await web3.estimateGas({ to: CONTRACT_CONFIG.CONTRACT_ADDRESS, from: userAccount, data });
            gasLimit = gas.mul(12).div(10);
          }catch(e){}
          tx = await signer.sendTransaction({ to: CONTRACT_CONFIG.CONTRACT_ADDRESS, data, gasLimit });
        }

        showSuccess('Đã gửi yêu cầu lên blockchain, chờ xác nhận...');
        const receipt = await tx.wait();
        if (receipt.status !== 1){ showError('❌ Giao dịch blockchain thất bại'); return; }

        // Lưu DB
        if (btn){ btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Lưu database...'; }
        const res = await fetch('/Campaigns/RequestFullWithdrawal', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
          },
          body: JSON.stringify({ campaignId, txHash: tx.hash, reason, address: userAccount })
        });

        if (res.ok){
          showSuccess('✅ Yêu cầu rút vốn đã ghi nhận!');
          closeWithdrawalModal();
          setTimeout(()=>window.location.reload(), 1500);
        }else{
          const e = await res.json().catch(()=>({}));
          showError('⚠️ Chain OK nhưng lưu DB lỗi: ' + (e.error||'Unknown'));
          closeWithdrawalModal();
          setTimeout(()=>window.location.reload(), 2000);
        }
      }catch(err){
        console.error('Withdrawal request error:', err);
        const msg = (err?.message||'').toLowerCase();
        if (msg.includes('missing trie node')) showError('❌ RPC node đang lỗi (missing trie node). Hãy đổi RPC/ thử lại.');
        else if (err.code === 4001 || err.code === 'ACTION_REJECTED') showError('❌ Bạn đã từ chối giao dịch');
        else if (msg.includes('insufficient funds')) showError('❌ Không đủ BNB để trả phí gas');
        else showError(err.reason || err.message || '❌ Lỗi không xác định khi yêu cầu rút vốn');
      }finally{
        if (btn){ btn.disabled = false; btn.innerHTML = originalText || '<i class="fas fa-paper-plane"></i> Gửi Yêu Cầu'; }
      }
    }

    /*********************** Execute/Update withdrawal ************************/
    async function checkWithdrawalExecution(campaignId) {
      const btn = event?.target;
      const originalText = btn?.innerHTML;
      try {
        if (!await ensureWalletConnected()) return;
        if (btn){ btn.disabled = true; btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang kiểm tra...'; }

        // lấy requestId pending từ server
        let requestId = null;
        const apiRes = await fetch(`/api/campaigns/${campaignId}/pending-withdrawal`);
        if (!apiRes.ok) throw new Error((await apiRes.text()) || 'Server không trả về pending withdrawal.');
        const payload = await apiRes.json();
        if (Number.isFinite(Number(payload?.requestId))) requestId = Number(payload.requestId);
        else if (Number.isFinite(Number(payload?.requestIdOnChain))) requestId = Number(payload.requestIdOnChain);
        if (!Number.isFinite(requestId)) throw new Error('requestId không hợp lệ.');

        if (btn){ btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang thực thi on-chain...'; }
        const tx = await contract.checkAndExecuteWithdrawal(campaignId, requestId, { gasLimit: 300000 });
        showSuccess('Đang kiểm tra kết quả vote...');
        const receipt = await tx.wait();
        if (receipt.status !== 1) { showError('❌ Giao dịch blockchain thất bại!'); return; }

        // Cập nhật DB
        let wasApproved = false;
        try {
          const topic = ethers.utils.id("WithdrawalExecuted(uint8,uint256,uint256,address,uint256)");
          const log = receipt.logs.find(l => l.topics[0] === topic);
          if (log) {
            const decoded = contract.interface.decodeEventLog("WithdrawalExecuted", log.data, log.topics);
            wasApproved = (decoded.status === 1);
          }
        } catch (e) { console.warn('Parse logs failed:', e); }

        if (btn){ btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Cập nhật database...'; }
        const resp = await fetch('/Campaigns/UpdateWithdrawalStatus', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
          },
          body: JSON.stringify({ campaignId, requestId, txHash: tx.hash, wasApproved })
        });

        if (resp.ok){
          const result = await resp.json().catch(()=>({}));
          if (wasApproved) showSuccess('✅ Yêu cầu rút vốn đã được phê duyệt & thực thi!');
          else {
            showSuccess('❌ Yêu cầu rút vốn bị từ chối' + (result?.rejectionCount!=null?` (bị từ chối ${result.rejectionCount} lần)`:'') );
            if ((result?.rejectionCount||0) >= 3) showError('⚠️ Chiến dịch có thể chuyển sang Failed do quá 3 lần bị từ chối.');
          }
        }else{
          const e = await resp.json().catch(()=>({}));
          showError('⚠️ Chain OK nhưng cập nhật DB lỗi: ' + (e.error || 'Unknown'));
        }
        setTimeout(()=>window.location.reload(), 2500);
      } catch (error) {
        console.error('Check withdrawal error:', error);
        showError(error.message || 'Có lỗi khi thực thi kiểm tra withdrawal.');
      } finally {
        if (btn){ btn.disabled = false; btn.innerHTML = originalText || '<i class="fas fa-check-circle"></i> Kiểm Tra Kết Quả Vote'; }
      }
    }

    /*********************** Profit flow ************************/
    function addProfitToCampaign(){ const m = document.getElementById('profitModal'); if (m) m.style.display = 'block'; }
    function closeProfitModal(){ const m = document.getElementById('profitModal'); if (m) m.style.display='none'; const f = document.getElementById('profitForm'); if (f) f.reset(); }

    async function submitProfitAddition(campaignId, amount){
      const btn = document.getElementById('submitProfit');
      const originalText = btn?.innerHTML;
      try{
        if (!await ensureWalletConnected()) return;
        const val = Number(amount);
        if (!val || val < 0.001){ showError('Nhập số tiền hợp lệ (tối thiểu 0.001 BNB)'); return; }
        if (btn){ btn.disabled = true; btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang thêm...'; }

        const wei = ethers.utils.parseEther(val.toString());
        const tx = await contract.addProfit(campaignId, { value: wei, gasLimit: 250000 });
        showSuccess('Đang thêm lợi nhuận...');
        const receipt = await tx.wait();
        if (receipt.status !== 1){ showError('Giao dịch thất bại!'); return; }
        showSuccess('Thêm lợi nhuận thành công!');
        closeProfitModal();
        setTimeout(()=>window.location.reload(), 1600);
      }catch(err){
        console.error('Add profit error:', err);
        showError(err.message || 'Lỗi khi thêm lợi nhuận');
      }finally{
        if (btn){ btn.disabled = false; btn.innerHTML = originalText || '<i class="fas fa-plus"></i> Thêm Lợi Nhuận'; }
      }
    }

    /*********************** Other actions ************************/
    function investInCampaign(id){ window.location.href = `/Campaigns/Dashboard/${id}`; }
    function voteOnCampaign(id){ window.location.href = `/Campaigns/Dashboard/${id}`; }
    function claimProfits(id){ window.location.href = `/Campaigns/Dashboard/${id}`; }

    function claimRefund(id){
      if (confirm('Bạn có chắc chắn muốn claim lại tiền đầu tư không? Hành động này không thể hoàn tác.')) {
        claimRefundFromContract(id);
      }
    }

    async function claimRefundFromContract(campaignId){
      const btn = event?.target; const originalText = btn?.innerHTML;
      try{
        if (!await ensureWalletConnected()) return;
        if (btn){ btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang xử lý...'; btn.disabled = true; }

        const tx = await contract.refund(campaignId, { gasLimit: 150000 });
        showSuccess('Đã gửi giao dịch claim refund...');
        const receipt = await tx.wait();
        if (receipt.status !== 1){ showError('Giao dịch thất bại!'); return; }
        showSuccess('Claim refund thành công!');

        const formData = new FormData();
        formData.append('CampaignId', campaignId);
        formData.append('TransactionHash', tx.hash);
        formData.append('InvestorAddress', userAccount || '');
        formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]')?.value || '');

        const response = await fetch('/Campaigns/ClaimRefund', { method:'POST', body: formData, credentials: 'same-origin' });
        if (!response.ok){
          const err = await response.json().catch(()=>({}));
          showError(err.error || 'Có lỗi khi cập nhật refund trên server.');
        }
        setTimeout(()=>window.location.reload(), 2200);
      }catch(error){
        console.error('Claim refund error:', error);
        showError(error.message || 'Có lỗi khi claim refund.');
      }finally{
        if (btn){ btn.disabled = false; btn.innerHTML = originalText || '<i class="fas fa-money-bill-wave"></i> Claim Lại Tiền'; }
      }
    }

    /*********************** MetaMask events ************************/
    async function bindWalletEvents(){
      if (typeof window.ethereum === 'undefined') return;
      window.ethereum.on('accountsChanged', async (accs)=>{
        if (!accs || accs.length===0){ showError('MetaMask đã ngắt kết nối'); userAccount=null; web3=null; contract=null; }
        else { await initializeWeb3(); }
      });
      window.ethereum.on('chainChanged', async (chainId)=>{
        const dec = parseInt(chainId,16);
        if (dec !== CONTRACT_CONFIG.EXPECTED_CHAIN_ID_DEC) showError('Vui lòng chuyển về BSC Testnet!');
        else await initializeWeb3();
      });
      window.ethereum.on('disconnect', ()=>{ showError('Kết nối MetaMask bị ngắt'); userAccount=null; web3=null; contract=null; });
    }

    /*********************** DOM Ready ************************/
    document.addEventListener('DOMContentLoaded', async ()=>{
      await initializeWeb3();
      await bindWalletEvents();

      // Gắn form Withdrawal
      const withdrawalForm = document.getElementById('withdrawalForm');
      if (withdrawalForm){
        withdrawalForm.addEventListener('submit', async (e)=>{
          e.preventDefault();
          const reason = document.getElementById('withdrawalReason')?.value?.trim() || '';
          if (!reason){ showError('Vui lòng nhập lý do rút vốn!'); return; }
          await submitWithdrawalRequest(@Model.Id, reason);
        });
      }

      // Gắn form Profit
      const profitForm = document.getElementById('profitForm');
      if (profitForm){
        profitForm.addEventListener('submit', async (e)=>{
          e.preventDefault();
          const amount = parseFloat(document.getElementById('profitAmount')?.value || '0');
          if (!amount || amount < 0.001){ showError('Vui lòng nhập số tiền hợp lệ (tối thiểu 0.001 BNB)!'); return; }
          await submitProfitAddition(@Model.Id, amount);
        });
      }

      // Click outside to close modals
      window.addEventListener('click', (evt)=>{
        const wm = document.getElementById('withdrawalModal');
        const pm = document.getElementById('profitModal');
        if (evt.target === wm) closeWithdrawalModal();
        if (evt.target === pm) closeProfitModal();
      });

      // Nhẹ: hiệu ứng xuất hiện
      const elements = document.querySelectorAll('.campaign-details-container > *');
      elements.forEach((el, i)=>{ el.style.animationDelay = `${i*0.1}s`; });
    });
  </script>
}
