@model InvestDapp.ViewModels.Home.HomeLandingViewModel
@using Microsoft.AspNetCore.Authorization
@using System.Globalization
@using System.Linq
@using InvestDapp.Shared.Enums
@{
    ViewData["Title"] = "Trang chủ";
    Layout = "~/Pages/_Layout.cshtml";
    var totalRaised = Math.Round((double)Model.Stats.TotalRaised, 2);
    var totalInvestors = Model.Stats.TotalInvestors;
    var completedCampaigns = Model.Stats.CompletedCampaigns;
    var activeCampaigns = Model.Stats.ActiveCampaigns;
    var totalValueLocked = Math.Round((double)Model.Stats.TotalValueLocked, 2);
    var tickerItems = Model.RecentInvestments ?? Array.Empty<InvestDapp.ViewModels.Home.InvestmentTickerItem>();
    var featuredCampaigns = Model.FeaturedCampaigns ?? Array.Empty<InvestDapp.ViewModels.Home.CampaignSummaryCard>();
    var highlights = Model.Highlights ?? Array.Empty<InvestDapp.ViewModels.Home.NewsSpotlightViewModel>();
    var heroCampaign = featuredCampaigns.FirstOrDefault();
    var supportingCampaigns = featuredCampaigns.Skip(1).Take(4).ToList();
    var liveFeed = tickerItems.OrderByDescending(t => t.Timestamp).Take(6).ToList();
    var totalCampaigns = Math.Max(activeCampaigns + completedCampaigns, 1);
    var completionRate = Math.Round((double)completedCampaigns / totalCampaigns * 100, 1);
    var lastInvestment = liveFeed.FirstOrDefault();
    var liveFeedCount = liveFeed.Count;
    var liveFeedVolume = liveFeed.Sum(i => i.Amount);
}

@functions {
    private static string StatusBadgeClass(CampaignStatus status) => status switch
    {
        CampaignStatus.Active => "badge",
        CampaignStatus.Completed => "badge hot",
        CampaignStatus.Voting => "badge dao",
        CampaignStatus.PendingApproval => "badge",
        CampaignStatus.PendingPost => "badge",
        CampaignStatus.Failed => "badge hot",
        _ => "badge"
    };

    private static string StatusBadgeLabel(CampaignStatus status) => status switch
    {
        CampaignStatus.Active => "Đang gọi vốn",
        CampaignStatus.Completed => "Hoàn thành",
        CampaignStatus.Voting => "Đang biểu quyết",
        CampaignStatus.PendingApproval => "Chờ duyệt",
        CampaignStatus.PendingPost => "Chuẩn bị",
        CampaignStatus.Failed => "Thất bại",
        _ => status.ToString()
    };

    private static string RelativeTime(DateTime timestamp)
    {
        var delta = DateTime.UtcNow - timestamp.ToUniversalTime();
        if (delta < TimeSpan.Zero)
        {
            delta = TimeSpan.Zero;
        }

        if (delta.TotalSeconds < 45) return "Vừa xong";
        if (delta.TotalMinutes < 1.5) return "1 phút trước";
        if (delta.TotalMinutes < 60) return $"{(int)Math.Round(delta.TotalMinutes)} phút trước";
        if (delta.TotalHours < 1.5) return "1 giờ trước";
        if (delta.TotalHours < 24) return $"{(int)Math.Round(delta.TotalHours)} giờ trước";
        if (delta.TotalDays < 1.5) return "Hôm qua";
        if (delta.TotalDays < 7) return $"{(int)Math.Round(delta.TotalDays)} ngày trước";
        if (delta.TotalDays < 31) return $"{(int)Math.Round(delta.TotalDays / 7)} tuần trước";
        if (delta.TotalDays < 365) return $"{(int)Math.Round(delta.TotalDays / 30)} tháng trước";
        return $"{(int)Math.Round(delta.TotalDays / 365)} năm trước";
    }
}

@section Styles {
    <style>
        html {
            scroll-behavior: smooth;
        }

        body {
            overflow-x: hidden;
            position: relative;
        }

        /* ====== LANDING (scoped) ====== */
        .landing {
            position: relative;
            display: flex;
            flex-direction: column;
            gap: clamp(64px, 11vw, 150px);
            padding-bottom: clamp(80px, 12vw, 180px);
        }

        .landing--lite .orb,
        .landing--lite .coin,
        .landing--lite .gridfx,
        .landing--lite .marquee {
            transition: none;
        }

        .landing--lite .orb {
            animation: none;
            filter: blur(36px);
            opacity: .18;
        }

        .landing--lite .gridfx {
            animation: none;
            background-image: linear-gradient(to right, rgba(255,255,255,.04) 1px, transparent 1px), linear-gradient(to bottom, rgba(255,255,255,.04) 1px, transparent 1px);
        }

        .landing--lite .coin {
            backdrop-filter: none;
            box-shadow: none;
            border-color: rgba(255,255,255,.06);
            background: linear-gradient(180deg, rgba(255,255,255,.08), rgba(255,255,255,.03));
        }

        .landing--lite .marquee {
            animation-duration: 28s;
        }

        .landing--lite .growth-card,
        .landing--lite .project-hero,
        .landing--lite .project-card,
        .landing--lite .live-feed {
            box-shadow: 0 10px 28px rgba(12,14,34,.32);
        }

        .slide {
            position: relative;
            width: 100%;
            padding: clamp(48px, 6vw, 120px) clamp(12px,3vw,36px);
        }

        .slide-inner {
            width: min(1200px,94vw);
            margin: auto;
            z-index: 1;
        }

        /* orbs background */
        .orb {
            position: absolute;
            width: 520px;
            height: 520px;
            border-radius: 50%;
            filter: blur(60px);
            opacity: .28;
            z-index: 0
        }

        .cyan {
            background: radial-gradient(closest-side, rgba(108,240,255,.9), rgba(108,240,255,0))
        }

        .violet {
            background: radial-gradient(closest-side, rgba(155,107,255,.9), rgba(155,107,255,0))
        }
        @@keyframes float {
            50%

        {
            transform: translateY(-18px) translateX(10px)
        }

        }

        .float-slow {
            animation: float 12s ease-in-out infinite
        }

        .float-rev {
            animation: float 14s ease-in-out infinite reverse
        }

        /* hero */
        .hero {
            display: grid;
            grid-template-columns: 1.1fr .9fr;
            gap: 36px;
            align-items: center
        }

            .hero h1 {
                font-size: clamp(36px,6vw,64px);
                line-height: 1.05;
                margin: 0 0 10px
            }

            .gradient-text{
                background: linear-gradient(90deg,var(--primary),var(--accent));
                -webkit-background-clip: text;
                background-clip: text;
                -webkit-text-fill-color: transparent;
                color: transparent;
                display: inline-block;
            }

            .hero p {
                color: var(--muted);
                margin: 0 0 20px
            }

            .hero .actions {
                display: flex;
                gap: 12px;
                flex-wrap: wrap
            }

        .pill {
            background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
            border: 1px solid var(--border);
            border-radius: 14px;
            padding: 10px 14px
        }

        .hero-visual {
            position: relative;
            height: min(520px,66vh);
            border-radius: 14px;
            background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
            border: 1px solid var(--border);
            box-shadow: var(--shadow);
            overflow: hidden
        }

        .gridfx {
            position: absolute;
            inset: 0;
            background-image: linear-gradient(to right, rgba(255,255,255,.06) 1px, transparent 1px), linear-gradient(to bottom, rgba(255,255,255,.06) 1px, transparent 1px);
            background-size: 40px 40px;
            mask-image: radial-gradient(100% 60% at 100% 0%, black 60%, transparent 100%);
            animation: gridMove 8s linear infinite
        }
        @@keyframes gridMove {
            to

        {
            background-position: -200px 200px, -200px 200px
        }

        }

        .coin {
            position: absolute;
            display: grid;
            place-items: center;
            width: 120px;
            height: 120px;
            border-radius: 28px;
            backdrop-filter: blur(10px);
            background: linear-gradient(180deg, rgba(255,255,255,.10), rgba(255,255,255,.03));
            border: 1px solid var(--border);
            box-shadow: var(--shadow)
        }

            .coin svg {
                width: 56px;
                height: 56px;
                filter: drop-shadow(0 0 10px rgba(108,240,255,.6))
            }

        .btc {
            top: 34px;
            left: 34px;
            transform: rotate(-6deg)
        }

        .bnb {
            top: 50%;
            left: 50%;
            transform: translate(-50%,-50%) scale(1.08)
        }

        .eth {
            bottom: 28px;
            right: 28px;
            transform: rotate(8deg)
        }

        .ticker {
            position: absolute;
            left: 0;
            right: 0;
            bottom: 0;
            height: 58px;
            display: flex;
            align-items: center;
            gap: 22px;
            background: linear-gradient(90deg, rgba(108,240,255,.08), rgba(155,107,255,.08));
            border-top: 1px solid var(--border);
            overflow: hidden
        }

        .marquee {
            display: flex;
            gap: 24px;
            white-space: nowrap;
            animation: slideX 18s linear infinite
        }
        @@keyframes slideX {
            to

        {
            transform: translateX(-50%)
        }

        }

        .pair {
            display: flex;
            gap: 10px;
            align-items: center;
            padding: 0 10px
        }

            .pair .sym {
                opacity: .9;
                font-weight: 700
            }

            .pair .px {
                font-weight: 800
            }

        .chg.up {
            color: #19e58c
        }

        .chg.down {
            color: #ff8e8e
        }

        /* stats */
        .stats h2 {
            font-size: clamp(28px,4.2vw,42px);
            margin: 0 0 14px
        }

        .stats-shell {
            display: flex;
            flex-direction: column;
            gap: 24px;
        }

        .stats-headline {
            display: flex;
            flex-direction: column;
            gap: 12px;
            align-items: flex-start;
        }

        .stats-headline p {
            margin: 0;
            color: var(--muted);
            max-width: 520px;
        }

        .live-pill {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 6px 12px;
            border-radius: 999px;
            background: rgba(108,240,255,.12);
            color: #7beaff;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: .08em;
            font-size: .72rem;
        }

        .live-pill::before {
            content: "";
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: linear-gradient(180deg,#00e0ff,#9b6bff);
            box-shadow: 0 0 12px rgba(123,234,255,.6);
            animation: pulse 1.6s ease-in-out infinite;
        }

        @@keyframes pulse {
            0%, 100% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.4); opacity: .65; }
        }

        .stats-panels {
            display: grid;
            grid-template-columns: minmax(0,1.45fr) minmax(0,1.05fr) minmax(0,.9fr);
            gap: 20px;
            align-items: stretch;
        }

        .growth-card {
            position: relative;
            border-radius: 20px;
            padding: 28px;
            background: radial-gradient(circle at top right, rgba(155,107,255,.28), transparent 45%),
                        radial-gradient(circle at bottom left, rgba(108,240,255,.28), transparent 55%),
                        rgba(19,22,44,.68);
            border: 1px solid rgba(255,255,255,.08);
            box-shadow: 0 18px 45px rgba(12,14,34,.45);
            overflow: hidden;
        }

        .growth-card::after {
            content: "";
            position: absolute;
            inset: 0;
            background: linear-gradient(135deg, rgba(255,255,255,.08) 0%, rgba(255,255,255,0) 45%);
            pointer-events: none;
        }

        .growth-title {
            font-size: .95rem;
            font-weight: 600;
            color: rgba(255,255,255,.76);
            letter-spacing: .04em;
            text-transform: uppercase;
        }

        .growth-primary {
            margin-top: 12px;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .growth-value {
            font-size: clamp(34px,5.8vw,64px);
            font-weight: 800;
            letter-spacing: -.02em;
        }

        .growth-sub {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: .95rem;
            color: rgba(255,255,255,.75);
        }

        .pulse-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: #7beaff;
            box-shadow: 0 0 10px rgba(123,234,255,.9);
            animation: pulse 1.8s ease-in-out infinite;
        }

        .growth-meta {
            display: grid;
            grid-template-columns: repeat(2,minmax(0,1fr));
            gap: 14px;
            margin-top: 24px;
        }

        .growth-meta-item {
            background: rgba(255,255,255,.06);
            border-radius: 12px;
            padding: 14px;
            border: 1px solid rgba(255,255,255,.04);
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .growth-meta-item span:first-child {
            font-size: .8rem;
            text-transform: uppercase;
            letter-spacing: .06em;
            color: rgba(255,255,255,.6);
        }

        .growth-meta-item span:last-child {
            font-weight: 700;
            font-size: 1.1rem;
        }

        .stat-metrics {
            display: grid;
            gap: 14px;
        }

        .metric-card {
            background: linear-gradient(180deg, rgba(255,255,255,.08), rgba(255,255,255,.02));
            border-radius: 16px;
            border: 1px solid rgba(255,255,255,.08);
            padding: 20px;
            display: grid;
            grid-template-columns: auto 1fr;
            gap: 16px;
            align-items: center;
            box-shadow: var(--shadow);
        }

        .metric-icon {
            width: 54px;
            height: 54px;
            border-radius: 16px;
            background: linear-gradient(180deg, rgba(108,240,255,.18), rgba(155,107,255,.18));
            display: grid;
            place-items: center;
            font-weight: 800;
            font-size: 1.1rem;
            color: rgba(255,255,255,.85);
        }

        .metric-body {
            display: flex;
            flex-direction: column;
            gap: 6px;
        }

        .metric-body strong {
            font-size: 1.3rem;
            font-weight: 700;
        }

        .metric-body span {
            color: var(--muted);
            font-size: .9rem;
        }

        .live-feed {
            background: linear-gradient(180deg, rgba(12,16,38,.88), rgba(22,28,54,.88));
            border-radius: 20px;
            border: 1px solid rgba(255,255,255,.08);
            padding: 24px;
            display: flex;
            flex-direction: column;
            gap: 16px;
            box-shadow: 0 20px 45px rgba(12,14,34,.45);
        }

        .live-feed header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 12px;
        }

        .live-feed h3 {
            margin: 0;
            font-size: 1.05rem;
        }

        .live-feed ul {
            list-style: none;
            margin: 0;
            padding: 0;
            display: grid;
            gap: 12px;
        }

        .live-feed li {
            display: grid;
            grid-template-columns: auto 1fr;
            gap: 12px;
            align-items: center;
            padding: 12px 14px;
            border-radius: 14px;
            background: rgba(255,255,255,.04);
            border: 1px solid rgba(255,255,255,.04);
        }

        .feed-amount {
            font-weight: 700;
            color: #7beaff;
        }

        .feed-meta {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .feed-line {
            display: flex;
            flex-wrap: wrap;
            align-items: baseline;
            gap: 6px;
        }

        .feed-line span:not(.feed-amount) {
            color: rgba(255,255,255,.7);
        }

        .feed-meta span {
            font-size: .85rem;
            color: var(--muted);
        }

        .feed-meta strong {
            font-size: .95rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(4,minmax(0,1fr));
            gap: 16px
        }

        .stat {
            background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
            border: 1px solid var(--border);
            border-radius: 14px;
            box-shadow: var(--shadow);
            padding: 18px;
            text-align: center
        }

        .num {
            font-size: clamp(24px,4.6vw,44px);
            font-weight: 800
        }

        .k {
            color: var(--muted);
            margin-top: 6px
        }

        .mini-meta {
            margin-top: 6px;
            font-size: .85rem;
            color: var(--muted);
            opacity: .85
        }

        /* projects */
        .project-deck {
            display: grid;
            grid-template-columns: minmax(0,1.6fr) minmax(0,1fr);
            gap: 20px;
            align-items: stretch;
        }

        .project-hero {
            position: relative;
            border-radius: 24px;
            overflow: hidden;
            min-height: 420px;
            background: linear-gradient(135deg, rgba(108,240,255,.15), rgba(155,107,255,.25));
            border: 1px solid rgba(255,255,255,.08);
            box-shadow: 0 24px 50px rgba(12,14,34,.45);
        }

        .project-hero__media {
            position: absolute;
            inset: 0;
            overflow: hidden;
        }

        .project-hero__media img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            filter: brightness(.82) saturate(1.05);
            transform: scale(1.05);
        }

        .project-hero__info {
            position: absolute;
            inset: 0;
            background: linear-gradient(180deg, rgba(10,12,25,.05) 0%, rgba(8,10,20,.72) 45%, rgba(8,10,20,.92) 100%);
            padding: 32px;
            display: flex;
            flex-direction: column;
            justify-content: flex-end;
            gap: 18px;
        }

        .project-hero__chips {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .chip {
            padding: 6px 12px;
            border-radius: 999px;
            background: rgba(255,255,255,.08);
            font-size: .8rem;
            letter-spacing: .05em;
            text-transform: uppercase;
            color: rgba(255,255,255,.76);
        }

        .chip.hot {
            background: linear-gradient(90deg,#ff4d4d,#ff8c4d);
            color: #fff;
        }

        .chip.dao {
            background: linear-gradient(90deg,#4d4dff,#8c4dff);
            color: #fff;
        }

        .project-hero__title {
            font-size: clamp(28px,4vw,42px);
            font-weight: 800;
            margin: 0;
        }

        .project-hero__meta {
            display: flex;
            flex-wrap: wrap;
            gap: 18px;
            font-size: .95rem;
            color: rgba(255,255,255,.75);
        }

        .project-hero__bar {
            height: 10px;
            background: rgba(255,255,255,.15);
            border-radius: 999px;
            overflow: hidden;
        }

        .project-hero__progress {
            height: 100%;
            background: linear-gradient(90deg,var(--primary),var(--accent));
        }

        .project-hero__bottom {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 18px;
            flex-wrap: wrap;
        }

        .project-hero__cta {
            min-width: 180px;
        }

        .project-hero__stats {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .project-hero__stats strong {
            font-size: 1.4rem;
            font-weight: 800;
        }

        .project-hero__stats span {
            color: rgba(255,255,255,.74);
            font-size: .9rem;
        }

        .project-sigil {
            position: absolute;
            inset: 0;
            display: grid;
            place-items: center;
            font-size: clamp(42px,6vw,72px);
            font-weight: 800;
            letter-spacing: .1em;
            color: rgba(255,255,255,.12);
            background: linear-gradient(135deg, rgba(108,240,255,.18), rgba(155,107,255,.12));
        }

        .project-stack {
            display: grid;
            gap: 16px;
        }

        .project-card {
            position: relative;
            border-radius: 18px;
            padding: 22px;
            background: linear-gradient(180deg, rgba(255,255,255,.08), rgba(255,255,255,.02));
            border: 1px solid rgba(255,255,255,.06);
            box-shadow: var(--shadow);
            display: flex;
            flex-direction: column;
            gap: 14px;
            overflow: hidden;
        }

        .project-card__header {
            display: flex;
            justify-content: space-between;
            gap: 12px;
            align-items: center;
        }

        .project-card__meta {
            display: flex;
            flex-direction: column;
            gap: 6px;
        }

        .project-card__meta span {
            font-size: .85rem;
            color: var(--muted);
        }

        .project-card__progress {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 12px;
            font-size: .9rem;
        }

        .project-updates {
            margin-top: 28px;
            background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
            border: 1px solid var(--border);
            border-radius: 16px;
            box-shadow: var(--shadow);
            padding: 20px;
        }

        .updates-head {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 16px;
            margin-bottom: 14px;
        }

        .updates-head h3 {
            margin: 0;
            font-size: 1.1rem;
            font-weight: 700;
        }

        .updates-list {
            list-style: none;
            margin: 0;
            padding: 0;
            display: grid;
            gap: 12px;
        }

        .updates-list li {
            display: grid;
            grid-template-columns: auto 1fr auto;
            gap: 14px;
            align-items: center;
            padding: 10px 12px;
            border-radius: 12px;
            background: rgba(255,255,255,.03);
            border: 1px solid rgba(255,255,255,.04);
        }

        .tag {
            padding: 6px 10px;
            border-radius: 999px;
            background: rgba(108,240,255,.12);
            color: #7beaff;
            font-size: .8rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: .04em;
        }

        .updates-title {
            font-weight: 700;
            font-size: 1rem;
        }

        .updates-meta {
            font-size: .85rem;
            color: var(--muted);
        }

        .link {
            color: var(--primary);
            font-weight: 600;
            text-decoration: none;
        }

        .link:hover {
            color: var(--accent);
        }

        .badge {
            position: absolute;
            top: 12px;
            right: 12px;
            padding: 6px 10px;
            border-radius: 999px;
            font-size: .8rem;
            color: #fff;
            background: linear-gradient(90deg,#00e0ff,#9b6bff)
        }

            .badge.hot {
                background: linear-gradient(90deg,#ff4d4d,#ff8c4d)
            }

            .badge.dao {
                background: linear-gradient(90deg,#4d4dff,#8c4dff)
            }

        /* faq */
        .faq {
            width: min(900px,92vw);
            margin: auto;
            display: grid;
            gap: 10px
        }

        .qa {
            background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
            border: 1px solid var(--border);
            border-radius: 12px;
            overflow: hidden
        }

        .q {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 14px 16px;
            cursor: pointer;
            font-weight: 700
        }

        .a {
            max-height: 0;
            overflow: hidden;
            transition: max-height .28s ease;
            color: var(--muted);
            padding: 0 16px
        }

        .qa.open .a {
            max-height: 200px;
            padding: 0 16px 14px
        }

        /* partners */
        .logos {
            display: flex;
            justify-content: center;
            align-items: center;
            flex-wrap: wrap;
            gap: 26px
        }

            .logos img {
                height: 40px;
                opacity: .75;
                filter: grayscale(100%);
                transition: all .2s
            }

                .logos img:hover {
                    opacity: 1;
                    filter: none
                }

        /* newsletter */
        .nl {
            text-align: center
        }

            .nl .form {
                display: grid;
                grid-template-columns: 1fr auto;
                gap: 8px;
                width: min(560px,90vw);
                margin: 12px auto 0;
                background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
                border: 1px solid var(--border);
                border-radius: 12px;
                padding: 8px
            }

            .nl input {
                background: transparent;
                border: 0;
                outline: none;
                color: var(--fg);
                padding: 0 12px
            }

        /* responsive */
        @@media (max-width:1080px) {
            .hero

        {
            grid-template-columns: 1fr;
            gap: 24px
        }

        .hero-visual {
            height: 380px
        }

        .stats-panels {
            grid-template-columns: 1fr;
        }

        .project-deck {
            grid-template-columns: 1fr;
        }

        .project-hero {
            min-height: 360px;
        }

        .project-hero__bottom {
            flex-direction: column;
            align-items: flex-start;
        }

        .live-feed {
            order: 3;
        }

        .updates-list li {
            grid-template-columns: 1fr;
            gap: 10px;
            align-items: flex-start;
        }

        .updates-list li .link {
            justify-self: flex-start;
        }

        .nl .form {
            grid-template-columns: 1fr
        }

        }
        /* reduce motion */
        @@media (prefers-reduced-motion: reduce) {
        .orb {
            animation: none
        }

        .marquee {
            animation: none
        }

        }
    </style>
}

<div class="landing">
    <!-- HERO -->
    <section class="slide" id="s-hero" aria-label="Hero">
                <div class="orb cyan float-slow" style="top:-140px; right:-140px"></div>
                <div class="orb violet float-rev" style="bottom:-180px; left:-160px"></div>

                <div class="slide-inner hero">
                    <div>
                        <span class="pill" style="display:inline-block;margin-bottom:10px;">New • Web3 Launchpad</span>
                        <h1>Trang chủ crypto hiện đại <span class="gradient-text">theo dòng realtime</span></h1>
                        <p>Lướt xuống để xem thống kê trực tiếp, dự án nổi bật, FAQ, đối tác và newsletter — tất cả nối tiếp mượt mà trong một trang.</p>
                        <div class="actions">
                            <a class="btn" href="#s-projects">Khám phá Dự án</a>
                            @if (Model.IsAuthenticated)
                            {
                                <a id="kycBtn" class="btn secondary" href="/Kyc/FundraiserKycView">KYC Nhà gây quỹ</a>
                            }
                        </div>
                    </div>

                    <div class="hero-visual" aria-hidden="true">
                        <div class="gridfx"></div>
                        <div class="coin btc">
                            <svg viewBox="0 0 256 256" xmlns="http://www.w3.org/2000/svg"><circle cx="128" cy="128" r="110" fill="none" stroke="#ffd580" stroke-width="10" /><path d="M104 72h40a28 28 0 0 1 0 56h-40zm0 56h44a28 28 0 0 1 0 56h-44" stroke="#ffd580" stroke-width="16" fill="none" stroke-linecap="round" /></svg>
                        </div>
                        <div class="coin bnb">
                            <svg viewBox="0 0 256 256" xmlns="http://www.w3.org/2000/svg"><rect x="58" y="58" width="140" height="140" rx="18" ry="18" fill="none" stroke="#f3d355" stroke-width="10" /><path d="M92 128l36-36 36 36-36 36-36-36z" fill="none" stroke="#f3d355" stroke-width="12" /></svg>
                        </div>
                        <div class="coin eth">
                            <svg viewBox="0 0 256 256" xmlns="http://www.w3.org/2000/svg"><path d="M128 28l60 100-60 34-60-34 60-100z" fill="none" stroke="#cbbcff" stroke-width="10" /><path d="M128 238l60-90-60 34-60-34 60 90z" fill="none" stroke="#cbbcff" stroke-width="10" /></svg>
                        </div>

                        <div class="ticker">
                            <div class="marquee" id="marquee">
                                @if (tickerItems.Count == 0)
                                {
                                    <div class="pair"><span class="sym">Đang cập nhật dữ liệu on-chain...</span></div>
                                }
                                else
                                {
                                    foreach (var item in tickerItems.Concat(tickerItems))
                                    {
                                        var amount = item.Amount.ToString("F2", CultureInfo.InvariantCulture);
                                        <div class="pair">
                                            <span class="sym">@item.CampaignName</span>
                                            <span class="px">@amount BNB</span>
                                            <span class="chg up">@item.ShortInvestorAddress</span>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- SLIDE 1: STATS -->
            <section class="slide" id="s-stats" aria-label="Stats">
                <div class="orb cyan float-slow" style="top:auto; bottom:-140px; right:-140px"></div>
                <div class="slide-inner stats">
                    <div class="stats-shell">
                        <div class="stats-headline">
                            <span class="live-pill">Realtime metrics</span>
                            <h2>Tăng trưởng theo thời gian thực</h2>
                            <p>Dữ liệu được đồng bộ trực tiếp từ hợp đồng thông minh và tự động làm mới mỗi khi có giao dịch mới trên nền tảng.</p>
                        </div>
                        <div class="stats-panels">
                            <article class="growth-card" aria-label="Tổng vốn đã huy động">
                                <div class="growth-title">Tổng vốn đã huy động</div>
                                <div class="growth-primary">
                                    <div class="growth-value counter" data-to="@totalRaised.ToString(CultureInfo.InvariantCulture)" data-prefix="BNB " data-decimals="2">BNB 0</div>
                                    <div class="growth-sub">
                                        <span class="pulse-dot" aria-hidden="true"></span>
                                        <span>Dòng vốn được cập nhật liên tục từ các chiến dịch.</span>
                                    </div>
                                </div>
                                <div class="growth-meta">
                                    <div class="growth-meta-item">
                                        <span>TVL</span>
                                        <span>BNB @totalValueLocked.ToString("N2", CultureInfo.InvariantCulture)</span>
                                    </div>
                                    <div class="growth-meta-item">
                                        <span>Chiến dịch mở</span>
                                        <span>@activeCampaigns</span>
                                    </div>
                                    <div class="growth-meta-item">
                                        <span>Giao dịch gần nhất</span>
                                        <span>@(lastInvestment is null ? "Chưa có" : RelativeTime(lastInvestment.Timestamp))</span>
                                    </div>
                                    <div class="growth-meta-item">
                                        <span>Tỷ lệ hoàn thành</span>
                                        <span>@completionRate.ToString("N1", CultureInfo.InvariantCulture)%</span>
                                    </div>
                                </div>
                            </article>
                            <div class="stat-metrics">
                                <div class="metric-card">
                                    <div class="metric-icon">👥</div>
                                    <div class="metric-body">
                                        <strong class="counter" data-to="@totalInvestors" data-decimals="0">0</strong>
                                        <span>Nhà đầu tư đã tham gia</span>
                                    </div>
                                </div>
                                <div class="metric-card">
                                    <div class="metric-icon">🚀</div>
                                    <div class="metric-body">
                                        <strong class="counter" data-to="@activeCampaigns" data-decimals="0">0</strong>
                                        <span>@completedCampaigns chiến dịch đã hoàn thành</span>
                                    </div>
                                </div>
                                <div class="metric-card">
                                    <div class="metric-icon">BNB</div>
                                    <div class="metric-body">
                                        <strong>BNB @liveFeedVolume.ToString("N2", CultureInfo.InvariantCulture)</strong>
                                        <span>Từ @liveFeedCount giao dịch gần nhất</span>
                                    </div>
                                </div>
                            </div>
                            <aside class="live-feed" aria-live="polite">
                                <header>
                                    <h3>Luồng giao dịch trực tiếp</h3>
                                    <span class="chip" style="background: rgba(123,234,255,.18); color: #7beaff;">@liveFeedCount giao dịch</span>
                                </header>
                                @if (liveFeedCount == 0)
                                {
                                    <p class="k" style="margin:0;">Chưa có giao dịch gần đây. Khi nền tảng ghi nhận giao dịch mới, chúng sẽ hiển thị tại đây ngay lập tức.</p>
                                }
                                else
                                {
                                    <ul>
                                        @foreach (var item in liveFeed)
                                        {
                                            var amount = item.Amount.ToString("N2", CultureInfo.InvariantCulture);
                                            <li>
                                                <span class="pulse-dot" aria-hidden="true"></span>
                                                <div class="feed-meta">
                                                    <strong>@item.CampaignName</strong>
                                                    <div class="feed-line">
                                                        <span class="feed-amount">@amount BNB</span>
                                                        <span>• @item.ShortInvestorAddress</span>
                                                    </div>
                                                    <span>@RelativeTime(item.Timestamp)</span>
                                                </div>
                                            </li>
                                        }
                                    </ul>
                                }
                            </aside>
                        </div>
                    </div>
                </div>
            </section>

            <!-- SLIDE 2: PROJECTS -->
            <section class="slide" id="s-projects" aria-label="Projects">
                <div class="orb violet float-rev" style="top:-140px; left:-140px"></div>
                <div class="slide-inner">
                    <h2 style="margin-bottom:12px">Dự án nổi bật</h2>
                        <p class="k" style="margin-bottom:16px">Số liệu cập nhật từ các chiến dịch đã được duyệt.</p>

                        @if (heroCampaign is null)
                        {
                            <div class="project-deck">
                                <div class="project-card" style="justify-content:center;align-items:flex-start;min-height:220px;">
                                    <div class="project-card__meta">
                                        <h3>Chưa có chiến dịch được phê duyệt</h3>
                                        <span class="k">Khi admin duyệt chiến dịch mới, chúng sẽ xuất hiện tại đây với đầy đủ số liệu realtime.</span>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            var heroProgress = Math.Clamp(Math.Round(heroCampaign.ProgressPercentage, 1), 0, 100);
                            var heroRaised = heroCampaign.RaisedAmount.ToString("N2", CultureInfo.InvariantCulture);
                            var heroGoal = heroCampaign.GoalAmount.ToString("N2", CultureInfo.InvariantCulture);
                            var heroDeadline = heroCampaign.EndTime.ToLocalTime().ToString("dd/MM/yyyy");
                            var heroStatusLabel = heroCampaign.IsHot && heroCampaign.Status == CampaignStatus.Active
                                ? "Đang bùng nổ"
                                : StatusBadgeLabel(heroCampaign.Status);
                            var heroStatusClass = heroCampaign.IsHot ? "chip hot" : heroCampaign.Status == CampaignStatus.Voting ? "chip dao" : "chip";
                            <div class="project-deck">
                                <article class="project-hero">
                                    @if (!string.IsNullOrWhiteSpace(heroCampaign.ImageUrl))
                                    {
                                        <div class="project-hero__media"><img src="@heroCampaign.ImageUrl" alt="@heroCampaign.Name" /></div>
                                    }
                                    else
                                    {
                                        <div class="project-sigil">@heroCampaign.Name[..Math.Min(2, heroCampaign.Name.Length)].ToUpperInvariant()</div>
                                    }
                                    <div class="project-hero__info">
                                        <div class="project-hero__chips">
                                            <span class="chip">@(heroCampaign.Category ?? "Chưa phân loại")</span>
                                            <span class="@heroStatusClass">@heroStatusLabel</span>
                                        </div>
                                        <h3 class="project-hero__title">@heroCampaign.Name</h3>
                                        <div class="project-hero__meta">
                                            <span>Kết thúc @heroDeadline</span>
                                            <span>@heroRaised / @heroGoal BNB</span>
                                        </div>
                                        <div class="project-hero__bar">
                                            <div class="project-hero__progress" style="width:@heroProgress%"></div>
                                        </div>
                                        <div class="project-hero__bottom">
                                            <div class="project-hero__stats">
                                                <strong>@heroProgress%</strong>
                                                <span>Mức hoàn thành mục tiêu gọi vốn</span>
                                            </div>
                                            <a href="@Url.Action("Dashboard", "Campaigns", new { id = heroCampaign.Id })" class="btn project-hero__cta">Xem dashboard</a>
                                        </div>
                                    </div>
                                </article>
                                <div class="project-stack">
                                    @if (supportingCampaigns.Count == 0)
                                    {
                                        <div class="project-card" style="min-height:160px;justify-content:center;">
                                            <div class="project-card__meta">
                                                <strong>Chưa có dự án khác</strong>
                                                <span class="k">Khi có thêm chiến dịch nổi bật, chúng sẽ được ghim vào danh sách này.</span>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        foreach (var campaign in supportingCampaigns)
                                        {
                                            var progress = Math.Clamp(Math.Round(campaign.ProgressPercentage, 1), 0, 100);
                                            var raised = campaign.RaisedAmount.ToString("N2", CultureInfo.InvariantCulture);
                                            var goal = campaign.GoalAmount.ToString("N2", CultureInfo.InvariantCulture);
                                            var remaining = campaign.EndTime.ToLocalTime().ToString("dd/MM/yyyy");
                                            var statusLabel = campaign.IsHot && campaign.Status == CampaignStatus.Active
                                                ? "Đang bùng nổ"
                                                : StatusBadgeLabel(campaign.Status);
                                            var statusClass = campaign.IsHot ? "chip hot" : campaign.Status == CampaignStatus.Voting ? "chip dao" : "chip";
                                            <article class="project-card">
                                                <div class="project-card__header">
                                                    <div class="project-card__meta">
                                                        <h4 style="margin:0">@campaign.Name</h4>
                                                        <span>@(campaign.Category ?? "Chưa phân loại") • Kết thúc @remaining</span>
                                                    </div>
                                                    <span class="@statusClass">@statusLabel</span>
                                                </div>
                                                <div class="project-card__progress">
                                                    <div style="width:100%;height:8px;border-radius:999px;background:rgba(255,255,255,.12);overflow:hidden;">
                                                        <div style="width:@progress%;height:100%;background:linear-gradient(90deg,var(--primary),var(--accent));"></div>
                                                    </div>
                                                    <span>@progress%</span>
                                                </div>
                                                <div class="project-card__progress">
                                                    <span>@raised / @goal BNB</span>
                                                    <a class="btn secondary" href="@Url.Action("Dashboard", "Campaigns", new { id = campaign.Id })">Chi tiết</a>
                                                </div>
                                            </article>
                                        }
                                    }
                                </div>
                            </div>
                        }

                        @if (highlights.Count > 0)
                        {
                            <div class="project-updates">
                                <div class="updates-head">
                                    <h3>Cập nhật mới nhất</h3>
                                    <a class="link" asp-controller="News" asp-action="Index">Xem tất cả tin tức</a>
                                </div>
                                <ul class="updates-list">
                                    @foreach (var item in highlights.Take(4))
                                    {
                                        var published = item.PublishedAt.ToLocalTime().ToString("dd/MM/yyyy HH:mm");
                                        <li>
                                            <span class="tag">@item.PostType</span>
                                            <div>
                                                <div class="updates-title">@item.Title</div>
                                                <div class="updates-meta">@item.CampaignName • @published</div>
                                            </div>
                                            <a class="link" href="@Url.Action("PostDetails", "Campaigns", new { id = item.Id })">Đọc</a>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                </div>
            </section>

            <!-- SLIDE 3: FAQ -->
            <section class="slide" id="s-faq" aria-label="FAQ">
                <div class="slide-inner">
                    <h2 style="margin-bottom:12px">FAQ</h2>
                    <p class="k" style="margin-bottom:16px">Accordion đơn giản, chạy client-side.</p>
                    <div class="faq" id="faqList">
                        <div class="qa"><div class="q">Có thể đầu tư bằng token nào? <span>＋</span></div><div class="a"><p>Hỗ trợ BNB, BUSD, USDT trên BSC; sẽ mở rộng thêm.</p></div></div>
                        <div class="qa"><div class="q">Nền tảng có thu phí không? <span>＋</span></div><div class="a"><p>Phí 2–5% trên vốn huy động thành công; không có phí ẩn.</p></div></div>
                        <div class="qa"><div class="q">Dự án có đảm bảo thành công? <span>＋</span></div><div class="a"><p>Không thể đảm bảo. Có cơ chế DAO giám sát rút vốn. Hãy DYOR.</p></div></div>
                        <div class="qa"><div class="q">Khi nào hiện nút KYC? <span>＋</span></div><div class="a"><p>Khi bạn đã đăng nhập, nút KYC sẽ xuất hiện ngay tại phần Hero để truy cập nhanh.</p></div></div>
                    </div>
                </div>
            </section>

            <!-- SLIDE 4: PARTNERS -->
            <section class="slide" id="s-partners" aria-label="Partners">
                <div class="slide-inner">
                    <h2 style="margin-bottom:12px">Đối tác & Audit</h2>
                    <p class="k" style="margin-bottom:16px">Logo minh hoạ; thay bằng ảnh thật của bạn.</p>
                    <div class="logos">
                        <img src="https://upload.wikimedia.org/wikipedia/commons/0/0a/CertiK_logo.png" alt="CertiK logo">
                        <img src="https://upload.wikimedia.org/wikipedia/commons/5/57/Chainlink_Logo.png" alt="Chainlink logo">
                        <img src="https://upload.wikimedia.org/wikipedia/commons/5/57/Binance_Logo.png" alt="Binance logo">
                        <img src="https://images.seeklogo.com/logo-png/43/1/quantstamp-logo-png_seeklogo-438075.png" alt="Quantstamp logo">
                    </div>
                </div>
            </section>

            <!-- SLIDE 5: NEWSLETTER -->
            <section class="slide" id="s-newsletter" aria-label="Newsletter">
                <div class="slide-inner nl">
                    <h2>Nhận bản tin</h2>
                    <p class="k">Cập nhật dự án, tips bảo mật, và sự kiện.</p>
                    <form id="nlForm" class="form" action="#" method="post" novalidate>
                        <input id="nlEmail" type="email" placeholder="Nhập email của bạn..." required />
                        <button class="btn" type="submit">Đăng ký</button>
                    </form>
                    <p id="nlMsg" class="k" style="margin-top:10px"></p>
                    <div style="margin-top:20px"><a class="btn secondary" href="#s-hero">Về Trang chủ</a></div>
                </div>
            </section>
</div>

@section Scripts {
        <script>
                (function () {
                    const reduceMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
                    const coarsePointerQuery = window.matchMedia('(pointer: coarse)');
                    const landingEl = document.querySelector('.landing');

                    const shouldReduce = () => reduceMotionQuery.matches || coarsePointerQuery.matches;

                    const toNumber = (value) => {
                        if (typeof value === 'number') {
                            return value;
                        }
                        return Number.parseFloat(value ?? '0');
                    };

                    const formatValue = (value, decimals) => {
                        if (decimals > 0) {
                            return value.toLocaleString('en-US', {
                                minimumFractionDigits: decimals,
                                maximumFractionDigits: decimals
                            });
                        }
                        return Math.round(value).toLocaleString('en-US');
                    };

                    const setCounterFinalValue = (el, target, prefix, decimals) => {
                        el.textContent = prefix + formatValue(target, decimals);
                    };

                    const animateCounter = (el, target, prefix, decimals) => {
                        const startTime = performance.now();
                        const duration = 900 + Math.min(Math.abs(target) * 4, 900);
                        const startValue = 0;

                        const step = (now) => {
                            const progress = Math.min((now - startTime) / duration, 1);
                            const eased = 1 - Math.pow(1 - progress, 3);
                            const value = startValue + (target - startValue) * eased;
                            setCounterFinalValue(el, value, prefix, decimals);
                            if (progress < 1) {
                                requestAnimationFrame(step);
                            }
                        };

                        requestAnimationFrame(step);
                    };

                    const animateCounters = (root, reduce) => {
                        root.querySelectorAll('.counter').forEach(el => {
                            const target = toNumber(el.dataset.to);
                            if (Number.isNaN(target)) {
                                return;
                            }
                            const prefix = el.dataset.prefix ?? '';
                            const decimals = Number.parseInt(el.dataset.decimals ?? (Number.isInteger(target) ? '0' : '2'), 10) || 0;

                            if (reduce) {
                                setCounterFinalValue(el, target, prefix, decimals);
                                return;
                            }

                            animateCounter(el, target, prefix, decimals);
                        });
                    };

                    let countersAnimated = false;
                    const statsSection = document.getElementById('s-stats');

                    const triggerCounters = (reduce) => {
                        if (!statsSection || countersAnimated) {
                            return;
                        }
                        animateCounters(statsSection, reduce);
                        countersAnimated = true;
                    };

                    if (statsSection && !shouldReduce()) {
                        const observer = new IntersectionObserver((entries, obs) => {
                            entries.forEach(entry => {
                                if (!entry.isIntersecting) {
                                    return;
                                }
                                triggerCounters(false);
                                obs.unobserve(entry.target);
                            });
                        }, { threshold: 0.4 });
                        observer.observe(statsSection);
                    } else {
                        triggerCounters(true);
                    }

                    const updateReducedState = () => {
                        const reduce = shouldReduce();
                        if (landingEl) {
                            landingEl.classList.toggle('landing--lite', reduce);
                        }
                        const toggleAnimation = (selector) => {
                            document.querySelectorAll(selector).forEach(node => {
                                node.style.animation = reduce ? 'none' : '';
                                node.style.animationPlayState = reduce ? 'paused' : '';
                            });
                        };
                        toggleAnimation('.orb');
                        toggleAnimation('.gridfx');
                        toggleAnimation('.marquee');

                        if (reduce && !countersAnimated) {
                            triggerCounters(true);
                        }
                    };

                    updateReducedState();

                    const safeListen = (mql, handler) => {
                        if (typeof mql.addEventListener === 'function') {
                            mql.addEventListener('change', handler);
                        } else if (typeof mql.addListener === 'function') {
                            mql.addListener(handler);
                        }
                    };

                    safeListen(reduceMotionQuery, updateReducedState);
                    safeListen(coarsePointerQuery, updateReducedState);

                    document.querySelectorAll('a[href^="#s-"]').forEach(link => {
                        link.addEventListener('click', (event) => {
                            const id = link.getAttribute('href');
                            if (!id) {
                                return;
                            }
                            const target = document.querySelector(id);
                            if (!target) {
                                return;
                            }
                            event.preventDefault();
                            target.scrollIntoView({
                                behavior: shouldReduce() ? 'auto' : 'smooth',
                                block: 'start'
                            });
                        });
                    });

                    document.getElementById('faqList')?.addEventListener('click', (event) => {
                        const question = event.target.closest('.q');
                        if (!question) {
                            return;
                        }
                        question.parentElement.classList.toggle('open');
                    });

                    document.getElementById('nlForm')?.addEventListener('submit', (event) => {
                        event.preventDefault();
                        const input = document.getElementById('nlEmail');
                        const message = document.getElementById('nlMsg');
                        if (!input || !message) {
                            return;
                        }
                        const value = input.value.trim();
                        message.textContent = value ? `Đã nhận: ${value} (demo)` : '';
                        event.target.reset();
                    });
                })();
        </script>
}
