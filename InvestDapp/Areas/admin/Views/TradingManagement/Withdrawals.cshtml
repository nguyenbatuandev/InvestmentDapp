@using System.Linq
@model List<InvestDapp.Shared.DTOs.Admin.PendingWithdrawalDto>
@{
    ViewData["Title"] = "Pending Withdrawals";
    Layout = "~/Areas/admin/Views/Shared/_Layout.cshtml";
}

<style>
    .withdrawals-page {
        padding: 24px;
        background: #f8fafc;
        min-height: calc(100vh - 80px);
    }

    /* Hero Header */
    .withdrawals-hero {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 50%, #b45309 100%);
        border-radius: 20px;
        padding: 40px;
        margin-bottom: 30px;
        color: white;
        box-shadow: 0 20px 60px rgba(245, 158, 11, 0.3);
        position: relative;
        overflow: hidden;
    }

    .withdrawals-hero::before {
        content: '';
        position: absolute;
        top: -50%;
        right: -10%;
        width: 400px;
        height: 400px;
        background: radial-gradient(circle, rgba(255,255,255,0.15) 0%, transparent 70%);
        border-radius: 50%;
    }

    .hero-content {
        position: relative;
        z-index: 1;
    }

    .hero-title {
        font-size: 36px;
        font-weight: 800;
        margin: 0 0 12px 0;
        display: flex;
        align-items: center;
        gap: 16px;
    }

    .hero-subtitle {
        font-size: 18px;
        opacity: 0.95;
        margin: 0 0 24px 0;
    }

    .hero-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 20px;
        margin-top: 24px;
    }

    .hero-stat {
        background: rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.25);
        border-radius: 14px;
        padding: 20px;
        text-align: center;
    }

    .hero-stat-label {
        font-size: 13px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        opacity: 0.9;
        margin-bottom: 8px;
    }

    .hero-stat-value {
        font-size: 28px;
        font-weight: 800;
        margin: 0;
    }

    /* Withdrawals Table Card */
    .withdrawals-card {
        background: white;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        border: 1px solid #e5e7eb;
        overflow: hidden;
    }

    .card-header {
        padding: 24px 28px;
        border-bottom: 1px solid #f3f4f6;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .card-title {
        font-size: 20px;
        font-weight: 700;
        color: #111827;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .card-body {
        padding: 0;
    }

    /* Table Styles */
    .withdrawals-table {
        width: 100%;
        border-collapse: collapse;
    }

    .withdrawals-table thead {
        background: #f9fafb;
    }

    .withdrawals-table th {
        text-align: left;
        padding: 16px 20px;
        font-weight: 600;
        font-size: 13px;
        color: #6b7280;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border-bottom: 2px solid #e5e7eb;
    }

    .withdrawals-table tbody tr {
        border-bottom: 1px solid #f3f4f6;
        transition: background 0.2s;
    }

    .withdrawals-table tbody tr:hover {
        background: #f9fafb;
    }

    .withdrawals-table td {
        padding: 18px 20px;
        font-size: 14px;
        color: #374151;
    }

    .wallet-address {
        font-family: 'Courier New', monospace;
        font-size: 13px;
        font-weight: 600;
        color: #3b82f6;
        text-decoration: none;
        transition: color 0.2s;
    }

    .wallet-address:hover {
        color: #2563eb;
        text-decoration: underline;
    }

    .amount-cell {
        font-weight: 700;
        font-size: 15px;
        color: #111827;
    }

    .fee-cell {
        color: #f59e0b;
        font-weight: 600;
    }

    .net-amount {
        color: #10b981;
        font-weight: 700;
        font-size: 15px;
    }

    /* Status Badge */
    .status-badge {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        padding: 6px 14px;
        border-radius: 999px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.3px;
    }

    .status-badge.warning {
        background: #fef3c7;
        color: #92400e;
        border: 1px solid #fde68a;
    }

    .status-badge.danger {
        background: #fee2e2;
        color: #991b1b;
        border: 1px solid #fecaca;
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 8px;
        align-items: center;
    }

    .btn {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        padding: 8px 16px;
        border-radius: 8px;
        font-size: 13px;
        font-weight: 600;
        text-decoration: none;
        border: none;
        cursor: pointer;
        transition: all 0.2s;
    }

    .btn-approve {
        background: #10b981;
        color: white;
    }

    .btn-approve:hover {
        background: #059669;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
    }

    .btn-reject {
        background: #ef4444;
        color: white;
    }

    .btn-reject:hover {
        background: #dc2626;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
    }

    .btn-back {
        background: #f3f4f6;
        color: #374151;
    }

    .btn-back:hover {
        background: #e5e7eb;
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 80px 20px;
    }

    .empty-state ion-icon {
        font-size: 80px;
        color: #d1d5db;
        margin-bottom: 16px;
    }

    .empty-state h3 {
        font-size: 20px;
        font-weight: 600;
        color: #6b7280;
        margin-bottom: 8px;
    }

    .empty-state p {
        color: #9ca3af;
        font-size: 14px;
    }

    /* Modal */
    .modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.6);
        z-index: 9999;
        justify-content: center;
        align-items: center;
        backdrop-filter: blur(4px);
    }

    .modal-overlay.show {
        display: flex;
    }

    .modal-content {
        background: white;
        border-radius: 16px;
        padding: 32px;
        max-width: 500px;
        width: 90%;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        animation: modalSlideIn 0.3s ease;
    }

    @@keyframes modalSlideIn {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .modal-header {
        margin-bottom: 24px;
    }

    .modal-header h3 {
        font-size: 24px;
        font-weight: 700;
        color: #111827;
        margin: 0 0 8px 0;
    }

    .modal-info {
        background: #f9fafb;
        border-radius: 12px;
        padding: 16px;
        margin-bottom: 24px;
        border: 1px solid #e5e7eb;
    }

    .modal-info-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 8px;
        font-size: 14px;
    }

    .modal-info-row:last-child {
        margin-bottom: 0;
    }

    .modal-info-label {
        font-weight: 600;
        color: #6b7280;
    }

    .modal-info-value {
        font-weight: 700;
        color: #111827;
        font-family: 'Courier New', monospace;
    }

    .form-group {
        margin-bottom: 24px;
    }

    .form-group label {
        display: block;
        font-weight: 600;
        color: #374151;
        margin-bottom: 8px;
        font-size: 14px;
    }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 1px solid #d1d5db;
        border-radius: 8px;
        font-size: 14px;
        font-family: inherit;
        transition: all 0.2s;
    }

    .form-control:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .modal-actions {
        display: flex;
        gap: 12px;
        justify-content: flex-end;
    }

    /* Notification Toast */
    .toast {
        position: fixed;
        top: 24px;
        right: 24px;
        background: white;
        padding: 16px 24px;
        border-radius: 12px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
        z-index: 10000;
        display: flex;
        align-items: center;
        gap: 12px;
        animation: toastSlideIn 0.3s ease;
    }

    @@keyframes toastSlideIn {
        from {
            opacity: 0;
            transform: translateX(100%);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    .toast.success {
        border-left: 4px solid #10b981;
    }

    .toast.error {
        border-left: 4px solid #ef4444;
    }

    .toast ion-icon {
        font-size: 24px;
    }

    .toast.success ion-icon {
        color: #10b981;
    }

    .toast.error ion-icon {
        color: #ef4444;
    }

    /* Responsive */
    @@media (max-width: 1200px) {
        .withdrawals-table {
            font-size: 13px;
        }

        .withdrawals-table th,
        .withdrawals-table td {
            padding: 14px 16px;
        }
    }

    @@media (max-width: 768px) {
        .hero-title {
            font-size: 28px;
        }

        .withdrawals-hero {
            padding: 28px;
        }

        .withdrawals-table {
            display: block;
            overflow-x: auto;
        }

        .action-buttons {
            flex-direction: column;
        }
    }
</style>

<div class="main">
    <div class="topbar">
        <div class="toggle">
            <ion-icon name="menu-outline"></ion-icon>
        </div>
    </div>

<div class="withdrawals-page">
    <!-- Hero Header -->
    <div class="withdrawals-hero">
        <div class="hero-content">
            <h1 class="hero-title">
                <ion-icon name="wallet"></ion-icon>
                Pending Withdrawals
            </h1>
            <p class="hero-subtitle">
                Quản lý và xử lý các yêu cầu rút tiền từ Trading Account
            </p>

            <div class="hero-stats">
                <div class="hero-stat">
                    <div class="hero-stat-label">Total Requests</div>
                    <div class="hero-stat-value">@Model.Count</div>
                </div>
                <div class="hero-stat">
                    <div class="hero-stat-label">Total Amount</div>
                    <div class="hero-stat-value">@Model.Sum(w => w.Amount).ToString("N2")</div>
                </div>
                <div class="hero-stat">
                    <div class="hero-stat-label">Total Fees</div>
                    <div class="hero-stat-value">@Model.Sum(w => w.Fee).ToString("N4")</div>
                </div>
                <div class="hero-stat">
                    <div class="hero-stat-label">Net Payout</div>
                    <div class="hero-stat-value">@Model.Sum(w => w.NetAmount).ToString("N2")</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Withdrawals Table Card -->
    <div class="withdrawals-card">
        <div class="card-header">
            <h3 class="card-title">
                <ion-icon name="hourglass"></ion-icon>
                Withdrawal Requests
            </h3>
            <a href="/admin/trading" class="btn btn-back">
                <ion-icon name="arrow-back"></ion-icon>
                Back to Dashboard
            </a>
        </div>

        <div class="card-body">
            @if (Model.Any())
            {
                <table class="withdrawals-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>User Wallet</th>
                            <th>Recipient Address</th>
                            <th>Amount</th>
                            <th>Fee</th>
                            <th>Net Amount</th>
                            <th>Pending Time</th>
                            <th>Created At</th>
                            <th style="text-align: center;">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var withdrawal in Model.OrderBy(w => w.CreatedAt))
                        {
                            <tr>
                                <td>
                                    <strong style="color: #6b7280;">#@withdrawal.Id</strong>
                                </td>
                                <td>
                                    <a href="/admin/trading/user/@withdrawal.UserWallet" class="wallet-address">
                                        @withdrawal.UserWallet.Substring(0, 8)...@withdrawal.UserWallet.Substring(withdrawal.UserWallet.Length - 6)
                                    </a>
                                </td>
                                <td>
                                    <span class="wallet-address" style="color: #8b5cf6;">
                                        @withdrawal.RecipientAddress.Substring(0, 8)...@withdrawal.RecipientAddress.Substring(withdrawal.RecipientAddress.Length - 6)
                                    </span>
                                </td>
                                <td class="amount-cell">
                                    @withdrawal.Amount.ToString("N4") BNB
                                </td>
                                <td class="fee-cell">
                                    @withdrawal.Fee.ToString("N4") BNB
                                </td>
                                <td class="net-amount">
                                    @withdrawal.NetAmount.ToString("N4") BNB
                                </td>
                                <td>
                                    <span class="status-badge @(withdrawal.PendingDays > 3 ? "danger" : "warning")">
                                        <ion-icon name="time"></ion-icon>
                                        @withdrawal.PendingDays days
                                    </span>
                                </td>
                                <td style="color: #6b7280; font-size: 13px;">
                                    @withdrawal.CreatedAt.ToString("dd/MM/yyyy")
                                    <br/>
                                    <span style="font-size: 12px;">@withdrawal.CreatedAt.ToString("HH:mm:ss")</span>
                                </td>
                                <td>
                                    <div class="action-buttons" style="justify-content: center;">
                                        <form method="post" action="/admin/trading/withdrawals/approve" style="display: inline;">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="WithdrawalId" value="@withdrawal.Id" />
                                            <button type="submit" class="btn btn-approve" 
                                                    onclick="return confirm('✓ Approve withdrawal?\n\nAmount: @withdrawal.NetAmount BNB\nTo: @withdrawal.RecipientAddress')">
                                                <ion-icon name="checkmark"></ion-icon>
                                                Approve
                                            </button>
                                        </form>
                                        
                                        <button class="btn btn-reject" 
                                                onclick="showRejectModal(@withdrawal.Id, '@withdrawal.Amount', '@withdrawal.UserWallet')">
                                            <ion-icon name="close"></ion-icon>
                                            Reject
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="empty-state">
                    <ion-icon name="checkmark-circle"></ion-icon>
                    <h3>No Pending Withdrawals</h3>
                    <p>Tất cả yêu cầu rút tiền đã được xử lý</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Reject Modal -->
<div id="rejectModal" class="modal-overlay">
    <div class="modal-content">
        <div class="modal-header">
            <h3>🚫 Reject Withdrawal</h3>
        </div>

        <div class="modal-info">
            <div class="modal-info-row">
                <span class="modal-info-label">Amount:</span>
                <span class="modal-info-value" id="rejectAmount"></span>
            </div>
            <div class="modal-info-row">
                <span class="modal-info-label">User:</span>
                <span class="modal-info-value" id="rejectUser"></span>
            </div>
        </div>

        <form method="post" action="/admin/trading/withdrawals/reject">
            @Html.AntiForgeryToken()
            <input type="hidden" id="rejectWithdrawalId" name="WithdrawalId" />

            <div class="form-group">
                <label>
                    Rejection Reason <span style="color: #ef4444;">*</span>
                </label>
                <textarea name="Reason" 
                          class="form-control" 
                          rows="4" 
                          required 
                          placeholder="Enter detailed reason for rejection..."></textarea>
            </div>

            <div class="modal-actions">
                <button type="button" class="btn btn-back" onclick="closeRejectModal()">
                    Cancel
                </button>
                <button type="submit" class="btn btn-reject">
                    <ion-icon name="close-circle"></ion-icon>
                    Reject Withdrawal
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    function showRejectModal(id, amount, user) {
        document.getElementById('rejectWithdrawalId').value = id;
        document.getElementById('rejectAmount').textContent = amount + ' BNB';
        document.getElementById('rejectUser').textContent = user.substring(0, 10) + '...' + user.substring(user.length - 8);
        document.getElementById('rejectModal').classList.add('show');
    }

    function closeRejectModal() {
        document.getElementById('rejectModal').classList.remove('show');
    }

    // Close modal on overlay click
    document.getElementById('rejectModal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeRejectModal();
        }
    });

    // Escape key to close modal
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeRejectModal();
        }
    });
</script>

@if (TempData["Success"] != null)
{
    <div class="toast success">
        <ion-icon name="checkmark-circle"></ion-icon>
        <strong>@TempData["Success"]</strong>
    </div>
    <script>
        setTimeout(() => {
            const toast = document.querySelector('.toast.success');
            if (toast) {
                toast.style.opacity = '0';
                setTimeout(() => toast.remove(), 300);
            }
        }, 4000);
    </script>
}

@if (TempData["Error"] != null)
{
    <div class="toast error">
        <ion-icon name="close-circle"></ion-icon>
        <strong>@TempData["Error"]</strong>
    </div>
    <script>
        setTimeout(() => {
            const toast = document.querySelector('.toast.error');
            if (toast) {
                toast.style.opacity = '0';
                setTimeout(() => toast.remove(), 300);
            }
        }, 4000);
    </script>
}
</div>
</div>
