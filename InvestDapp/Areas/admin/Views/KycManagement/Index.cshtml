@using Microsoft.AspNetCore.Antiforgery
@{
    ViewData["Title"] = "Quản lý KYC";
    Layout = "~/Areas/admin/Views/Shared/_Layout.cshtml";
    var antiForgeryToken = ViewData["RequestVerificationToken"] as string ?? string.Empty;
}

@section Styles {
    <style>
        .main {
            position: absolute;
            width: calc(100% - 300px);
            left: 300px;
            min-height: 100vh;
            background: var(--gray-light);
            transition: 0.5s;
            padding: 20px;
        }

        .main.active {
            width: calc(100% - 80px);
            left: 80px;
        }

        .kyc-admin-page {
            display: flex;
            flex-direction: column;
            gap: 18px;
            overflow: visible;
        }

        .kyc-header {
            display: flex;
            flex-direction: column;
            gap: 8px;
            background: linear-gradient(135deg, #2563eb 0%, #3b82f6 100%);
            color: #fff;
            padding: 32px 28px;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(37, 99, 235, 0.25);
        }

        .kyc-header h1 {
            margin: 0;
            font-size: 28px;
            font-weight: 700;
            letter-spacing: -0.5px;
        }

        .kyc-header p {
            margin: 0;
            font-size: 15px;
            opacity: 0.95;
            line-height: 1.6;
        }

        .kyc-filters-card {
            background: var(--white);
            border-radius: 18px;
            padding: 24px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            display: flex;
            flex-direction: column;
            gap: 20px;
            border: 1px solid #e5e7eb;
        }

        .filter-row {
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
            align-items: center;
        }

        .filter-row label {
            font-weight: 600;
            color: var(--gray-dark);
            font-size: 14px;
        }

        .search-input {
            position: relative;
            flex: 1 1 260px;
        }

        .search-input input {
            width: 100%;
            height: 42px;
            border-radius: 12px;
            border: 1px solid #d1d5db;
            padding: 0 14px;
            font-size: 14px;
            transition: box-shadow 0.2s, border-color 0.2s;
        }

        .search-input input:focus {
            outline: none;
            border-color: var(--blue);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.15);
        }

        .status-filters {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .status-chip {
            border: 1px solid #d1d5db;
            background: #fff;
            color: var(--gray-dark);
            border-radius: 999px;
            padding: 8px 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 13px;
        }

        .status-chip.active {
            background: var(--blue);
            border-color: var(--blue);
            color: #fff;
            box-shadow: 0 8px 18px rgba(37, 99, 235, 0.25);
        }

        .status-chip:hover {
            transform: translateY(-2px);
        }

        .filter-select {
            height: 42px;
            border-radius: 12px;
            border: 1px solid #d1d5db;
            padding: 0 14px;
            font-size: 14px;
            min-width: 160px;
            background: #fff;
            transition: border-color 0.2s, box-shadow 0.2s;
        }

        .filter-select:focus {
            outline: none;
            border-color: var(--blue);
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.15);
        }

        .filter-actions {
            margin-left: auto;
            display: flex;
            gap: 10px;
        }

        .btn-outline {
            border: 1px solid var(--blue);
            color: var(--blue);
            background: transparent;
            padding: 10px 16px;
            border-radius: 12px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.2s;
        }

        .btn-primary {
            border: none;
            color: #fff;
            background: var(--blue);
            padding: 10px 16px;
            border-radius: 12px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.2s;
            box-shadow: 0 8px 18px rgba(37, 99, 235, 0.25);
        }

        .btn-outline:hover,
        .btn-primary:hover {
            transform: translateY(-2px);
        }

        .kyc-table-card {
            background: var(--white);
            border-radius: 18px;
            padding: 0;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            border: 1px solid #e5e7eb;
            position: relative;
        }

        .table-responsive {
            width: 100%;
            overflow-x: auto;
            overflow-y: visible;
            padding-bottom: 20px;
        }

        table.kyc-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            min-width: 800px;
        }

        .kyc-table thead {
            background: #f8fafc;
            border-bottom: 2px solid #e2e8f0;
            position: relative;
            z-index: 1;
        }

        .kyc-table tbody {
            position: static;
        }

        .kyc-table thead th {
            text-align: left;
            padding: 18px 20px;
            font-size: 13px;
            text-transform: uppercase;
            letter-spacing: 0.08em;
            color: #475569;
            font-weight: 700;
        }

        .kyc-table tbody tr {
            border-bottom: 1px solid #f1f5f9;
            transition: all 0.2s ease;
            position: relative;
        }

        .kyc-table tbody tr:hover {
            background: #f8fafc;
        }

        .kyc-table tbody tr:has(.action-dropdown.show) {
            z-index: 9999;
        }

        .kyc-table td {
            padding: 20px;
            vertical-align: middle;
            position: relative;
        }

        .kyc-table td:last-child {
            overflow: visible;
        }

        .kyc-user {
            display: flex;
            align-items: center;
            gap: 14px;
        }

        .kyc-avatar {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            background: linear-gradient(135deg, #e0e7ff 0%, #dbeafe 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: #2563eb;
            font-weight: 700;
            font-size: 16px;
            overflow: hidden;
            box-shadow: 0 2px 8px rgba(37, 99, 235, 0.15);
        }

        .kyc-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .kyc-user-info strong {
            color: #111827;
            font-size: 15px;
            font-weight: 600;
            display: block;
            margin-bottom: 4px;
        }

        .kyc-user-info span {
            display: block;
            color: #64748b;
            font-size: 13px;
            line-height: 1.5;
        }

        .kyc-user-info code {
            background: #f1f5f9;
            padding: 2px 8px;
            border-radius: 6px;
            font-size: 12px;
            color: #475569;
            font-family: 'Courier New', monospace;
        }

        .status-badge {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 6px 12px;
            border-radius: 999px;
            font-size: 12px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.06em;
        }

        .status-badge.pending {
            background: #fef3c7;
            color: #b45309;
        }

        .status-badge.approved {
            background: #dcfce7;
            color: #166534;
        }

        .status-badge.rejected {
            background: #fee2e2;
            color: #b91c1c;
        }

        .action-menu-wrapper {
            position: relative;
            display: inline-block;
        }

        .action-menu-wrapper:has(.action-dropdown.show) {
            z-index: 10000;
        }

        .action-menu-btn {
            width: 36px;
            height: 36px;
            border-radius: 10px;
            border: 1px solid #e5e7eb;
            background: #fff;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: #64748b;
            transition: all 0.2s;
            position: relative;
            z-index: 1;
        }

        .action-menu-btn:hover {
            background: #f8fafc;
            border-color: #cbd5e1;
            color: #334155;
        }

        .action-dropdown {
            position: fixed;
            background: #fff;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.3), 0 0 0 1px rgba(0,0,0,0.08);
            border: 1px solid #e5e7eb;
            min-width: 180px;
            z-index: 99999;
            opacity: 0;
            visibility: hidden;
            transform: translateY(-10px);
            transition: all 0.2s;
        }

        .action-dropdown.show {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        .action-dropdown-item {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 12px 16px;
            cursor: pointer;
            border: none;
            background: none;
            width: 100%;
            text-align: left;
            font-size: 14px;
            font-weight: 500;
            color: #334155;
            transition: all 0.15s;
        }

        .action-dropdown-item:first-child {
            border-radius: 12px 12px 0 0;
        }

        .action-dropdown-item:last-child {
            border-radius: 0 0 12px 12px;
        }

        .action-dropdown-item:hover {
            background: #f8fafc;
        }

        .action-dropdown-item ion-icon {
            font-size: 18px;
        }

        .action-dropdown-item.approve {
            color: #16a34a;
        }

        .action-dropdown-item.approve:hover {
            background: #f0fdf4;
        }

        .action-dropdown-item.reject {
            color: #dc2626;
        }

        .action-dropdown-item.reject:hover {
            background: #fef2f2;
        }

        .action-dropdown-item.revoke {
            color: #ea580c;
        }

        .action-dropdown-item.revoke:hover {
            background: #fff7ed;
        }

        .action-dropdown-item.view {
            color: #2563eb;
        }

        .action-dropdown-item.view:hover {
            background: #eff6ff;
        }

        .action-dropdown-divider {
            height: 1px;
            background: #e5e7eb;
            margin: 4px 0;
        }

        .kyc-empty {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 40px 20px;
            color: var(--gray-dark);
            gap: 10px;
        }

        .kyc-empty.hidden {
            display: none;
        }

        .pagination-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 24px;
            background: #fff;
            border-radius: 18px;
            border: 1px solid #e5e7eb;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            flex-wrap: wrap;
            gap: 16px;
        }

        .pagination-controls {
            display: flex;
            gap: 6px;
            flex-wrap: wrap;
        }

        .pagination-button {
            min-width: 36px;
            height: 36px;
            border-radius: 10px;
            border: 1px solid #d1d5db;
            background: #fff;
            color: #111827;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
        }

        .pagination-button.active {
            background: var(--blue);
            color: #fff;
            border-color: var(--blue);
        }

        .pagination-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .page-size-select {
            height: 38px;
            border-radius: 10px;
            border: 1px solid #d1d5db;
            padding: 0 12px;
            font-weight: 600;
        }

        .kyc-modal-backdrop {
            position: fixed;
            inset: 0;
            background: rgba(17, 24, 39, 0.55);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 20000;
        }

        .kyc-modal-backdrop.active {
            display: flex;
        }

        .kyc-modal {
            width: min(900px, 92vw);
            max-height: 85vh;
            overflow-y: auto;
            background: #fff;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            display: flex;
            flex-direction: column;
        }

        .kyc-modal::-webkit-scrollbar {
            width: 8px;
        }

        .kyc-modal::-webkit-scrollbar-track {
            background: #f1f5f9;
            border-radius: 0 20px 20px 0;
        }

        .kyc-modal::-webkit-scrollbar-thumb {
            background: #cbd5e1;
            border-radius: 10px;
        }

        .kyc-modal::-webkit-scrollbar-thumb:hover {
            background: #94a3b8;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 24px 28px;
            border-bottom: 1px solid #e5e7eb;
            background: linear-gradient(to bottom, #ffffff, #f8fafc);
            border-radius: 20px 20px 0 0;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .modal-header h2 {
            margin: 0;
            font-size: 20px;
            font-weight: 700;
            color: #111827;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .modal-header h2 ion-icon {
            font-size: 24px;
            color: #2563eb;
        }

        .close-modal {
            width: 36px;
            height: 36px;
            border-radius: 10px;
            border: none;
            background: #f1f5f9;
            color: #64748b;
            font-size: 24px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
        }

        .close-modal:hover {
            background: #e2e8f0;
            color: #334155;
        }

        .modal-body {
            padding: 24px 28px;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .modal-section {
            background: #f8fafc;
            border: 1px solid #e5e7eb;
            border-radius: 16px;
            padding: 20px;
            display: grid;
            gap: 16px;
        }

        .modal-section h3 {
            margin: 0;
            font-size: 15px;
            font-weight: 700;
            color: #1e293b;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            display: flex;
            align-items: center;
            gap: 8px;
            padding-bottom: 12px;
            border-bottom: 2px solid #e2e8f0;
        }

        .modal-section h3 ion-icon {
            font-size: 20px;
            color: #2563eb;
        }

        .modal-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 16px;
            background: #fff;
            padding: 16px;
            border-radius: 12px;
            overflow-wrap: break-word;
        }

        .modal-field {
            display: flex;
            flex-direction: column;
            gap: 6px;
        }

        .modal-field label {
            font-size: 11px;
            font-weight: 700;
            color: #64748b;
            text-transform: uppercase;
            letter-spacing: 0.08em;
        }

        .modal-field span {
            font-size: 14px;
            color: #1e293b;
            font-weight: 600;
            line-height: 1.5;
            word-break: break-word;
            overflow-wrap: break-word;
        }

        .modal-field code {
            font-family: 'Courier New', monospace;
            font-size: 12px;
            background: #f1f5f9;
            padding: 4px 8px;
            border-radius: 6px;
            word-break: break-all;
            display: inline-block;
            max-width: 100%;
        }

        .modal-field a {
            color: #2563eb;
            word-break: break-word;
            text-decoration: underline;
        }

        .modal-field a:hover {
            color: #1d4ed8;
        }

        .modal-field .status-badge {
            width: fit-content;
        }

        .document-links {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
            padding: 16px;
            background: #fff;
            border-radius: 12px;
        }

        .doc-link {
            padding: 10px 16px;
            border-radius: 10px;
            background: #2563eb;
            color: #fff;
            font-weight: 600;
            font-size: 13px;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s;
        }

        .doc-link:hover {
            background: #1d4ed8;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(37, 99, 235, 0.3);
        }

        .doc-link ion-icon {
            font-size: 18px;
        }

        .toast {
            position: fixed;
            top: 24px;
            right: 24px;
            background: #111827;
            color: #fff;
            padding: 14px 16px;
            border-radius: 12px;
            box-shadow: 0 12px 24px rgba(15, 23, 42, 0.25);
            z-index: 25000;
            opacity: 0;
            transform: translateY(-10px);
            transition: opacity 0.3s, transform 0.3s;
        }

        .toast.show {
            opacity: 1;
            transform: translateY(0);
        }

        .loading-row td {
            position: relative;
            overflow: hidden;
        }

        .loading-row td::after {
            content: "";
            position: absolute;
            inset: 0;
            background: linear-gradient(90deg, rgba(241,245,249,0), rgba(96,165,250,0.3), rgba(241,245,249,0));
            animation: shimmer 1.2s infinite;
        }

        @@keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        @@media (max-width: 991px) {
            .main {
                width: 100%;
                left: 0;
            }

            .main.active {
                left: 300px;
            }
        }

        @@media (max-width: 768px) {
            .filter-actions {
                width: 100%;
                justify-content: stretch;
            }

            .filter-actions button {
                flex: 1;
            }

            .pagination-bar {
                flex-direction: column;
                align-items: flex-start;
            }
        }
    </style>
}

<div class="main">
    <div class="kyc-admin-page">
        <header class="kyc-header">
            <h1>Trung tâm duyệt KYC</h1>
            <p>Quản lý, tìm kiếm và kiểm soát tư cách KYC của nhà gây quỹ theo thời gian thực.</p>
        </header>

        <section class="kyc-filters-card">
            <div class="filter-row">
                <div class="search-input">
                    <input id="searchTerm" type="search" placeholder="Tìm theo tên, email, wallet, CCCD, công ty..." aria-label="Tìm kiếm hồ sơ KYC" />
                </div>
                <select id="accountTypeFilter" class="filter-select" aria-label="Lọc loại tài khoản">
                    <option value="">Tất cả loại tài khoản</option>
                    <option value="individual">Cá nhân</option>
                    <option value="company">Công ty</option>
                </select>
                <div class="filter-actions">
                    <button type="button" id="refreshBtn" class="btn-primary">Làm mới</button>
                    <button type="button" id="resetBtn" class="btn-outline">Đặt lại</button>
                </div>
            </div>
            <div class="filter-row">
                <label>Trạng thái</label>
                <div class="status-filters" id="statusFilters">
                    <button type="button" class="status-chip" data-status="">Tất cả</button>
                    <button type="button" class="status-chip active" data-status="pending">Chờ duyệt</button>
                    <button type="button" class="status-chip" data-status="approved">Đã duyệt</button>
                    <button type="button" class="status-chip" data-status="rejected">Bị từ chối</button>
                </div>
            </div>
        </section>

        <section class="kyc-table-card">
            <div class="table-responsive">
                <table class="kyc-table" aria-live="polite">
                    <thead>
                        <tr>
                            <th style="width: 35%;">Người dùng</th>
                            <th style="width: 12%;">Loại tài khoản</th>
                            <th style="width: 15%;">Trạng thái</th>
                            <th style="width: 18%;">Thời gian gửi</th>
                            <th style="width: 20%; text-align: center;">Thao tác</th>
                        </tr>
                    </thead>
                    <tbody id="kycTableBody">
                        <tr class="loading-row">
                            <td colspan="5" style="text-align: center; padding: 40px;">Đang tải dữ liệu...</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div id="kycEmptyState" class="kyc-empty hidden">
                <strong>Không có hồ sơ nào phù hợp bộ lọc hiện tại.</strong>
                <span>Hãy điều chỉnh bộ lọc tìm kiếm hoặc thử làm mới dữ liệu.</span>
            </div>
        </section>

        <section class="pagination-bar" aria-label="Phân trang hồ sơ KYC">
            <div id="kycSummary" class="pagination-summary">Đang tải...</div>
            <div class="pagination-controls" id="kycPagination"></div>
            <div class="pagination-controls">
                <label for="pageSizeSelect">Bản ghi / trang</label>
                <select id="pageSizeSelect" class="page-size-select">
                    <option value="10" selected>10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                </select>
            </div>
        </section>
    </div>
</div>

<input type="hidden" id="kycRequestVerificationToken" value="@antiForgeryToken" />

<div class="kyc-modal-backdrop" id="kycModalBackdrop" role="dialog" aria-modal="true" aria-hidden="true">
    <div class="kyc-modal" role="document">
        <div class="modal-header">
            <h2><ion-icon name="document-text-outline"></ion-icon>Chi tiết hồ sơ KYC</h2>
            <button type="button" class="close-modal" id="closeModalBtn" aria-label="Đóng">
                <ion-icon name="close-outline"></ion-icon>
            </button>
        </div>
        <div class="modal-body">
            <div class="modal-section">
                <h3><ion-icon name="person-outline"></ion-icon>Thông tin người dùng</h3>
                <div class="modal-grid" id="modalUserInfo"></div>
            </div>
            <div class="modal-section" id="modalIndividualSection" style="display:none;">
                <h3><ion-icon name="card-outline"></ion-icon>Thông tin cá nhân</h3>
                <div class="modal-grid" id="modalIndividualInfo"></div>
                <div class="document-links" id="modalIndividualDocs"></div>
            </div>
            <div class="modal-section" id="modalCompanySection" style="display:none;">
                <h3><ion-icon name="business-outline"></ion-icon>Thông tin doanh nghiệp</h3>
                <div class="modal-grid" id="modalCompanyInfo"></div>
                <div class="document-links" id="modalCompanyDocs"></div>
            </div>
        </div>
    </div>
</div>

<div id="toast" class="toast" role="status" aria-live="assertive"></div>

@section Scripts {
    <script>
        (function(){
            const state = {
                status: 'pending',
                accountType: '',
                search: '',
                page: 1,
                pageSize: 10,
                total: 0,
                totalPages: 0
            };

            const cache = new Map();

            const elements = {
                tableBody: document.getElementById('kycTableBody'),
                emptyState: document.getElementById('kycEmptyState'),
                summary: document.getElementById('kycSummary'),
                pagination: document.getElementById('kycPagination'),
                statusFilters: document.getElementById('statusFilters'),
                search: document.getElementById('searchTerm'),
                accountType: document.getElementById('accountTypeFilter'),
                refreshBtn: document.getElementById('refreshBtn'),
                resetBtn: document.getElementById('resetBtn'),
                pageSizeSelect: document.getElementById('pageSizeSelect'),
                tokenInput: document.getElementById('kycRequestVerificationToken'),
                modalBackdrop: document.getElementById('kycModalBackdrop'),
                closeModalBtn: document.getElementById('closeModalBtn'),
                modalUserInfo: document.getElementById('modalUserInfo'),
                modalIndividualSection: document.getElementById('modalIndividualSection'),
                modalIndividualInfo: document.getElementById('modalIndividualInfo'),
                modalIndividualDocs: document.getElementById('modalIndividualDocs'),
                modalCompanySection: document.getElementById('modalCompanySection'),
                modalCompanyInfo: document.getElementById('modalCompanyInfo'),
                modalCompanyDocs: document.getElementById('modalCompanyDocs'),
                toast: document.getElementById('toast')
            };

            const endpoints = {
                list: '/admin/kyc-management/list',
                approve: id => `/admin/kyc-management/${id}/approve`,
                reject: id => `/admin/kyc-management/${id}/reject`,
                revoke: id => `/admin/kyc-management/${id}/revoke`
            };

            function showToast(message, type = 'info'){
                if(!elements.toast) return;
                elements.toast.textContent = message;
                elements.toast.style.background = type === 'error' ? '#b91c1c' : (type === 'success' ? '#166534' : '#111827');
                elements.toast.classList.add('show');
                setTimeout(()=> elements.toast.classList.remove('show'), 3000);
            }

            function setLoading(){
                cache.clear();
                elements.tableBody.innerHTML = `<tr class="loading-row"><td colspan="5" style="text-align: center; padding: 40px;">Đang tải dữ liệu...</td></tr>`;
                elements.emptyState.classList.add('hidden');
            }

            function formatDate(dateString){
                if(!dateString) return '—';
                const date = new Date(dateString);
                if(Number.isNaN(date.getTime())) return dateString;
                return date.toLocaleString();
            }

            function buildStatusBadge(status){
                const map = {
                    pending: { label: 'Chờ duyệt', cls: 'pending' },
                    approved: { label: 'Đã duyệt', cls: 'approved' },
                    rejected: { label: 'Bị từ chối', cls: 'rejected' }
                };
                const info = map[status] || map.pending;
                return `<span class="status-badge ${info.cls}">${info.label}</span>`;
            }

            function renderTable(items){
                if(!items.length){
                    elements.tableBody.innerHTML = '';
                    elements.emptyState.classList.remove('hidden');
                    return;
                }

                elements.emptyState.classList.add('hidden');

                const rows = items.map(item => {
                    cache.set(item.id, item);

                    const user = item.user || {};
                    const name = user.name ? user.name : 'Không rõ tên';
                    const email = user.email ? user.email : 'Không có email';
                    const wallet = user.walletAddress ? user.walletAddress : '—';

                    const initials = user.name ? user.name.split(' ').map(part => part.charAt(0)).join('').slice(0, 2).toUpperCase() : 'NA';
                    const avatar = user.avatar ? `<img src="${user.avatar}" alt="${name}" />` : initials;

                    const actions = [];
                    if(item.status === 'pending'){
                        actions.push(`<button class="action-dropdown-item approve" data-action="approve" data-id="${item.id}"><ion-icon name="checkmark-circle-outline"></ion-icon>Phê duyệt</button>`);
                        actions.push(`<button class="action-dropdown-item reject" data-action="reject" data-id="${item.id}"><ion-icon name="close-circle-outline"></ion-icon>Từ chối</button>`);
                    }
                    if(item.status === 'approved'){
                        actions.push(`<button class="action-dropdown-item revoke" data-action="revoke" data-id="${item.id}"><ion-icon name="warning-outline"></ion-icon>Hủy tư cách</button>`);
                    }
                    if(actions.length > 0){
                        actions.push(`<div class="action-dropdown-divider"></div>`);
                    }
                    actions.push(`<button class="action-dropdown-item view" data-action="view" data-id="${item.id}"><ion-icon name="eye-outline"></ion-icon>Xem chi tiết</button>`);

                    return `
                        <tr>
                            <td>
                                <div class="kyc-user">
                                    <div class="kyc-avatar">${avatar}</div>
                                    <div class="kyc-user-info">
                                        <strong>${name}</strong>
                                        <span>${email}</span>
                                        <span><code>${wallet}</code></span>
                                    </div>
                                </div>
                            </td>
                            <td><strong style="color: #475569;">${item.accountType === 'company' ? 'Công ty' : 'Cá nhân'}</strong></td>
                            <td>${buildStatusBadge(item.status)}</td>
                            <td style="color: #64748b; font-size: 14px;">${formatDate(item.submittedAt)}</td>
                            <td style="text-align: center;">
                                <div class="action-menu-wrapper">
                                    <button class="action-menu-btn" data-id="${item.id}">
                                        <ion-icon name="ellipsis-horizontal"></ion-icon>
                                    </button>
                                    <div class="action-dropdown">
                                        ${actions.join('')}
                                    </div>
                                </div>
                            </td>
                        </tr>
                    `;
                }).join('');

                elements.tableBody.innerHTML = rows;
            }

            function renderSummary(){
                const start = state.total === 0 ? 0 : ((state.page - 1) * state.pageSize) + 1;
                const end = Math.min(state.page * state.pageSize, state.total);
                elements.summary.textContent = `Hiển thị ${start} - ${end} / ${state.total} hồ sơ`;
            }

            function renderPagination(){
                elements.pagination.innerHTML = '';
                if(state.totalPages <= 1){
                    return;
                }

                const prevBtn = document.createElement('button');
                prevBtn.type = 'button';
                prevBtn.className = 'pagination-button';
                prevBtn.textContent = '‹';
                prevBtn.disabled = state.page === 1;
                prevBtn.addEventListener('click', () => changePage(state.page - 1));
                elements.pagination.appendChild(prevBtn);

                const pagesToShow = [];
                const maxButtons = 5;
                let start = Math.max(1, state.page - 2);
                let end = Math.min(state.totalPages, start + maxButtons - 1);
                if(end - start < maxButtons - 1){
                    start = Math.max(1, end - maxButtons + 1);
                }
                for(let i = start; i <= end; i++){
                    pagesToShow.push(i);
                }

                pagesToShow.forEach(pageNumber => {
                    const btn = document.createElement('button');
                    btn.type = 'button';
                    btn.className = 'pagination-button' + (pageNumber === state.page ? ' active' : '');
                    btn.textContent = pageNumber;
                    btn.addEventListener('click', () => changePage(pageNumber));
                    elements.pagination.appendChild(btn);
                });

                const nextBtn = document.createElement('button');
                nextBtn.type = 'button';
                nextBtn.className = 'pagination-button';
                nextBtn.textContent = '›';
                nextBtn.disabled = state.page === state.totalPages;
                nextBtn.addEventListener('click', () => changePage(state.page + 1));
                elements.pagination.appendChild(nextBtn);
            }

            async function loadKycs(){
                setLoading();
                try{
                    const params = new URLSearchParams({
                        page: state.page,
                        pageSize: state.pageSize
                    });

                    if(state.status){ params.set('status', state.status); }
                    if(state.accountType){ params.set('accountType', state.accountType); }
                    if(state.search){ params.set('search', state.search); }

                    const response = await fetch(`${endpoints.list}?${params.toString()}`, {
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    if(!response.ok){
                        throw new Error('Không thể tải dữ liệu.');
                    }

                    const payload = await response.json();
                    const data = payload && (payload.data || payload.Data) ? (payload.data || payload.Data) : {};
                    const rawItems = data && (data.items || data.Items) ? (data.items || data.Items) : [];
                    state.total = data && (typeof data.total === 'number' ? data.total : (typeof data.Total === 'number' ? data.Total : rawItems.length));
                    state.totalPages = state.pageSize > 0 ? Math.max(1, Math.ceil(state.total / state.pageSize)) : 1;
                    renderTable(rawItems.map(normalizeItem));
                    renderSummary();
                    renderPagination();
                }catch(error){
                    console.error(error);
                    const message = error && error.message ? error.message : 'Đã xảy ra lỗi.';
                    elements.tableBody.innerHTML = `<tr><td colspan="5" style="text-align: center; padding: 40px; color: #ef4444;">${message}</td></tr>`;
                    elements.summary.textContent = 'Không thể tải dữ liệu.';
                    showToast(message || 'Không thể tải dữ liệu.', 'error');
                }
            }

            function normalizeItem(raw){
                if(!raw) return {};
                return {
                    id: raw.id !== undefined ? raw.id : raw.Id,
                    accountType: raw.accountType || raw.AccountType || '',
                    status: raw.status || raw.Status || 'pending',
                    submittedAt: raw.submittedAt !== undefined ? raw.submittedAt : raw.SubmittedAt,
                    contactEmail: raw.contactEmail || raw.ContactEmail,
                    websiteOrLinkedIn: raw.websiteOrLinkedIn || raw.WebsiteOrLinkedIn,
                    user: normalizeUser(raw.user || raw.User),
                    individual: normalizeIndividual(raw.individual || raw.Individual),
                    company: normalizeCompany(raw.company || raw.Company)
                };
            }

            function normalizeUser(user){
                if(!user) return null;
                return {
                    id: user.id !== undefined ? user.id : user.Id,
                    name: user.name || user.Name || '',
                    email: user.email || user.Email || '',
                    walletAddress: user.walletAddress || user.WalletAddress || '',
                    avatar: user.avatar || user.Avatar || ''
                };
            }

            function normalizeIndividual(info){
                if(!info) return null;
                return {
                    fullName: info.fullName || info.FullName || '',
                    idNumber: info.idNumber || info.IdNumber || '',
                    nationality: info.nationality || info.Nationality || '',
                    idFrontImagePath: info.idFrontImagePath || info.IdFrontImagePath || '',
                    selfieWithIdPath: info.selfieWithIdPath || info.SelfieWithIdPath || ''
                };
            }

            function normalizeCompany(info){
                if(!info) return null;
                return {
                    companyName: info.companyName || info.CompanyName || '',
                    registrationNumber: info.registrationNumber || info.RegistrationNumber || '',
                    registeredCountry: info.registeredCountry || info.RegisteredCountry || '',
                    businessLicensePdfPath: info.businessLicensePdfPath || info.BusinessLicensePdfPath || '',
                    directorIdImagePath: info.directorIdImagePath || info.DirectorIdImagePath || ''
                };
            }

            function changePage(page){
                if(page < 1 || page > state.totalPages || page === state.page) return;
                state.page = page;
                loadKycs();
            }

            let searchTimer = null;
            elements.search.addEventListener('input', (event) => {
                const value = event.target.value.trim();
                if(searchTimer) clearTimeout(searchTimer);
                searchTimer = setTimeout(() => {
                    state.search = value;
                    state.page = 1;
                    loadKycs();
                }, 350);
            });

            elements.accountType.addEventListener('change', (event) => {
                state.accountType = event.target.value;
                state.page = 1;
                loadKycs();
            });

            elements.statusFilters.addEventListener('click', (event) => {
                const target = event.target.closest('.status-chip');
                if(!target) return;
                const status = target && target.dataset && typeof target.dataset.status === 'string' ? target.dataset.status : '';
                state.status = status;
                state.page = 1;
                elements.statusFilters.querySelectorAll('.status-chip').forEach(btn => btn.classList.toggle('active', btn === target));
                loadKycs();
            });

            elements.refreshBtn.addEventListener('click', () => {
                loadKycs();
            });

            elements.resetBtn.addEventListener('click', () => {
                elements.search.value = '';
                elements.accountType.value = '';
                state.search = '';
                state.accountType = '';
                state.status = '';
                state.page = 1;
                elements.statusFilters.querySelectorAll('.status-chip').forEach(btn => btn.classList.remove('active'));
                elements.statusFilters.querySelector('[data-status=""]').classList.add('active');
                loadKycs();
            });

            elements.pageSizeSelect.addEventListener('change', (event) => {
                state.pageSize = Number(event.target.value) || 10;
                state.page = 1;
                loadKycs();
            });

            elements.tableBody.addEventListener('click', (event) => {
                const menuBtn = event.target.closest('.action-menu-btn');
                if(menuBtn){
                    event.stopPropagation();
                    const dropdown = menuBtn.nextElementSibling;
                    const allDropdowns = document.querySelectorAll('.action-dropdown');
                    allDropdowns.forEach(function(d){
                        if(d !== dropdown){
                            d.classList.remove('show');
                        }
                    });
                    
                    if(dropdown.classList.contains('show')){
                        dropdown.classList.remove('show');
                    } else {
                        const rect = menuBtn.getBoundingClientRect();
                        dropdown.style.top = (rect.bottom + 4) + 'px';
                        dropdown.style.left = (rect.right - 180) + 'px';
                        dropdown.classList.add('show');
                    }
                    return;
                }

                const button = event.target.closest('button[data-action]');
                if(!button) return;
                const action = button.dataset.action;
                const id = Number(button.dataset.id);
                if(!id) return;

                const allDropdowns = document.querySelectorAll('.action-dropdown');
                allDropdowns.forEach(function(d){ d.classList.remove('show'); });

                switch(action){
                    case 'approve':
                        confirmAction('Bạn có chắc chắn muốn phê duyệt hồ sơ này?', () => mutateStatus(id, 'approve'));
                        break;
                    case 'reject':
                        confirmAction('Bạn có chắc chắn muốn từ chối hồ sơ này?', () => mutateStatus(id, 'reject'));
                        break;
                    case 'revoke':
                        confirmAction('Hủy tư cách KYC sẽ khiến người dùng mất quyền truy cập đặc biệt. Tiếp tục?', () => mutateStatus(id, 'revoke'));
                        break;
                    case 'view':
                        openModal(id);
                        break;
                }
            });

            document.addEventListener('click', function(){
                const allDropdowns = document.querySelectorAll('.action-dropdown');
                allDropdowns.forEach(function(d){ d.classList.remove('show'); });
            });

            function confirmAction(message, callback){
                if(window.confirm(message)){
                    if(typeof callback === 'function'){
                        callback();
                    }
                }
            }

            async function mutateStatus(id, action){
                const endpoint = endpoints[action](id);
                const token = elements.tokenInput.value;
                try{
                    const response = await fetch(endpoint, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': token,
                            'Accept': 'application/json'
                        },
                        credentials: 'same-origin'
                    });

                    if(!response.ok){
                        const err = await safeJson(response);
                        const message = err && (err.message || err.Message) ? (err.message || err.Message) : 'Cập nhật thất bại.';
                        throw new Error(message);
                    }

                    const payload = await response.json();
                    const successMessage = payload && (payload.message || payload.Message) ? (payload.message || payload.Message) : 'Cập nhật thành công.';
                    showToast(successMessage, 'success');
                    loadKycs();
                }catch(error){
                    console.error(error);
                    const message = error && error.message ? error.message : 'Không thể cập nhật.';
                    showToast(message, 'error');
                }
            }

            async function safeJson(response){
                try{ return await response.json(); }
                catch{ return null; }
            }

            function openModal(id){
                const record = cache.get(id);
                if(!record) return;

                fillModal(record);
                elements.modalBackdrop.classList.add('active');
                elements.modalBackdrop.setAttribute('aria-hidden', 'false');
            }

            function fillModal(record){
                const user = record.user || {};
                const individual = record.individual || null;
                const company = record.company || null;

                const userInfo = [];
                userInfo.push(renderModalField('Tên hiển thị', user.name || '—'));
                userInfo.push(renderModalField('Email', user.email || '—'));
                userInfo.push(renderModalField('Wallet', user.walletAddress || '—'));
                userInfo.push(renderModalField('Loại tài khoản', record.accountType === 'company' ? 'Công ty' : 'Cá nhân'));
                userInfo.push(renderModalField('Trạng thái', buildStatusBadge(record.status), true));
                userInfo.push(renderModalField('Gửi lúc', formatDate(record.submittedAt)));
                userInfo.push(renderModalField('Email liên hệ', record.contactEmail || '—'));
                userInfo.push(renderModalField('Website / LinkedIn', record.websiteOrLinkedIn ? `<a href="${record.websiteOrLinkedIn}" target="_blank" rel="noopener">${record.websiteOrLinkedIn}</a>` : '—', true));
                elements.modalUserInfo.innerHTML = userInfo.join('');

                if(individual){
                    elements.modalIndividualSection.style.display = '';
                    elements.modalIndividualInfo.innerHTML = [
                        renderModalField('Họ và tên', individual.fullName || '—'),
                        renderModalField('Số CCCD', individual.idNumber || '—'),
                        renderModalField('Quốc tịch', individual.nationality || '—')
                    ].join('');
                    elements.modalIndividualDocs.innerHTML = buildDocumentLinks([
                        { label: 'Ảnh CCCD mặt trước', url: individual.idFrontImagePath },
                        { label: 'Ảnh selfie với CCCD', url: individual.selfieWithIdPath }
                    ]);
                } else {
                    elements.modalIndividualSection.style.display = 'none';
                }

                if(company){
                    elements.modalCompanySection.style.display = '';
                    elements.modalCompanyInfo.innerHTML = [
                        renderModalField('Tên công ty', company.companyName || '—'),
                        renderModalField('Mã số ĐKKD', company.registrationNumber || '—'),
                        renderModalField('Quốc gia đăng ký', company.registeredCountry || '—')
                    ].join('');
                    elements.modalCompanyDocs.innerHTML = buildDocumentLinks([
                        { label: 'Giấy phép kinh doanh (PDF)', url: company.businessLicensePdfPath },
                        { label: 'CCCD/Passport Giám đốc', url: company.directorIdImagePath }
                    ]);
                } else {
                    elements.modalCompanySection.style.display = 'none';
                }
            }

            function renderModalField(label, value, allowHtml){
                const displayValue = value !== undefined && value !== null && value !== '' ? value : '—';
                return allowHtml
                    ? `<div class="modal-field"><label>${label}</label><span>${displayValue}</span></div>`
                    : `<div class="modal-field"><label>${label}</label><span>${escapeHtml(displayValue)}</span></div>`;
            }

            function buildDocumentLinks(docs){
                const validDocs = (docs || []).filter(function(doc){
                    return doc && doc.url;
                });

                const links = validDocs.map(function(doc){
                    const label = doc.label ? escapeHtml(doc.label) : 'Tài liệu';
                    return `<a class="doc-link" href="${doc.url}" target="_blank" rel="noopener"><ion-icon name="document-attach-outline"></ion-icon>${label}</a>`;
                });

                return links.length ? links.join('') : '<span style="color: #64748b; font-style: italic;">Không có tài liệu đính kèm</span>';
            }
            function escapeHtml(value){
                const div = document.createElement('div');
                div.textContent = value !== undefined && value !== null ? String(value) : '';
                return div.innerHTML;
            }

            function closeModal(){
                elements.modalBackdrop.classList.remove('active');
                elements.modalBackdrop.setAttribute('aria-hidden', 'true');
            }

            elements.closeModalBtn.addEventListener('click', closeModal);
            elements.modalBackdrop.addEventListener('click', (event) => {
                if(event.target === elements.modalBackdrop){
                    closeModal();
                }
            });
            document.addEventListener('keydown', (event) => {
                if(event.key === 'Escape' && elements.modalBackdrop.classList.contains('active')){
                    closeModal();
                }
            });

            loadKycs();
        })();
    </script>
}
