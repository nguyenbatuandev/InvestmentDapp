@using Microsoft.AspNetCore.Authorization
@{
    Layout = null;
    var year = DateTime.Now.Year;
}
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewData["Title"] - InvestDapp</title>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@300;400;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />

    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/InvestDapp.styles.css" asp-append-version="true" />

    <style>
        :root {
            --bg: #070a12;
            --fg: #e6eefb;
            --muted: #9fb0c3;
            --primary: #6cf0ff;
            --accent: #9b6bff;
            --border: rgba(255,255,255,.12);
            --card: rgba(255,255,255,.06);
            --radius: 14px;
            --shadow: 0 10px 40px rgba(0,0,0,.45), inset 0 0 0 1px rgba(255,255,255,.03);
            --header-h: 72px;
            --blur: 14px;
            --glass: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02));

              /* scale */
            --sp-1:6px; --sp-2:10px; --sp-3:14px; --sp-4:18px; --sp-5:24px; --sp-6:32px;
            --fs-0:12.5px; --fs-1:14px; --fs-2:15.5px; --fs-3:17px; --fs-4:19px; --fs-5:22px; --fs-6:26px;
            --ok:#22c55e; --warn:#ffb800; --bad:#ff6b6b;
        }

        .hidden {
            display: none !important;
        }

        html, body {
            height: 100%
        }

        body {
            margin: 0;
            font-family: 'Plus Jakarta Sans',system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
            color: var(--fg);
            background: radial-gradient(1200px 1200px at 80% -10%, #1a1f35 0%, rgba(7,10,18,0) 60%), radial-gradient(900px 900px at -10% 100%, #151c2f 0%, rgba(7,10,18,0) 60%), var(--bg);
        }

        /* ===== Top bar ===== */
        .topbar {
            position: fixed;
            inset: 16px 16px auto 16px;
            z-index: 80;
            top: 0;
            z-index: 1000;
            backdrop-filter: blur(var(--blur));
            background: linear-gradient(180deg, rgba(255,255,255,.08), rgba(255,255,255,.02));
            border: 1px solid var(--border);
            backdrop-filter: blur(var(--blur));
            padding: 0px 14px;
            border-radius: 14px;
            box-shadow: var(--shadow);
            margin-top: 15px;
        }

            .topbar .bar {
                height: var(--header-h);
                display: flex;
                align-items: center;
                justify-content: space-between;
                gap: 14px;
                padding: 0 16px;
                max-width: 1200px;
                margin: auto;
            }

        .brand {
            display: flex;
            align-items: center;
            gap: 10px;
            text-decoration: none;
            color: var(--fg);
            font-weight: 800;
            letter-spacing: .2px
        }

            .brand .logo {
                width: 34px;
                height: 34px;
                border-radius: 10px;
                display: grid;
                place-items: center;
                background: conic-gradient(from 180deg,#6cf0ff,#9b6bff,#6cf0ff);
                filter: saturate(120%)
            }

                .brand .logo svg {
                    width: 20px;
                    height: 20px;
                    filter: drop-shadow(0 0 8px rgba(108,240,255,.6))
                }

        .nav {
            display: flex;
            gap: 8px;
            align-items: center
        }

            .nav a {
                --active: 0;
                position: relative;
                padding: 10px 12px;
                border-radius: 12px;
                text-decoration: none;
                color: var(--fg);
                font-weight: 600;
                opacity: .9
            }

                .nav a:hover {
                    opacity: 1
                }

                .nav a[aria-current="page"] {
                    --active: 1
                }

                .nav a::after {
                    content: "";
                    position: absolute;
                    inset: 0;
                    border-radius: 12px;
                    background: linear-gradient(90deg, rgba(108,240,255,.18), rgba(155,107,255,.18));
                    opacity: var(--active);
                    transition: opacity .2s
                }

        .btn {
            --glow: rgba(108,240,255,.45);
            background: linear-gradient(180deg, rgba(108,240,255,.18), rgba(155,107,255,.18));
            border: 1px solid var(--border);
            color: var(--fg);
            padding: 10px 14px;
            border-radius: 12px;
            font-weight: 700;
            letter-spacing: .2px;
            box-shadow: 0 0 0 0 var(--glow);
            transition: transform .18s, box-shadow .18s, background .18s;
            cursor: pointer
        }

            .btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 26px var(--glow)
            }

            .btn.secondary {
                background: linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02))
            }

        /* Wallet dropdown */
        .wallet-dropdown {
            position: relative
        }

        .wd-trigger {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 10px;
            border: 1px solid var(--border);
            border-radius: 12px;
            background: var(--glass);
            cursor: pointer
        }

        /* ensure trigger/menu items are positioning contexts for badges */
        .wd-trigger { position: relative; }
        .wd-item { position: relative; }

        /* unread badge placement (dot) */
        #combinedBadge, #unreadBadgeMenu, #notificationBadgeMenu {
            position: absolute;
            display: inline-grid;
            place-items: center;
            min-width: 18px;
            height: 18px;
            padding: 0 4px;
            border-radius: 999px;
            background: #ff5470;
            color: #fff;
            font-size: 11px;
            font-weight: 800;
            line-height: 1;
        }

        /* place the combined badge on the wallet trigger (top-right) */
        #combinedBadge { top: -6px; right: -6px; transform: translate(0, 0); }

        /* place the menu badges to the right inside menu items */
        #unreadBadgeMenu, #notificationBadgeMenu { top: 50%; right: 12px; transform: translateY(-50%); }

        .avatar {
            width: 28px;
            height: 28px;
            border-radius: 50%;
            background: #223;
            border: 1px solid var(--border);
            overflow: hidden
        }

        .addr {
            font-weight: 700;
            letter-spacing: .2px;
            opacity: .95
        }

        .badge {
            display: inline-grid;
            place-items: center;
            min-width: 16px;
            height: 16px;
            padding: 0 4px;
            border-radius: 999px;
            background: #ff5470;
            color: #fff;
            font-size: 11px;
            font-weight: 800
        }

        .wd-menu {
            position: absolute;
            right: 0;
            top: 42px;
            min-width: 240px;
            background: linear-gradient(180deg, rgba(255,255,255,.08), rgba(255,255,255,.02));
            border: 1px solid var(--border);
            border-radius: 12px;
            box-shadow: var(--shadow);
            padding: 8px;
            display: none
        }

            .wd-menu.open {
                display: block
            }

        .wd-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 8px;
            padding: 10px;
            border-radius: 10px;
            text-decoration: none;
            color: var(--fg)
        }

            .wd-item:hover {
                background: var(--card)
            }

        /* Ensure buttons inside wallet menu look like links/items (no native button chrome) */
        button.wd-item, .wd-item[role="menuitem"] {
            background: transparent;
            border: none;
            padding: 10px;
            width: 100%;
            text-align: left;
            color: var(--fg);
            font-size: .95rem;
            cursor: pointer;
        }

        button.wd-item:focus { outline: 2px solid rgba(108,240,255,.18); outline-offset: 2px; }

        /* Emphasize logout with danger color, but keep layout consistent */
        #logoutBtn { color: var(--danger); font-weight:700; }

        /* Content & Footer */
        main {
            min-height: calc(100vh - var(--header-h) - 220px);
        }

        .container-lg {
            max-width: 1200px;
            margin: auto;
            padding: 0 16px
        }

        footer {
            margin-top: 40px;
            background: linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
            border-top: 1px solid var(--border)
        }

        .footer-wrap {
            max-width: 1200px;
            margin: auto;
            padding: 36px 16px;
            color: var(--muted)
        }

    /* Chat widget - fixed to viewport; input pinned to panel bottom */
        .chat {
            position: fixed;
            right: 18px;
            bottom: 18px;
            z-index: 950;
            /* container now only holds the bubble, panel is fixed separately */
        }

        .chat-bubble {
            width: 52px;
            height: 52px;
            border-radius: 26px;
            display: grid;
            place-items: center;
            background: linear-gradient(180deg, rgba(108,240,255,.25), rgba(155,107,255,.22));
            border: 1px solid var(--border);
            box-shadow: var(--shadow);
            cursor: pointer;
        }

        /* Make panel fixed to viewport so it's never clipped by parent stacking contexts */
        .chat-panel {
            position: fixed;
            right: 18px;
            bottom: 18px;
            width: min(420px, 92vw);
            max-height: 80vh;
            height: 560px; /* initial height */
            display: none; /* JS will toggle display then add class to animate */
            flex-direction: column;
            /* opaque dark background for better readability */
            background: rgba(8,10,14,0.96);
            border: 1px solid rgba(255,255,255,0.06);
            border-radius: 14px;
            box-shadow: var(--shadow);
            overflow: hidden;
            /* enable transform/opacity transitions for open/close */
            transition: transform .28s cubic-bezier(.2,.9,.2,1), opacity .2s ease;
            transform: translateY(14px) scale(.98);
            opacity: 0;
            box-sizing: border-box;
        }

            .chat-panel.open { display: flex; transform: translateY(0) scale(1); opacity: 1; }

        .chat-head {
            padding: 10px 12px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 1px solid var(--border);
            flex: 0 0 auto;
        }

        .chat-body {
            padding: 10px 12px;
            overflow: auto;
            display: flex;
            flex-direction: column;
            gap: 8px;
            flex: 1 1 auto; /* take available space */
            /* keep space at bottom so messages aren't hidden behind the fixed input */
            padding-bottom: 96px;
            align-items: stretch;
        }

        .msg {
            background: rgba(255,255,255,0.03);
            border: 1px solid rgba(255,255,255,0.04);
            padding: 8px 10px;
            border-radius: 10px;
            max-width: 86%;
            display: inline-block;
            word-break: break-word;
            align-self: flex-start;
        }

        .me { align-self: flex-end; background: linear-gradient(180deg, rgba(108,240,255,.12), rgba(155,107,255,.06)); }

        /* typing indicator */
        .msg.typing { background: transparent; border: none; opacity: .9; }
        .typing-dots { display:inline-block; width:36px; height:12px; position:relative }
        .typing-dots span{ display:block; width:8px; height:8px; background:#cfeff6; border-radius:8px; position:absolute; bottom:0; animation:td 1s infinite; opacity:.9 }
        .typing-dots span:nth-child(1){ left:0; animation-delay:0s }
        .typing-dots span:nth-child(2){ left:12px; animation-delay:.15s }
        .typing-dots span:nth-child(3){ left:24px; animation-delay:.3s }
        @@keyframes td{ 0%{ transform: translateY(0); opacity:.5 } 50%{ transform: translateY(-6px); opacity:1 } 100%{ transform: translateY(0); opacity:.5 } }

        .chat-foot {
            position: absolute;
            left: 0;
            right: 0;
            bottom: 0;
            display: grid;
            grid-template-columns: 1fr auto;
            gap: 6px;
            padding: 10px;
            border-top: 1px solid var(--border);
            background: linear-gradient(180deg, rgba(255,255,255,.02), rgba(255,255,255,.02));
            z-index: 6;
        }

        .nl-input {
            background: transparent;
            border: 0;
            outline: none;
            color: var(--fg);
            padding: 0 12px;
        }

        dialog#newWalletModal::backdrop {
            background: rgba(0,0,0,0.6);
            backdrop-filter: blur(4px);
        }

        dialog#newWalletModal {
            background: transparent;
            border: none;
            padding: 0;
        }

        dialog#newWalletModal form {
            background: linear-gradient(180deg, rgba(6,8,12,0.92), rgba(6,8,12,0.86));
            border: 1px solid rgba(255,255,255,0.04);
            border-radius: 14px;
            padding: 16px;
            color: var(--fg);
            box-shadow: 0 10px 30px rgba(0,0,0,0.6);
        }

        dialog#newWalletModal .nl-input {
            background: rgba(255,255,255,0.02);
            border: 1px solid rgba(255,255,255,0.04);
            padding: 10px 12px;
            border-radius: 10px;
            color: var(--fg);
            width: 100%;
            box-sizing: border-box;
        }

        dialog#newWalletModal .nl-input::placeholder {
            color: var(--muted);
            opacity: 0.95;
        }
    </style>

    @RenderSection("Styles", required: false)
</head>
<body>
    <form id="antiForgeryForm" method="post" class="d-none">@Html.AntiForgeryToken()</form>

    <script>
        window.__isAuthenticated = @(User?.Identity?.IsAuthenticated == true ? "true" : "false");
    </script>

    <header class="topbar" role="banner">
        <div class="bar">
            <a class="brand" asp-controller="Home" asp-action="Index">
                <span class="logo" aria-hidden="true">
                    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 2l8.66 5v10L12 22 3.34 17V7L12 2z" stroke="#dff9ff" stroke-width="1.6" /><path d="M12 6v12M7.5 8.6l9 6.8M16.5 8.6l-9 6.8" stroke="#b6f3ff" stroke-opacity=".8" /></svg>
                </span>
                <span>InvestDapp</span>
            </a>

            <!-- Nav CHUYỂN TRANG (không điều khiển slide) -->
            <nav class="nav" aria-label="Primary">
                <a asp-controller="Home" asp-action="Index" aria-current="page">Trang chủ</a>
                <a asp-controller="News" asp-action="Index">Tin tức</a>
                <a asp-controller="Campaigns" asp-action="Index">Dự án</a>
                <a asp-controller="TradingView" asp-action="Chart">Trading</a>
            </nav>

            <div class="wallet-area d-flex align-items-center gap-2">
                <!-- nút connect -->
                <button id="connectWalletBtn" class="btn">🔗 Kết nối Ví</button>

                <!-- dropdown ví khi đã kết nối -->
                <div id="walletDropdown" class="wallet-dropdown hidden">
                    <button class="wd-trigger" id="walletTrigger" aria-haspopup="true" aria-expanded="false">
                        <img id="avatar" class="avatar" alt="avatar" />
                        <span id="shortAddr" class="addr">0x…0000</span>
                        <span id="combinedBadge" class="badge hidden">0</span>
                    </button>
                    <div id="walletMenu" class="wd-menu" role="menu" aria-label="Wallet Menu">
                        <a class="wd-item" asp-controller="User" asp-action="Profile">Profile <span id="notificationBadgeMenu" class="badge hidden">0</span></a>
                        <a class="wd-item" asp-controller="Campaigns" asp-action="MyCampaigns">Quản lý chiến dịch</a>
                        <a class="wd-item" asp-controller="Support" asp-action="Index">Ticket hỗ trợ</a>
                        <a class="wd-item" asp-controller="Campaigns" asp-action="TaskAnalysis">Thống kê</a>
                        <a class="wd-item" asp-controller="Conversations" asp-action="Index">Messenger <span id="unreadBadgeMenu" class="badge hidden">0</span></a>
                        @* Admin link sẽ bật qua /User/GetUserProfile *@
                        <a id="adminLink" class="wd-item hidden" asp-area="Admin" asp-controller="Manage_Campaigns" asp-action="Index">Admin</a>
                        <button class="wd-item" id="logoutBtn">Logout</button>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <main role="main">
        <div class="container-lg">
            @RenderBody()
        </div>
    </main>

    <!-- Chat widget -->
    <div class="chat" id="chat">
        <div class="chat-bubble" id="chatBubble" title="Chat hỗ trợ">💬</div>
        <div class="chat-panel" id="chatPanel" role="dialog" aria-label="Chat widget">
            <div class="chat-head"><strong>Hỗ trợ</strong><button class="btn secondary" id="chatClose" aria-label="Đóng">✕</button></div>
            <div class="chat-body" id="chatBody"></div>
            <form id="chatForm" class="chat-foot">
                <input id="chatInput" class="nl-input" placeholder="Nhập tin nhắn..." autocomplete="off" />
                <button class="btn" type="submit">Gửi</button>
            </form>
        </div>
    </div>
    <audio id="notifSound" class="visually-hidden"><source src="data:audio/mp3;base64,//uQZAAAAAAAAAAAAAAAAAAAA" type="audio/mpeg"></audio>

    <!-- Modal ví mới -->
    <dialog id="newWalletModal">
        <form method="dialog" id="newWalletForm" style="min-width:320px;">
            <h3>Chào mừng ví mới</h3>
            <p class="text-muted">Hoàn tất thông tin để đồng bộ hồ sơ.</p>
            <div style="display:grid; gap:8px; margin:10px 0">
                <input id="nwName" class="nl-input" placeholder="Họ tên" required />
                <input id="nwEmail" type="email" class="nl-input" placeholder="Email" required />
            </div>
            <menu style="display:flex; gap:8px; justify-content:flex-end; margin-top:8px">
                <button value="cancel" class="btn secondary">Bỏ qua</button>
                <button value="ok" class="btn">Lưu</button>
            </menu>
        </form>
    </dialog>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>

    <script>
        // anti-forgery helper
        window.getRequestVerificationToken = function(){
          const el = document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]');
          return el ? el.value : '';
        }
    </script>

    <script>
        (function(){
          // Chat
          const chatBubble=document.getElementById('chatBubble');
          const chatPanel=document.getElementById('chatPanel');
          const chatClose=document.getElementById('chatClose');
          const chatBody=document.getElementById('chatBody');
          const chatForm=document.getElementById('chatForm');
          const chatInput=document.getElementById('chatInput');

                                function pushMsg(text, me=false, opts={}){
                                    const m=document.createElement('div'); m.className='msg'+(me?' me':'');
                                    if(opts.html){ m.innerHTML = text; } else { m.textContent = text; }
                                    chatBody.appendChild(m);
                                    chatBody.scrollTop = chatBody.scrollHeight;
                                    return m;
                                }

                                // typing indicator element (hidden until needed)
                                const typingEl = document.createElement('div'); typingEl.className='msg typing'; typingEl.innerHTML = '<span class="typing-dots"><span></span><span></span><span></span></span> Đang nhập...';
                                function openChatPanel(){
                                    if(chatPanel.classList.contains('open')) return;
                                    // make visible then trigger transition
                                    chatPanel.style.display = 'flex';
                                    // allow browser to apply display before adding class
                                    requestAnimationFrame(()=> requestAnimationFrame(()=>{
                                        chatPanel.classList.add('open');
                                    }));
                                    // focus after animation roughly completes
                                    setTimeout(()=>{ try{ chatInput.focus(); chatBody.scrollTop = chatBody.scrollHeight; }catch{} }, 260);
                                }

                                function closeChatPanel(){
                                    if(!chatPanel.classList.contains('open')){ chatPanel.style.display='none'; return; }
                                    // remove open class to start transition
                                    chatPanel.classList.remove('open');
                                    // after transition end hide it to remove from layout
                                    const onEnd = (ev)=>{
                                        if(ev && ev.target !== chatPanel) return;
                                        chatPanel.style.display = 'none';
                                        chatPanel.removeEventListener('transitionend', onEnd);
                                    };
                                    chatPanel.addEventListener('transitionend', onEnd);
                                }

                                chatBubble.addEventListener('click', openChatPanel);
                                chatClose.addEventListener('click', closeChatPanel);
                                chatForm.addEventListener('submit', async (e)=>{
                                    e.preventDefault(); const text=(chatInput.value||'').trim(); if(!text) return; pushMsg(text,true); chatInput.value='';
                                    // show typing indicator
                                    if(!chatBody.contains(typingEl)) chatBody.appendChild(typingEl);
                                    chatBody.scrollTop = chatBody.scrollHeight;
                                    try{
                                        const res = await fetch('/Home/SendMessage', {
                                            method:'POST',
                                            headers:{ 'Content-Type':'application/json', 'RequestVerificationToken': getRequestVerificationToken(), 'Cache-Control':'no-store' },
                                            body: JSON.stringify({ message: text })
                                        });
                                        if(res.ok){ const data=await res.json().catch(()=>({reply:'Đã gửi!'}));
                                                // replace typing indicator with actual reply
                                                if(chatBody.contains(typingEl)) chatBody.removeChild(typingEl);
                                                pushMsg(data.reply||'Đã gửi!');
                                        } else {
                                                if(chatBody.contains(typingEl)) chatBody.removeChild(typingEl);
                                                pushMsg('Lỗi gửi tin.');
                                        }
                                    }catch{
                                        if(chatBody.contains(typingEl)) chatBody.removeChild(typingEl);
                                        pushMsg('Mạng không ổn định.');
                                    }
                                    // ensure scroll after potential async reply
                                    setTimeout(()=>{ try{ chatBody.scrollTop = chatBody.scrollHeight; }catch{} }, 120);
                                });

          // Wallet/auth UI
          const connectBtn = document.getElementById('connectWalletBtn');
          const walletDropdown = document.getElementById('walletDropdown');
          const trigger = document.getElementById('walletTrigger');
          const menu = document.getElementById('walletMenu');
          const shortAddr = document.getElementById('shortAddr');
          const avatarImg = document.getElementById('avatar');
          const adminLink = document.getElementById('adminLink');
          const logoutBtn = document.getElementById('logoutBtn');
          const combinedBadge = document.getElementById('combinedBadge');
          const unreadBadge = document.getElementById('unreadBadgeMenu');
          const notificationBadge = document.getElementById('notificationBadgeMenu');
          const bell = document.getElementById('notifSound');
          const newWalletModal = document.getElementById('newWalletModal');
          const newWalletForm = document.getElementById('newWalletForm');

          function show(el, on){ if(!el) return; el.classList.toggle('hidden', !on); }
          function shorten(a){return a ? a.slice(0,6)+"…"+a.slice(-4) : '0x…'}
          
          let unreadMessages = 0;
          let unreadNotifications = 0;
          
          function setUnreadMessages(n){
            console.log('🔔 setUnreadMessages called with:', n, 'current:', unreadMessages);
            unreadMessages = n;
            updateBadges();
          }
          
          function setUnreadNotifications(n){
            console.log('🔔 setUnreadNotifications called with:', n, 'current:', unreadNotifications);
            unreadNotifications = n;
            updateBadges();
          }
          
          // ✅ Expose functions to window for cross-script access
          window.setUnreadMessages = setUnreadMessages;
          window.setUnreadNotifications = setUnreadNotifications;
          
          function updateBadges(){
            const totalUnread = unreadMessages + unreadNotifications;
            console.log('🎨 updateBadges: messages=', unreadMessages, 'notifications=', unreadNotifications, 'total=', totalUnread);
            
            // Update combined badge on wallet trigger
            if(totalUnread > 0){
              const txt = (totalUnread > 99 ? '99+' : String(totalUnread));
              combinedBadge.textContent = txt;
              combinedBadge.classList.remove('hidden');
              console.log('✅ combinedBadge updated:', txt);
            } else {
              combinedBadge.classList.add('hidden');
              console.log('✅ combinedBadge hidden');
            }
            
            // Update individual badges in menu
            if(unreadMessages > 0){
              const txt = (unreadMessages > 99 ? '99+' : String(unreadMessages));
              unreadBadge.textContent = txt;
              unreadBadge.classList.remove('hidden');
            } else {
              unreadBadge.classList.add('hidden');
            }
            
            if(unreadNotifications > 0){
              const txt = (unreadNotifications > 99 ? '99+' : String(unreadNotifications));
              notificationBadge.textContent = txt;
              notificationBadge.classList.remove('hidden');
            } else {
              notificationBadge.classList.add('hidden');
            }
            
            // Play sound for any new notifications
            if(totalUnread > 0) try{ bell?.play?.(); }catch{}
          }

                    // Fetch profile for a specific wallet if provided, otherwise fallback to server-side session profile
                    async function getUserProfile(walletAddr){
                        try{
                            const url = walletAddr ? ('/User/GetUserProfile?wallet='+encodeURIComponent(walletAddr)) : '/User/GetUserProfile';
                            const r = await fetch(url, { cache: 'no-store' });
                            if(!r.ok) return;
                            const p = await r.json();
                            if(p?.avatar) avatarImg.src = p.avatar;
                            if(p?.avatarUrl) avatarImg.src = p.avatarUrl;
                            if(p?.roles?.includes?.('Admin')) adminLink.classList.remove('hidden');
                        }catch(e){ console.warn('getUserProfile error', e); }
                    }

                    async function checkWalletOnServer(address){
                        try{
                            const response = await fetch('/Wallet/CheckWallet?wallet='+encodeURIComponent(address), {cache:'no-store'});
                            if(!response.ok){
                                return { exists:false, requiresProfile:false };
                            }
                            return await response.json();
                        }catch{
                            return { exists:false, requiresProfile:false };
                        }
                    }

                    async function saveProfile(name,email){
                        const wallet = localStorage.getItem('connectedWallet')||'';
                        if(!wallet){
                            alert('Không xác định được ví đã kết nối. Vui lòng kết nối lại.');
                            return false;
                        }
                        try{
                            const r=await fetch('/Wallet/SaveProfile', {
                                method:'POST',
                                headers:{ 'Content-Type':'application/x-www-form-urlencoded' },
                                body: new URLSearchParams({ wallet, name, email })
                            });
                            if(!r.ok){
                                alert('Không thể lưu hồ sơ. Vui lòng thử lại.');
                                return false;
                            }
                            const data = await r.json().catch(()=>null);
                            if(!data){
                                alert('Máy chủ phản hồi không hợp lệ. Vui lòng thử lại.');
                                return false;
                            }
                            if(!data.success){
                                alert(data.message || 'Không thể lưu hồ sơ. Vui lòng thử lại.');
                                return false;
                            }
                            const walletAddress = data.profile?.wallet || wallet;
                            setConnected(true, walletAddress);
                            return true;
                        }catch(err){
                            console.warn('saveProfile error', err);
                            alert('Không thể lưu hồ sơ. Vui lòng thử lại.');
                            return false;
                        }
                    }

                    function setConnected(connected,address){
                        show(connectBtn, !connected);
                        show(walletDropdown, connected);
                        if(connected){
                            shortAddr.textContent = shorten(address);
                            setupRealtime();
                            getUserProfile(address);
                        }else{
                            stopRealtime();
                            setUnreadMessages(0);
                            setUnreadNotifications(0);
                        }
                    }

                    // Ensure the provider is set to BSC Testnet (chainId 0x61). Try to switch, and if missing, add the chain.
                    async function ensureBscTestnet(){
                        if(!window.ethereum) return false;
                        const targetChainId = '0x61'; // BSC Testnet
                        try{
                            const current = await window.ethereum.request({ method: 'eth_chainId' }).catch(()=>null);
                            if(current === targetChainId) return true;
                            await window.ethereum.request({ method: 'wallet_switchEthereumChain', params:[{ chainId: targetChainId }] });
                            return true;
                        }catch(switchError){
                            // 4902 means the chain has not been added to MetaMask
                            try{
                                if(switchError && (switchError.code === 4902 || switchError.message?.includes('Unrecognized chain'))){
                                    await window.ethereum.request({
                                        method: 'wallet_addEthereumChain',
                                        params: [{
                                            chainId: '0x61',
                                            chainName: 'BSC Testnet',
                                            nativeCurrency: { name: 'Binance Coin', symbol: 'tBNB', decimals: 18 },
                                            rpcUrls: ['https://data-seed-prebsc-1-s1.binance.org:8545/','https://data-seed-prebsc-2-s1.binance.org:8545/'],
                                            blockExplorerUrls: ['https://testnet.bscscan.com']
                                        }]
                                    });
                                    // after adding, try switching again
                                    await window.ethereum.request({ method: 'wallet_switchEthereumChain', params:[{ chainId: '0x61' }] });
                                    return true;
                                }
                            }catch(addErr){
                                console.warn('Failed to add BSC Testnet to wallet', addErr);
                                return false;
                            }
                            console.warn('Failed to switch to BSC Testnet', switchError);
                            return false;
                        }
                    }

                    async function connectWallet(){
                        if(!window.ethereum){ alert('⚠️ Cần MetaMask để kết nối ví.'); return; }
                        try{
                            const ok = await ensureBscTestnet();
                            if(!ok){
                                alert('Vui lòng chuyển mạng sang BSC Testnet trong MetaMask rồi thử lại.');
                                return;
                            }
                            const accounts = await window.ethereum.request({ method:'eth_requestAccounts' });
                            const addr = (accounts&&accounts[0])||'';
                            localStorage.setItem('connectedWallet', addr);
                            const info = await checkWalletOnServer(addr);
                            if(!info?.exists){
                                alert('Không thể khởi tạo hồ sơ ví. Vui lòng thử lại.');
                                return;
                            }
                            if(info?.requiresProfile && typeof newWalletModal?.showModal==='function'){
                                newWalletModal.showModal();
                            }
                            setConnected(true, addr);
                        }catch(err){ console.warn(err); }
                    }

          connectBtn?.addEventListener('click', connectWallet);
          trigger?.addEventListener('click', (e)=>{ e.stopPropagation(); menu.classList.toggle('open'); trigger.setAttribute('aria-expanded', menu.classList.contains('open')?'true':'false'); });
          document.addEventListener('click', ()=> menu?.classList.remove('open'));

          logoutBtn?.addEventListener('click', async ()=>{
            try{ await fetch('/Wallet/Logout',{method:'POST', headers:{'RequestVerificationToken': getRequestVerificationToken()}}); }catch{}
            localStorage.removeItem('connectedWallet');
            setConnected(false);
          });

                    newWalletModal?.addEventListener('close', ()=>{
            if(newWalletModal.returnValue==='ok'){
              const name=document.getElementById('nwName').value.trim();
              const email=document.getElementById('nwEmail').value.trim();
                            if(name && email){
                                saveProfile(name,email).then(success=>{
                                    if(success){
                                        newWalletForm?.reset?.();
                                    }else{
                                        requestAnimationFrame(()=>{
                                            try{ newWalletModal.showModal(); }catch{}
                                        });
                                    }
                                });
                            }
            }
          });

                    async function attemptAutoConnect(){
                        // If user previously connected, show the connected UI immediately (optimistic) to avoid flicker.
                        const saved = localStorage.getItem('connectedWallet');
                        if(saved){
                            // show optimistically
                            setConnected(true, saved);
                        } else {
                            setConnected(false);
                        }

                        // Now verify with provider asynchronously. If provider says different account, revert UI.
                        if(!window.ethereum) return;
                        const accounts = await window.ethereum.request({ method:'eth_accounts' }).catch(()=>[]);
                        const addr = accounts && accounts[0];
                        if(addr && saved && saved.toLowerCase()===addr.toLowerCase()){
                            // provider agrees (or user still connected) — ensure display uses canonical address
                            setConnected(true, addr);
                        }else{
                            // mismatch: clear saved state and show disconnected UI
                            localStorage.removeItem('connectedWallet');
                            setConnected(false);
                        }
                    }
                    if(window.ethereum){
                        // When user changes accounts, update UI to reflect the new active account without forcing a full reload.
                        window.ethereum.on?.('accountsChanged', (accounts)=>{
                            try{
                                const a = (accounts && accounts[0]) || null;
                                if(a){
                                    localStorage.setItem('connectedWallet', a);
                                    setConnected(true, a);
                                }else{
                                    localStorage.removeItem('connectedWallet');
                                    setConnected(false);
                                }
                            }catch(e){ console.warn('accountsChanged handler error', e); }
                        });
                        window.ethereum.on?.('chainChanged', ()=>location.reload());
                    }
          window.addEventListener('pageshow', attemptAutoConnect);

          // ===== Realtime notifications =====
          let hub=null, pollIv=null, notificationHub=null, notificationPollIv=null;
          
          async function fetchUnreadMessages(){
            try{
              const r=await fetch('/Conversations/GetTotalUnreadCount',{cache:'no-store'});
              if(!r.ok) return;
              const d=await r.json();
              const n=+d?.total || +d?.count || 0;
              if(n!==unreadMessages){ setUnreadMessages(n); }
            }catch{}
          }
          
          async function fetchUnreadNotifications(){
            try{
              const r=await fetch('/User/GetUnreadNotificationCount',{cache:'no-store'});
              if(!r.ok) return;
              const d=await r.json();
              const n=+d?.count || 0;
              if(n!==unreadNotifications){ setUnreadNotifications(n); }
            }catch{}
          }
          
          async function setupRealtime(){
            // Messages hub
            try{
              hub=new signalR.HubConnectionBuilder().withUrl('/chathub').withAutomaticReconnect().build();
              hub.on('UnreadChanged',(n)=>{ 
                const receiveTime = performance.now();
                console.log('🔔 [T+???ms] _Layout received UnreadChanged:', n, 'at', new Date().toISOString());
                setUnreadMessages(+n||0); 
              });
              await hub.start();
              console.log('✅ _Layout ChatHub connected');
            }catch(err){
              console.error('❌ _Layout ChatHub connection failed:', err);
            }
            
            // Notifications hub
            try{
              notificationHub=new signalR.HubConnectionBuilder().withUrl('/notificationHub').withAutomaticReconnect().build();
              notificationHub.on('UnreadNotificationCountChanged',(n)=>{ setUnreadNotifications(+n||0); });
              await notificationHub.start();
              console.log('✅ _Layout NotificationHub connected');
            }catch(err){
              console.error('❌ _Layout NotificationHub connection failed:', err);
            }
            
            clearInterval(pollIv); 
            clearInterval(notificationPollIv);
            pollIv=setInterval(fetchUnreadMessages,15000); 
            notificationPollIv=setInterval(fetchUnreadNotifications,15000);
            fetchUnreadMessages();
            fetchUnreadNotifications();
          }
          
          function stopRealtime(){ 
            try{ hub?.stop?.(); }catch{} 
            try{ notificationHub?.stop?.(); }catch{} 
            clearInterval(pollIv); 
            clearInterval(notificationPollIv);
            pollIv=null; 
            notificationPollIv=null;
          }
          // If server-side user is authenticated, start realtime/polling immediately so unread badge updates
          try{ if(window.__isAuthenticated === 'true'){ setupRealtime(); } }catch{}
        })();
    </script>

    @RenderSection("Scripts", required: false)
</body>
</html>
